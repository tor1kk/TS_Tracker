
software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e150  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000072c  0800e2f0  0800e2f0  0000f2f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea1c  0800ea1c  000101e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea1c  0800ea1c  0000fa1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea24  0800ea24  000101e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea24  0800ea24  0000fa24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ea28  0800ea28  0000fa28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800ea2c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047e4  200001e8  0800ec14  000101e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049cc  0800ec14  000109cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b787  00000000  00000000  00010218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004212  00000000  00000000  0002b99f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  0002fbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001295  00000000  00000000  000313a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c414  00000000  00000000  00032635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dd2a  00000000  00000000  0004ea49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aaeb2  00000000  00000000  0006c773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117625  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a50  00000000  00000000  00117668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0011f0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e2d8 	.word	0x0800e2d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800e2d8 	.word	0x0800e2d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <vSim800ResetTask>:
 * @brief  Task function for resetting and initializing the SIM800 module.
 * @param  pvParameters Not used
 * @retval None
 */
static void vSim800ResetTask( void * pvParameters )
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

    /* Infinite loop */
    while(1)
    {
    	/* Reset the SIM800 module */
        HAL_GPIO_WritePin(SIM_PWR_CNTRL_GPIO_Port, SIM_PWR_CNTRL_Pin, SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001002:	4825      	ldr	r0, [pc, #148]	@ (8001098 <vSim800ResetTask+0xa4>)
 8001004:	f003 fd80 	bl	8004b08 <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 8001008:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800100c:	f002 fe04 	bl	8003c18 <HAL_Delay>
        HAL_GPIO_WritePin(SIM_PWR_CNTRL_GPIO_Port, SIM_PWR_CNTRL_Pin, RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001016:	4820      	ldr	r0, [pc, #128]	@ (8001098 <vSim800ResetTask+0xa4>)
 8001018:	f003 fd76 	bl	8004b08 <HAL_GPIO_WritePin>

        /* Start receiving data from the SIM800 module */
        if( SIM800_ManageReceiving(&sim800h, ENABLE) != SIM800_OK )
 800101c:	2101      	movs	r1, #1
 800101e:	481f      	ldr	r0, [pc, #124]	@ (800109c <vSim800ResetTask+0xa8>)
 8001020:	f001 fcee 	bl	8002a00 <SIM800_ManageReceiving>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <vSim800ResetTask+0x3a>
        {
            Error_Handler();
 800102a:	f000 ff83 	bl	8001f34 <Error_Handler>
        }

        /* Wait for the SIM800 module to register on the network */
        status = SIM800_GetNetworkRegStatus(&sim800h);
 800102e:	481b      	ldr	r0, [pc, #108]	@ (800109c <vSim800ResetTask+0xa8>)
 8001030:	f001 fd1a 	bl	8002a68 <SIM800_GetNetworkRegStatus>
 8001034:	4603      	mov	r3, r0
 8001036:	73fb      	strb	r3, [r7, #15]
        while( status != SIM800_Registered_HomeNetwork &&
 8001038:	e008      	b.n	800104c <vSim800ResetTask+0x58>
               status != SIM800_Registered_Roaming)
        {
            status = SIM800_GetNetworkRegStatus(&sim800h);
 800103a:	4818      	ldr	r0, [pc, #96]	@ (800109c <vSim800ResetTask+0xa8>)
 800103c:	f001 fd14 	bl	8002a68 <SIM800_GetNetworkRegStatus>
 8001040:	4603      	mov	r3, r0
 8001042:	73fb      	strb	r3, [r7, #15]
            HAL_Delay(500);
 8001044:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001048:	f002 fde6 	bl	8003c18 <HAL_Delay>
        while( status != SIM800_Registered_HomeNetwork &&
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d002      	beq.n	8001058 <vSim800ResetTask+0x64>
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	2b05      	cmp	r3, #5
 8001056:	d1f0      	bne.n	800103a <vSim800ResetTask+0x46>
        }

        /* Delete all existing SMS messages to free memory */
        if( SIM800_DeleteAllSMSMessages(&sim800h) != SIM800_OK )
 8001058:	4810      	ldr	r0, [pc, #64]	@ (800109c <vSim800ResetTask+0xa8>)
 800105a:	f001 fdc9 	bl	8002bf0 <SIM800_DeleteAllSMSMessages>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <vSim800ResetTask+0x74>
        {
            Error_Handler();
 8001064:	f000 ff66 	bl	8001f34 <Error_Handler>
        }

        /* Set SMS text mode */
        if( SIM800_SetSMSTextMode(&sim800h) != SIM800_OK )
 8001068:	480c      	ldr	r0, [pc, #48]	@ (800109c <vSim800ResetTask+0xa8>)
 800106a:	f001 fd6d 	bl	8002b48 <SIM800_SetSMSTextMode>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <vSim800ResetTask+0x84>
        {
            Error_Handler();
 8001074:	f000 ff5e 	bl	8001f34 <Error_Handler>
        }

        /* Enable SMS notifications callback */
        if( SIM800_ManageSMSNotifications(&sim800h, ENABLE) != SIM800_OK )
 8001078:	2101      	movs	r1, #1
 800107a:	4808      	ldr	r0, [pc, #32]	@ (800109c <vSim800ResetTask+0xa8>)
 800107c:	f001 fec6 	bl	8002e0c <SIM800_ManageSMSNotifications>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <vSim800ResetTask+0x96>
        {
            Error_Handler();
 8001086:	f000 ff55 	bl	8001f34 <Error_Handler>
        }

        /* Wait for notification to reset the module again */
        ulTaskNotifyTake( 0, portMAX_DELAY );
 800108a:	f04f 32ff 	mov.w	r2, #4294967295
 800108e:	2100      	movs	r1, #0
 8001090:	2000      	movs	r0, #0
 8001092:	f008 f833 	bl	80090fc <ulTaskGenericNotifyTake>
        HAL_GPIO_WritePin(SIM_PWR_CNTRL_GPIO_Port, SIM_PWR_CNTRL_Pin, SET);
 8001096:	e7b1      	b.n	8000ffc <vSim800ResetTask+0x8>
 8001098:	40020800 	.word	0x40020800
 800109c:	20000338 	.word	0x20000338

080010a0 <vCmdProcessTask>:
 * @brief  Task function for processing commands received via SMS.
 * @param  pvParameters Not used
 * @retval None
 */
static void vCmdProcessTask( void * pvParameters )
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b0a6      	sub	sp, #152	@ 0x98
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	6078      	str	r0, [r7, #4]
    /*
     * Expected command format: <command>:<argument>
     */
    SMS_t cmd_buff = {0};
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	2278      	movs	r2, #120	@ 0x78
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f00a fb14 	bl	800b6de <memset>
    char *pArgument;
    uint32_t command=0, argument=0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
    char *error = "Unknown command!";
 80010c0:	4b3f      	ldr	r3, [pc, #252]	@ (80011c0 <vCmdProcessTask+0x120>)
 80010c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

    while(1)
    {
        /* Wait for a command to be received in the queue */
        xQueueReceive(xCommandQueue, &cmd_buff, portMAX_DELAY);
 80010c6:	4b3f      	ldr	r3, [pc, #252]	@ (80011c4 <vCmdProcessTask+0x124>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f107 010c 	add.w	r1, r7, #12
 80010ce:	f04f 32ff 	mov.w	r2, #4294967295
 80010d2:	4618      	mov	r0, r3
 80010d4:	f006 ff04 	bl	8007ee0 <xQueueReceive>

        /* Parse the command and argument from the message */
        pArgument = strtok((char *)cmd_buff.message, ":");
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	3314      	adds	r3, #20
 80010de:	493a      	ldr	r1, [pc, #232]	@ (80011c8 <vCmdProcessTask+0x128>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f00a fb45 	bl	800b770 <strtok>
 80010e6:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
        command = strtol((char *)cmd_buff.message, NULL, 10);
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	3314      	adds	r3, #20
 80010f0:	220a      	movs	r2, #10
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f009 fb15 	bl	800a724 <strtol>
 80010fa:	4603      	mov	r3, r0
 80010fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

        switch(command)
 8001100:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001104:	3b01      	subs	r3, #1
 8001106:	2b04      	cmp	r3, #4
 8001108:	d84b      	bhi.n	80011a2 <vCmdProcessTask+0x102>
 800110a:	a201      	add	r2, pc, #4	@ (adr r2, 8001110 <vCmdProcessTask+0x70>)
 800110c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001110:	08001125 	.word	0x08001125
 8001114:	08001137 	.word	0x08001137
 8001118:	08001149 	.word	0x08001149
 800111c:	08001183 	.word	0x08001183
 8001120:	08001197 	.word	0x08001197
        {
        case 1:
            /* Send the phone number to the queue for sending GPS coordinates */
            xQueueSend( xNumbersToSendGPSQueue, cmd_buff.number, 0 );
 8001124:	4b29      	ldr	r3, [pc, #164]	@ (80011cc <vCmdProcessTask+0x12c>)
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	f107 010c 	add.w	r1, r7, #12
 800112c:	2300      	movs	r3, #0
 800112e:	2200      	movs	r2, #0
 8001130:	f006 fd36 	bl	8007ba0 <xQueueGenericSend>
            break;
 8001134:	e042      	b.n	80011bc <vCmdProcessTask+0x11c>
        case 2:
            /* Send the phone number to the queue for sending voltage */
            xQueueSend( xNumbersToSendVoltageQueue, cmd_buff.number, 0 );
 8001136:	4b26      	ldr	r3, [pc, #152]	@ (80011d0 <vCmdProcessTask+0x130>)
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	f107 010c 	add.w	r1, r7, #12
 800113e:	2300      	movs	r3, #0
 8001140:	2200      	movs	r2, #0
 8001142:	f006 fd2d 	bl	8007ba0 <xQueueGenericSend>
            break;
 8001146:	e039      	b.n	80011bc <vCmdProcessTask+0x11c>
        case 3:
            /* Set the phone number for notification and send the alarm time to the queue */
            pArgument = strtok(NULL, ":");
 8001148:	491f      	ldr	r1, [pc, #124]	@ (80011c8 <vCmdProcessTask+0x128>)
 800114a:	2000      	movs	r0, #0
 800114c:	f00a fb10 	bl	800b770 <strtok>
 8001150:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
            argument = strtol(pArgument, NULL, 10);
 8001154:	220a      	movs	r2, #10
 8001156:	2100      	movs	r1, #0
 8001158:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800115c:	f009 fae2 	bl	800a724 <strtol>
 8001160:	4603      	mov	r3, r0
 8001162:	60bb      	str	r3, [r7, #8]
            strcpy(phoneNumberForNotify, (char *)cmd_buff.number);
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	4619      	mov	r1, r3
 800116a:	481a      	ldr	r0, [pc, #104]	@ (80011d4 <vCmdProcessTask+0x134>)
 800116c:	f00a fbed 	bl	800b94a <strcpy>
            xQueueSend(xTimeToRTCAlarmQueue, &argument, 0);
 8001170:	4b19      	ldr	r3, [pc, #100]	@ (80011d8 <vCmdProcessTask+0x138>)
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	f107 0108 	add.w	r1, r7, #8
 8001178:	2300      	movs	r3, #0
 800117a:	2200      	movs	r2, #0
 800117c:	f006 fd10 	bl	8007ba0 <xQueueGenericSend>
            break;
 8001180:	e01c      	b.n	80011bc <vCmdProcessTask+0x11c>
        case 4:
            /* Notify the task to send the current alarm time */
            xTaskNotifyGive(xSendCurrentAlarmTaskHandle);
 8001182:	4b16      	ldr	r3, [pc, #88]	@ (80011dc <vCmdProcessTask+0x13c>)
 8001184:	6818      	ldr	r0, [r3, #0]
 8001186:	2300      	movs	r3, #0
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2302      	movs	r3, #2
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	f008 f81c 	bl	80091cc <xTaskGenericNotify>
            break;
 8001194:	e012      	b.n	80011bc <vCmdProcessTask+0x11c>
        case 5:
            /* Deactivate the RTC alarm */
            HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001196:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800119a:	4811      	ldr	r0, [pc, #68]	@ (80011e0 <vCmdProcessTask+0x140>)
 800119c:	f004 fd38 	bl	8005c10 <HAL_RTC_DeactivateAlarm>
            break;
 80011a0:	e00c      	b.n	80011bc <vCmdProcessTask+0x11c>
        default:
            /* Send an error message if the command is unknown */
            strcpy((char *)cmd_buff.message, error);
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	3314      	adds	r3, #20
 80011a8:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80011ac:	4618      	mov	r0, r3
 80011ae:	f00a fbcc 	bl	800b94a <strcpy>
            send_sms(&cmd_buff);
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 fa6e 	bl	8001698 <send_sms>
        xQueueReceive(xCommandQueue, &cmd_buff, portMAX_DELAY);
 80011bc:	e783      	b.n	80010c6 <vCmdProcessTask+0x26>
 80011be:	bf00      	nop
 80011c0:	0800e2f0 	.word	0x0800e2f0
 80011c4:	20000984 	.word	0x20000984
 80011c8:	0800e304 	.word	0x0800e304
 80011cc:	2000098c 	.word	0x2000098c
 80011d0:	20000990 	.word	0x20000990
 80011d4:	200009c0 	.word	0x200009c0
 80011d8:	20000994 	.word	0x20000994
 80011dc:	200009b0 	.word	0x200009b0
 80011e0:	2000024c 	.word	0x2000024c

080011e4 <vSendGPSTask>:
 * @brief  Task function for sending GPS coordinates to a specified phone number.
 * @param  pvParameters Not used
 * @retval None
 */
static void vSendGPSTask( void * pvParameters )
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b0a7      	sub	sp, #156	@ 0x9c
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	6078      	str	r0, [r7, #4]
    Coordinates_t cor = {0};
 80011ec:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
    SMS_t sms = {0};
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	2278      	movs	r2, #120	@ 0x78
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f00a fa6b 	bl	800b6de <memset>

    while(1)
    {
        /* Wait for a phone number to be received in the queue */
        xQueueReceive(xNumbersToSendGPSQueue, sms.number, portMAX_DELAY);
 8001208:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <vSendGPSTask+0x84>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f107 0108 	add.w	r1, r7, #8
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	4618      	mov	r0, r3
 8001216:	f006 fe63 	bl	8007ee0 <xQueueReceive>

        /* Enable power to the GPS module */
//        HAL_GPIO_WritePin(NEO6_PWR_CNTRL_GPIO_Port, NEO6_PWR_CNTRL_Pin, RESET);

        /* Add RMC message type to the expected message list */
        NEO6M_AddExpectedMessage(&neo6mh, RMC);
 800121a:	2105      	movs	r1, #5
 800121c:	4813      	ldr	r0, [pc, #76]	@ (800126c <vSendGPSTask+0x88>)
 800121e:	f000 fe8f 	bl	8001f40 <NEO6M_AddExpectedMessage>

        /* Wait for GPS coordinates to be received in the queue */
        xQueueReceive(xGPSCoordinatesQueue, &cor, portMAX_DELAY);
 8001222:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <vSendGPSTask+0x8c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800122a:	f04f 32ff 	mov.w	r2, #4294967295
 800122e:	4618      	mov	r0, r3
 8001230:	f006 fe56 	bl	8007ee0 <xQueueReceive>

        /* Remove RMC message type from the expected message list */
        NEO6M_RemoveExpectedMessage(&neo6mh, RMC);
 8001234:	2105      	movs	r1, #5
 8001236:	480d      	ldr	r0, [pc, #52]	@ (800126c <vSendGPSTask+0x88>)
 8001238:	f000 fede 	bl	8001ff8 <NEO6M_RemoveExpectedMessage>

        /* Disable power to the GPS module */
//        HAL_GPIO_WritePin(NEO6_PWR_CNTRL_GPIO_Port, NEO6_PWR_CNTRL_Pin, SET);

        /* Format the GPS coordinates as a string */
        sprintf((char *)sms.message, "%f %f", cor.latitude, cor.longitude);
 800123c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001240:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001244:	f107 0408 	add.w	r4, r7, #8
 8001248:	3414      	adds	r4, #20
 800124a:	e9cd 2300 	strd	r2, r3, [sp]
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4908      	ldr	r1, [pc, #32]	@ (8001274 <vSendGPSTask+0x90>)
 8001254:	4620      	mov	r0, r4
 8001256:	f00a f9df 	bl	800b618 <siprintf>

        /* Send the SMS with GPS coordinates */
        send_sms(&sms);
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	4618      	mov	r0, r3
 8001260:	f000 fa1a 	bl	8001698 <send_sms>
        xQueueReceive(xNumbersToSendGPSQueue, sms.number, portMAX_DELAY);
 8001264:	bf00      	nop
 8001266:	e7cf      	b.n	8001208 <vSendGPSTask+0x24>
 8001268:	2000098c 	.word	0x2000098c
 800126c:	20000888 	.word	0x20000888
 8001270:	20000998 	.word	0x20000998
 8001274:	0800e308 	.word	0x0800e308

08001278 <vSendVoltageTask>:
 * @brief  Task function for sending the voltage value to a specified phone number.
 * @param  pvParameters Not used
 * @retval None
 */
static void vSendVoltageTask( void * pvParameters )
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b0a4      	sub	sp, #144	@ 0x90
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
    SMS_t sms = {0};
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	2278      	movs	r2, #120	@ 0x78
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f00a fa28 	bl	800b6de <memset>
    uint32_t adc_raw_value = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
    float coefficient = 6.6 / 4095, voltage = 0;
 8001292:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <vSendVoltageTask+0x90>)
 8001294:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

    while(1)
    {
        /* Wait for a phone number to be received in the queue */
        xQueueReceive(xNumbersToSendVoltageQueue, sms.number, portMAX_DELAY);
 80012a0:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <vSendVoltageTask+0x94>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f107 0110 	add.w	r1, r7, #16
 80012a8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ac:	4618      	mov	r0, r3
 80012ae:	f006 fe17 	bl	8007ee0 <xQueueReceive>

        /* Start ADC conversion in interrupt mode */
        HAL_ADC_Start_IT(&hadc1);
 80012b2:	4817      	ldr	r0, [pc, #92]	@ (8001310 <vSendVoltageTask+0x98>)
 80012b4:	f002 fd18 	bl	8003ce8 <HAL_ADC_Start_IT>

        /* Wait for ADC value to be received in the queue */
        xQueueReceive(xADCValueQueue, &adc_raw_value, portMAX_DELAY);
 80012b8:	4b16      	ldr	r3, [pc, #88]	@ (8001314 <vSendVoltageTask+0x9c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f107 010c 	add.w	r1, r7, #12
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295
 80012c4:	4618      	mov	r0, r3
 80012c6:	f006 fe0b 	bl	8007ee0 <xQueueReceive>

        /* Calculate voltage from ADC raw value */
        voltage = adc_raw_value * coefficient;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	ee07 3a90 	vmov	s15, r3
 80012d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012d4:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 80012d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012dc:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

        /* Format the voltage value as a string */
        sprintf((char *)sms.message, "Voltage: %.2fV", voltage);
 80012e0:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80012e4:	f7ff f938 	bl	8000558 <__aeabi_f2d>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	f107 0110 	add.w	r1, r7, #16
 80012f0:	f101 0014 	add.w	r0, r1, #20
 80012f4:	4908      	ldr	r1, [pc, #32]	@ (8001318 <vSendVoltageTask+0xa0>)
 80012f6:	f00a f98f 	bl	800b618 <siprintf>

        /* Send the SMS with voltage value */
        send_sms(&sms);
 80012fa:	f107 0310 	add.w	r3, r7, #16
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f9ca 	bl	8001698 <send_sms>
        xQueueReceive(xNumbersToSendVoltageQueue, sms.number, portMAX_DELAY);
 8001304:	bf00      	nop
 8001306:	e7cb      	b.n	80012a0 <vSendVoltageTask+0x28>
 8001308:	3ad34067 	.word	0x3ad34067
 800130c:	20000990 	.word	0x20000990
 8001310:	20000204 	.word	0x20000204
 8001314:	2000099c 	.word	0x2000099c
 8001318:	0800e310 	.word	0x0800e310

0800131c <vSendSMSTask>:
 * @brief  Task function for sending SMS messages.
 * @param  pvParameters Not used
 * @retval None
 */
static void vSendSMSTask( void * pvParameters )
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b0a0      	sub	sp, #128	@ 0x80
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
    SMS_t sms = {0};
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	2278      	movs	r2, #120	@ 0x78
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f00a f9d6 	bl	800b6de <memset>

    while(1)
    {
        /* Wait for an SMS message to be received in the queue */
        xQueueReceive(xSMSToSendQueue, &sms, portMAX_DELAY);
 8001332:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <vSendSMSTask+0x40>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f107 0108 	add.w	r1, r7, #8
 800133a:	f04f 32ff 	mov.w	r2, #4294967295
 800133e:	4618      	mov	r0, r3
 8001340:	f006 fdce 	bl	8007ee0 <xQueueReceive>

        /* Send the SMS message */
        SIM800_SendSMSMessage(&sim800h, (char *)sms.number, (char *)sms.message);
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	f103 0214 	add.w	r2, r3, #20
 800134c:	f107 0308 	add.w	r3, r7, #8
 8001350:	4619      	mov	r1, r3
 8001352:	4803      	ldr	r0, [pc, #12]	@ (8001360 <vSendSMSTask+0x44>)
 8001354:	f001 fca0 	bl	8002c98 <SIM800_SendSMSMessage>
        xQueueReceive(xSMSToSendQueue, &sms, portMAX_DELAY);
 8001358:	bf00      	nop
 800135a:	e7ea      	b.n	8001332 <vSendSMSTask+0x16>
 800135c:	20000988 	.word	0x20000988
 8001360:	20000338 	.word	0x20000338

08001364 <vConfigRTCAlarmTask>:
 * @brief  Task function for configuring the RTC alarm.
 * @param  pvParameters Not used
 * @retval None
 */
static void vConfigRTCAlarmTask( void * pvParameters )
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08e      	sub	sp, #56	@ 0x38
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
    /*
     * Expected time format: hhmm
     * Max time: 2359
     */
    uint32_t time=0;
 800136c:	2300      	movs	r3, #0
 800136e:	633b      	str	r3, [r7, #48]	@ 0x30
    uint8_t hrs=0, min=0;
 8001370:	2300      	movs	r3, #0
 8001372:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001376:	2300      	movs	r3, #0
 8001378:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    RTC_AlarmTypeDef sAlarm;
    HAL_StatusTypeDef status = HAL_OK;
 800137c:	2300      	movs	r3, #0
 800137e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    while(1)
    {
        /* Wait for an alarm time to be received in the queue */
        xQueueReceive(xTimeToRTCAlarmQueue, &time, portMAX_DELAY);
 8001382:	4b33      	ldr	r3, [pc, #204]	@ (8001450 <vConfigRTCAlarmTask+0xec>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800138a:	f04f 32ff 	mov.w	r2, #4294967295
 800138e:	4618      	mov	r0, r3
 8001390:	f006 fda6 	bl	8007ee0 <xQueueReceive>

        /* Parse the hours and minutes from the received time */
        if( time > 2359 )
 8001394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001396:	f640 1237 	movw	r2, #2359	@ 0x937
 800139a:	4293      	cmp	r3, r2
 800139c:	d906      	bls.n	80013ac <vConfigRTCAlarmTask+0x48>
        {
            hrs = 23;
 800139e:	2317      	movs	r3, #23
 80013a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            min = 59;
 80013a4:	233b      	movs	r3, #59	@ 0x3b
 80013a6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80013aa:	e017      	b.n	80013dc <vConfigRTCAlarmTask+0x78>
        } else
        {
            hrs = time / 100;
 80013ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013ae:	4a29      	ldr	r2, [pc, #164]	@ (8001454 <vConfigRTCAlarmTask+0xf0>)
 80013b0:	fba2 2303 	umull	r2, r3, r2, r3
 80013b4:	095b      	lsrs	r3, r3, #5
 80013b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            min = time - hrs * 100;
 80013ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80013c2:	4619      	mov	r1, r3
 80013c4:	0089      	lsls	r1, r1, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	4619      	mov	r1, r3
 80013ca:	0088      	lsls	r0, r1, #2
 80013cc:	4619      	mov	r1, r3
 80013ce:	4603      	mov	r3, r0
 80013d0:	440b      	add	r3, r1
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        }

        /* Configure the RTC alarm structure */
        sAlarm.AlarmTime.Hours = hrs;
 80013dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80013e0:	723b      	strb	r3, [r7, #8]
        sAlarm.AlarmTime.Minutes = min;
 80013e2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80013e6:	727b      	strb	r3, [r7, #9]
        sAlarm.AlarmTime.Seconds = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	72bb      	strb	r3, [r7, #10]
        sAlarm.AlarmTime.SubSeconds = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
        sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
        sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61bb      	str	r3, [r7, #24]
        sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 80013f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80013fc:	61fb      	str	r3, [r7, #28]
        sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
        sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
        sAlarm.AlarmDateWeekDay = 1;
 8001406:	2301      	movs	r3, #1
 8001408:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        sAlarm.Alarm = RTC_ALARM_A;
 800140c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001410:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Deactivate the existing RTC alarm */
        status = HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001412:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001416:	4810      	ldr	r0, [pc, #64]	@ (8001458 <vConfigRTCAlarmTask+0xf4>)
 8001418:	f004 fbfa 	bl	8005c10 <HAL_RTC_DeactivateAlarm>
 800141c:	4603      	mov	r3, r0
 800141e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        if(status != HAL_OK)
 8001422:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <vConfigRTCAlarmTask+0xca>
        {
            Error_Handler();
 800142a:	f000 fd83 	bl	8001f34 <Error_Handler>
        }

        /* Set the new RTC alarm */
        status = HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	2200      	movs	r2, #0
 8001434:	4619      	mov	r1, r3
 8001436:	4808      	ldr	r0, [pc, #32]	@ (8001458 <vConfigRTCAlarmTask+0xf4>)
 8001438:	f004 faa8 	bl	800598c <HAL_RTC_SetAlarm_IT>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        if(status != HAL_OK)
 8001442:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001446:	2b00      	cmp	r3, #0
 8001448:	d09b      	beq.n	8001382 <vConfigRTCAlarmTask+0x1e>
        {
            Error_Handler();
 800144a:	f000 fd73 	bl	8001f34 <Error_Handler>
        xQueueReceive(xTimeToRTCAlarmQueue, &time, portMAX_DELAY);
 800144e:	e798      	b.n	8001382 <vConfigRTCAlarmTask+0x1e>
 8001450:	20000994 	.word	0x20000994
 8001454:	51eb851f 	.word	0x51eb851f
 8001458:	2000024c 	.word	0x2000024c

0800145c <vSendCurrentAlarmTask>:
 * @brief  Task function for sending the current RTC alarm time.
 * @param  pvParameters Not used
 * @retval None
 */
static void vSendCurrentAlarmTask( void * pvParameters )
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b0ca      	sub	sp, #296	@ 0x128
 8001460:	af02      	add	r7, sp, #8
 8001462:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001466:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800146a:	6018      	str	r0, [r3, #0]
    RTC_AlarmTypeDef sAlarm;
    uint32_t hrs = 0, min = 0, sec = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    SMS_t sms = {0};
 800147e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001482:	2278      	movs	r2, #120	@ 0x78
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f00a f929 	bl	800b6de <memset>
    HAL_StatusTypeDef status = HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
    char message_buff[100];

    while(1)
    {
        /* Wait for a notification to send the current alarm time */
        ulTaskNotifyTake(xSendCurrentAlarmTaskHandle, portMAX_DELAY);
 8001492:	4b25      	ldr	r3, [pc, #148]	@ (8001528 <vSendCurrentAlarmTask+0xcc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f04f 32ff 	mov.w	r2, #4294967295
 800149a:	4619      	mov	r1, r3
 800149c:	2000      	movs	r0, #0
 800149e:	f007 fe2d 	bl	80090fc <ulTaskGenericNotifyTake>

        /* Check if a phone number for notification is set */
        if( phoneNumberForNotify[0] == '+' )
 80014a2:	4b22      	ldr	r3, [pc, #136]	@ (800152c <vSendCurrentAlarmTask+0xd0>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80014a8:	d1f3      	bne.n	8001492 <vSendCurrentAlarmTask+0x36>
        {
            /* Get the current RTC alarm settings */
            status = HAL_RTC_GetAlarm(&hrtc, &sAlarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 80014aa:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 80014ae:	2300      	movs	r3, #0
 80014b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014b4:	481e      	ldr	r0, [pc, #120]	@ (8001530 <vSendCurrentAlarmTask+0xd4>)
 80014b6:	f004 fc38 	bl	8005d2a <HAL_RTC_GetAlarm>
 80014ba:	4603      	mov	r3, r0
 80014bc:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
            if(status != HAL_OK)
 80014c0:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <vSendCurrentAlarmTask+0x70>
            {
                Error_Handler();
 80014c8:	f000 fd34 	bl	8001f34 <Error_Handler>
            }

            /* Extract the alarm time components */
            hrs = ( uint32_t )sAlarm.AlarmTime.Hours;
 80014cc:	f897 30e8 	ldrb.w	r3, [r7, #232]	@ 0xe8
 80014d0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
            min = ( uint32_t )sAlarm.AlarmTime.Minutes;
 80014d4:	f897 30e9 	ldrb.w	r3, [r7, #233]	@ 0xe9
 80014d8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
            sec = ( uint32_t )sAlarm.AlarmTime.Seconds;
 80014dc:	f897 30ea 	ldrb.w	r3, [r7, #234]	@ 0xea
 80014e0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

            /* Format the alarm time as a string */
            sprintf(message_buff, "Current alarm\n"
 80014e4:	f107 000c 	add.w	r0, r7, #12
 80014e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80014f2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80014f6:	490f      	ldr	r1, [pc, #60]	@ (8001534 <vSendCurrentAlarmTask+0xd8>)
 80014f8:	f00a f88e 	bl	800b618 <siprintf>
                                  "Time: %02ld:%02ld:%02ld", hrs, min, sec);

            /* Set the phone number and message for the SMS */
            strcpy((char *)sms.number, phoneNumberForNotify);
 80014fc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001500:	490a      	ldr	r1, [pc, #40]	@ (800152c <vSendCurrentAlarmTask+0xd0>)
 8001502:	4618      	mov	r0, r3
 8001504:	f00a fa21 	bl	800b94a <strcpy>
            strcpy((char *)sms.message, message_buff);
 8001508:	f107 020c 	add.w	r2, r7, #12
 800150c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001510:	3314      	adds	r3, #20
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f00a fa18 	bl	800b94a <strcpy>

            /* Send the SMS with the current alarm time */
            send_sms(&sms);
 800151a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f8ba 	bl	8001698 <send_sms>
        ulTaskNotifyTake(xSendCurrentAlarmTaskHandle, portMAX_DELAY);
 8001524:	e7b5      	b.n	8001492 <vSendCurrentAlarmTask+0x36>
 8001526:	bf00      	nop
 8001528:	200009b0 	.word	0x200009b0
 800152c:	200009c0 	.word	0x200009c0
 8001530:	2000024c 	.word	0x2000024c
 8001534:	0800e320 	.word	0x0800e320

08001538 <vApplicationIdleHook>:
 * @brief  Idle hook function for putting the system into sleep mode.
 * @param  None
 * @retval None
 */
void vApplicationIdleHook( void )
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800153c:	2101      	movs	r1, #1
 800153e:	2000      	movs	r0, #0
 8001540:	f003 fafc 	bl	8004b3c <HAL_PWR_EnterSLEEPMode>
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}

08001548 <create_tasks>:
 * @brief  Function for creating all the application tasks.
 * @param  None
 * @retval None
 */
void create_tasks(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af02      	add	r7, sp, #8
    BaseType_t xReturned;

    /* Create the SIM800 reset task */
    xReturned  = xTaskCreate(
 800154e:	4b3d      	ldr	r3, [pc, #244]	@ (8001644 <create_tasks+0xfc>)
 8001550:	9301      	str	r3, [sp, #4]
 8001552:	2304      	movs	r3, #4
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	2300      	movs	r3, #0
 8001558:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800155c:	493a      	ldr	r1, [pc, #232]	@ (8001648 <create_tasks+0x100>)
 800155e:	483b      	ldr	r0, [pc, #236]	@ (800164c <create_tasks+0x104>)
 8001560:	f006 fe98 	bl	8008294 <xTaskCreate>
 8001564:	6078      	str	r0, [r7, #4]
            400,                          /* Stack size in words, not bytes */
            NULL,                         /* Parameter passed into the task */
            4,                            /* Priority at which the task is created */
            &xSim800ResetTaskHandle );    /* Used to pass out the created task's handle */

    if( xReturned != pdPASS )
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d001      	beq.n	8001570 <create_tasks+0x28>
    {
        Error_Handler();
 800156c:	f000 fce2 	bl	8001f34 <Error_Handler>
    }

    /* Create the command process task */
    xReturned  = xTaskCreate(
 8001570:	4b37      	ldr	r3, [pc, #220]	@ (8001650 <create_tasks+0x108>)
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	2303      	movs	r3, #3
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2300      	movs	r3, #0
 800157a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800157e:	4935      	ldr	r1, [pc, #212]	@ (8001654 <create_tasks+0x10c>)
 8001580:	4835      	ldr	r0, [pc, #212]	@ (8001658 <create_tasks+0x110>)
 8001582:	f006 fe87 	bl	8008294 <xTaskCreate>
 8001586:	6078      	str	r0, [r7, #4]
            400,                          /* Stack size in words, not bytes */
            NULL,                         /* Parameter passed into the task */
            3,                            /* Priority at which the task is created */
            &xCmdProcessTaskHandle );     /* Used to pass out the created task's handle */

    if( xReturned != pdPASS )
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d001      	beq.n	8001592 <create_tasks+0x4a>
    {
        Error_Handler();
 800158e:	f000 fcd1 	bl	8001f34 <Error_Handler>
    }

    /* Create the task for sending GPS coordinates */
    xReturned  = xTaskCreate(
 8001592:	4b32      	ldr	r3, [pc, #200]	@ (800165c <create_tasks+0x114>)
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	2301      	movs	r3, #1
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2300      	movs	r3, #0
 800159c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80015a0:	492f      	ldr	r1, [pc, #188]	@ (8001660 <create_tasks+0x118>)
 80015a2:	4830      	ldr	r0, [pc, #192]	@ (8001664 <create_tasks+0x11c>)
 80015a4:	f006 fe76 	bl	8008294 <xTaskCreate>
 80015a8:	6078      	str	r0, [r7, #4]
            400,                          /* Stack size in words, not bytes */
            NULL,                         /* Parameter passed into the task */
            1,                            /* Priority at which the task is created */
            &xSendGPSTaskHandle );        /* Used to pass out the created task's handle */

    if( xReturned != pdPASS )
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d001      	beq.n	80015b4 <create_tasks+0x6c>
    {
        Error_Handler();
 80015b0:	f000 fcc0 	bl	8001f34 <Error_Handler>
    }

    /* Create the task for sending voltage value */
    xReturned  = xTaskCreate(
 80015b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001668 <create_tasks+0x120>)
 80015b6:	9301      	str	r3, [sp, #4]
 80015b8:	2301      	movs	r3, #1
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2300      	movs	r3, #0
 80015be:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80015c2:	492a      	ldr	r1, [pc, #168]	@ (800166c <create_tasks+0x124>)
 80015c4:	482a      	ldr	r0, [pc, #168]	@ (8001670 <create_tasks+0x128>)
 80015c6:	f006 fe65 	bl	8008294 <xTaskCreate>
 80015ca:	6078      	str	r0, [r7, #4]
            400,                          /* Stack size in words, not bytes */
            NULL,                         /* Parameter passed into the task */
            1,                            /* Priority at which the task is created */
            &xSendVoltageTaskHandle );    /* Used to pass out the created task's handle */

    if( xReturned != pdPASS )
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d001      	beq.n	80015d6 <create_tasks+0x8e>
    {
        Error_Handler();
 80015d2:	f000 fcaf 	bl	8001f34 <Error_Handler>
    }

    /* Create the task for sending SMS messages */
    xReturned  = xTaskCreate(
 80015d6:	4b27      	ldr	r3, [pc, #156]	@ (8001674 <create_tasks+0x12c>)
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	2302      	movs	r3, #2
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	2300      	movs	r3, #0
 80015e0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80015e4:	4924      	ldr	r1, [pc, #144]	@ (8001678 <create_tasks+0x130>)
 80015e6:	4825      	ldr	r0, [pc, #148]	@ (800167c <create_tasks+0x134>)
 80015e8:	f006 fe54 	bl	8008294 <xTaskCreate>
 80015ec:	6078      	str	r0, [r7, #4]
            400,                          /* Stack size in words, not bytes */
            NULL,                         /* Parameter passed into the task */
            2,                            /* Priority at which the task is created */
            &xSendSMSTaskHandle );        /* Used to pass out the created task's handle */

    if( xReturned != pdPASS )
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d001      	beq.n	80015f8 <create_tasks+0xb0>
    {
        Error_Handler();
 80015f4:	f000 fc9e 	bl	8001f34 <Error_Handler>
    }

    /* Create the task for configuring the RTC alarm */
    xReturned  = xTaskCreate(
 80015f8:	4b21      	ldr	r3, [pc, #132]	@ (8001680 <create_tasks+0x138>)
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	2301      	movs	r3, #1
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2300      	movs	r3, #0
 8001602:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001606:	491f      	ldr	r1, [pc, #124]	@ (8001684 <create_tasks+0x13c>)
 8001608:	481f      	ldr	r0, [pc, #124]	@ (8001688 <create_tasks+0x140>)
 800160a:	f006 fe43 	bl	8008294 <xTaskCreate>
 800160e:	6078      	str	r0, [r7, #4]
            400,                          /* Stack size in words, not bytes */
            NULL,                         /* Parameter passed into the task */
            1,                            /* Priority at which the task is created */
            &xConfigRTCAlarmTaskHandle ); /* Used to pass out the created task's handle */

    if( xReturned != pdPASS )
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d001      	beq.n	800161a <create_tasks+0xd2>
    {
        Error_Handler();
 8001616:	f000 fc8d 	bl	8001f34 <Error_Handler>
    }

    /* Create the task for sending the current RTC alarm time */
    xReturned  = xTaskCreate(
 800161a:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <create_tasks+0x144>)
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	2301      	movs	r3, #1
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2300      	movs	r3, #0
 8001624:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001628:	4919      	ldr	r1, [pc, #100]	@ (8001690 <create_tasks+0x148>)
 800162a:	481a      	ldr	r0, [pc, #104]	@ (8001694 <create_tasks+0x14c>)
 800162c:	f006 fe32 	bl	8008294 <xTaskCreate>
 8001630:	6078      	str	r0, [r7, #4]
            400,                          /* Stack size in words, not bytes */
            NULL,                         /* Parameter passed into the task */
            1,                            /* Priority at which the task is created */
            &xSendCurrentAlarmTaskHandle ); /* Used to pass out the created task's handle */

    if( xReturned != pdPASS )
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d001      	beq.n	800163c <create_tasks+0xf4>
    {
        Error_Handler();
 8001638:	f000 fc7c 	bl	8001f34 <Error_Handler>
    }
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200009a0 	.word	0x200009a0
 8001648:	0800e348 	.word	0x0800e348
 800164c:	08000ff5 	.word	0x08000ff5
 8001650:	200009a4 	.word	0x200009a4
 8001654:	0800e35c 	.word	0x0800e35c
 8001658:	080010a1 	.word	0x080010a1
 800165c:	200009a8 	.word	0x200009a8
 8001660:	0800e374 	.word	0x0800e374
 8001664:	080011e5 	.word	0x080011e5
 8001668:	200009ac 	.word	0x200009ac
 800166c:	0800e390 	.word	0x0800e390
 8001670:	08001279 	.word	0x08001279
 8001674:	200009b4 	.word	0x200009b4
 8001678:	0800e3a4 	.word	0x0800e3a4
 800167c:	0800131d 	.word	0x0800131d
 8001680:	200009b8 	.word	0x200009b8
 8001684:	0800e3b4 	.word	0x0800e3b4
 8001688:	08001365 	.word	0x08001365
 800168c:	200009b0 	.word	0x200009b0
 8001690:	0800e3c8 	.word	0x0800e3c8
 8001694:	0800145d 	.word	0x0800145d

08001698 <send_sms>:
 * @brief  Function for sending an SMS message.
 * @param  sms Pointer to the SMS structure containing the message and recipient number
 * @retval None
 */
void send_sms(SMS_t *sms)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
    /* Send the SMS message to the queue for transmission */
    xQueueSend(xSMSToSendQueue, sms, 0);
 80016a0:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <send_sms+0x20>)
 80016a2:	6818      	ldr	r0, [r3, #0]
 80016a4:	2300      	movs	r3, #0
 80016a6:	2200      	movs	r2, #0
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	f006 fa79 	bl	8007ba0 <xQueueGenericSend>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000988 	.word	0x20000988

080016bc <vApplicationStackOverflowHook>:
 * @param  pcTaskName Name of the task that caused the stack overflow
 * @retval None
 */
void vApplicationStackOverflowHook( TaskHandle_t xTask,
                                    char *pcTaskName )
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
    /* Infinite loop in case of stack overflow */
    while(1)
 80016c6:	bf00      	nop
 80016c8:	e7fd      	b.n	80016c6 <vApplicationStackOverflowHook+0xa>
	...

080016cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d0:	f002 fa60 	bl	8003b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d4:	f000 f862 	bl	800179c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d8:	f000 fa20 	bl	8001b1c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80016dc:	f000 f9a0 	bl	8001a20 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80016e0:	f000 f9c8 	bl	8001a74 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80016e4:	f000 f9f0 	bl	8001ac8 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80016e8:	f000 f8ba 	bl	8001860 <MX_ADC1_Init>
  MX_RTC_Init();
 80016ec:	f000 f90a 	bl	8001904 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

    set_current_time();
 80016f0:	f000 fba6 	bl	8001e40 <set_current_time>

    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80016f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016f8:	4820      	ldr	r0, [pc, #128]	@ (800177c <main+0xb0>)
 80016fa:	f004 fa89 	bl	8005c10 <HAL_RTC_DeactivateAlarm>

    xCommandQueue = xQueueCreate(COMMAND_QUEUE_LEGHT, sizeof( SMS_t ));
 80016fe:	2200      	movs	r2, #0
 8001700:	2178      	movs	r1, #120	@ 0x78
 8001702:	2005      	movs	r0, #5
 8001704:	f006 f9da 	bl	8007abc <xQueueGenericCreate>
 8001708:	4603      	mov	r3, r0
 800170a:	4a1d      	ldr	r2, [pc, #116]	@ (8001780 <main+0xb4>)
 800170c:	6013      	str	r3, [r2, #0]
    xSMSToSendQueue = xQueueCreate(SMS_QUEUE_LEGHT, sizeof( SMS_t ));
 800170e:	2200      	movs	r2, #0
 8001710:	2178      	movs	r1, #120	@ 0x78
 8001712:	2005      	movs	r0, #5
 8001714:	f006 f9d2 	bl	8007abc <xQueueGenericCreate>
 8001718:	4603      	mov	r3, r0
 800171a:	4a1a      	ldr	r2, [pc, #104]	@ (8001784 <main+0xb8>)
 800171c:	6013      	str	r3, [r2, #0]
    xNumbersToSendGPSQueue = xQueueCreate(SEND_GPS_QUEUE_LENGHT, PHONE_NUMBER_MAX_LENGHT);
 800171e:	2200      	movs	r2, #0
 8001720:	2114      	movs	r1, #20
 8001722:	2005      	movs	r0, #5
 8001724:	f006 f9ca 	bl	8007abc <xQueueGenericCreate>
 8001728:	4603      	mov	r3, r0
 800172a:	4a17      	ldr	r2, [pc, #92]	@ (8001788 <main+0xbc>)
 800172c:	6013      	str	r3, [r2, #0]
    xNumbersToSendVoltageQueue = xQueueCreate(SEND_VOLTAGE_QUEUE_LENGHT, PHONE_NUMBER_MAX_LENGHT);
 800172e:	2200      	movs	r2, #0
 8001730:	2114      	movs	r1, #20
 8001732:	2005      	movs	r0, #5
 8001734:	f006 f9c2 	bl	8007abc <xQueueGenericCreate>
 8001738:	4603      	mov	r3, r0
 800173a:	4a14      	ldr	r2, [pc, #80]	@ (800178c <main+0xc0>)
 800173c:	6013      	str	r3, [r2, #0]
    xTimeToRTCAlarmQueue = xQueueCreate(ALARM_TIME_QUEUE_LENGHT, sizeof( uint32_t ));
 800173e:	2200      	movs	r2, #0
 8001740:	2104      	movs	r1, #4
 8001742:	2001      	movs	r0, #1
 8001744:	f006 f9ba 	bl	8007abc <xQueueGenericCreate>
 8001748:	4603      	mov	r3, r0
 800174a:	4a11      	ldr	r2, [pc, #68]	@ (8001790 <main+0xc4>)
 800174c:	6013      	str	r3, [r2, #0]
    xGPSCoordinatesQueue = xQueueCreate(GPS_QUEUE_LEGHT, sizeof( Coordinates_t ));
 800174e:	2200      	movs	r2, #0
 8001750:	2110      	movs	r1, #16
 8001752:	2001      	movs	r0, #1
 8001754:	f006 f9b2 	bl	8007abc <xQueueGenericCreate>
 8001758:	4603      	mov	r3, r0
 800175a:	4a0e      	ldr	r2, [pc, #56]	@ (8001794 <main+0xc8>)
 800175c:	6013      	str	r3, [r2, #0]
    xADCValueQueue = xQueueCreate(ADC_QUEUE_LEGHT, sizeof( uint32_t ));
 800175e:	2200      	movs	r2, #0
 8001760:	2104      	movs	r1, #4
 8001762:	2001      	movs	r0, #1
 8001764:	f006 f9aa 	bl	8007abc <xQueueGenericCreate>
 8001768:	4603      	mov	r3, r0
 800176a:	4a0b      	ldr	r2, [pc, #44]	@ (8001798 <main+0xcc>)
 800176c:	6013      	str	r3, [r2, #0]

    create_tasks();
 800176e:	f7ff feeb 	bl	8001548 <create_tasks>

    vTaskStartScheduler();
 8001772:	f006 fefb 	bl	800856c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001776:	bf00      	nop
 8001778:	e7fd      	b.n	8001776 <main+0xaa>
 800177a:	bf00      	nop
 800177c:	2000024c 	.word	0x2000024c
 8001780:	20000984 	.word	0x20000984
 8001784:	20000988 	.word	0x20000988
 8001788:	2000098c 	.word	0x2000098c
 800178c:	20000990 	.word	0x20000990
 8001790:	20000994 	.word	0x20000994
 8001794:	20000998 	.word	0x20000998
 8001798:	2000099c 	.word	0x2000099c

0800179c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b094      	sub	sp, #80	@ 0x50
 80017a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a2:	f107 0320 	add.w	r3, r7, #32
 80017a6:	2230      	movs	r2, #48	@ 0x30
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f009 ff97 	bl	800b6de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	4b24      	ldr	r3, [pc, #144]	@ (8001858 <SystemClock_Config+0xbc>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c8:	4a23      	ldr	r2, [pc, #140]	@ (8001858 <SystemClock_Config+0xbc>)
 80017ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d0:	4b21      	ldr	r3, [pc, #132]	@ (8001858 <SystemClock_Config+0xbc>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017dc:	2300      	movs	r3, #0
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	4b1e      	ldr	r3, [pc, #120]	@ (800185c <SystemClock_Config+0xc0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80017e8:	4a1c      	ldr	r2, [pc, #112]	@ (800185c <SystemClock_Config+0xc0>)
 80017ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b1a      	ldr	r3, [pc, #104]	@ (800185c <SystemClock_Config+0xc0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80017fc:	230a      	movs	r3, #10
 80017fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001800:	2301      	movs	r3, #1
 8001802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001804:	2310      	movs	r3, #16
 8001806:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001808:	2301      	movs	r3, #1
 800180a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800180c:	2300      	movs	r3, #0
 800180e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001810:	f107 0320 	add.w	r3, r7, #32
 8001814:	4618      	mov	r0, r3
 8001816:	f003 f9ad 	bl	8004b74 <HAL_RCC_OscConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001820:	f000 fb88 	bl	8001f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001824:	230f      	movs	r3, #15
 8001826:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001830:	2300      	movs	r3, #0
 8001832:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f003 fc10 	bl	8005064 <HAL_RCC_ClockConfig>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800184a:	f000 fb73 	bl	8001f34 <Error_Handler>
  }
}
 800184e:	bf00      	nop
 8001850:	3750      	adds	r7, #80	@ 0x50
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800
 800185c:	40007000 	.word	0x40007000

08001860 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001866:	463b      	mov	r3, r7
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001872:	4b21      	ldr	r3, [pc, #132]	@ (80018f8 <MX_ADC1_Init+0x98>)
 8001874:	4a21      	ldr	r2, [pc, #132]	@ (80018fc <MX_ADC1_Init+0x9c>)
 8001876:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001878:	4b1f      	ldr	r3, [pc, #124]	@ (80018f8 <MX_ADC1_Init+0x98>)
 800187a:	2200      	movs	r2, #0
 800187c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800187e:	4b1e      	ldr	r3, [pc, #120]	@ (80018f8 <MX_ADC1_Init+0x98>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001884:	4b1c      	ldr	r3, [pc, #112]	@ (80018f8 <MX_ADC1_Init+0x98>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800188a:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <MX_ADC1_Init+0x98>)
 800188c:	2200      	movs	r2, #0
 800188e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001890:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <MX_ADC1_Init+0x98>)
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001898:	4b17      	ldr	r3, [pc, #92]	@ (80018f8 <MX_ADC1_Init+0x98>)
 800189a:	2200      	movs	r2, #0
 800189c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800189e:	4b16      	ldr	r3, [pc, #88]	@ (80018f8 <MX_ADC1_Init+0x98>)
 80018a0:	4a17      	ldr	r2, [pc, #92]	@ (8001900 <MX_ADC1_Init+0xa0>)
 80018a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018a4:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <MX_ADC1_Init+0x98>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80018aa:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <MX_ADC1_Init+0x98>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018b0:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <MX_ADC1_Init+0x98>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	@ (80018f8 <MX_ADC1_Init+0x98>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018be:	480e      	ldr	r0, [pc, #56]	@ (80018f8 <MX_ADC1_Init+0x98>)
 80018c0:	f002 f9ce 	bl	8003c60 <HAL_ADC_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80018ca:	f000 fb33 	bl	8001f34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80018ce:	2306      	movs	r3, #6
 80018d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018d2:	2301      	movs	r3, #1
 80018d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018da:	463b      	mov	r3, r7
 80018dc:	4619      	mov	r1, r3
 80018de:	4806      	ldr	r0, [pc, #24]	@ (80018f8 <MX_ADC1_Init+0x98>)
 80018e0:	f002 fbf2 	bl	80040c8 <HAL_ADC_ConfigChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80018ea:	f000 fb23 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000204 	.word	0x20000204
 80018fc:	40012000 	.word	0x40012000
 8001900:	0f000001 	.word	0x0f000001

08001904 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b090      	sub	sp, #64	@ 0x40
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800190a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800191a:	2300      	movs	r3, #0
 800191c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800191e:	463b      	mov	r3, r7
 8001920:	2228      	movs	r2, #40	@ 0x28
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f009 feda 	bl	800b6de <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800192a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a18 <MX_RTC_Init+0x114>)
 800192c:	4a3b      	ldr	r2, [pc, #236]	@ (8001a1c <MX_RTC_Init+0x118>)
 800192e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001930:	4b39      	ldr	r3, [pc, #228]	@ (8001a18 <MX_RTC_Init+0x114>)
 8001932:	2200      	movs	r2, #0
 8001934:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001936:	4b38      	ldr	r3, [pc, #224]	@ (8001a18 <MX_RTC_Init+0x114>)
 8001938:	227f      	movs	r2, #127	@ 0x7f
 800193a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800193c:	4b36      	ldr	r3, [pc, #216]	@ (8001a18 <MX_RTC_Init+0x114>)
 800193e:	22ff      	movs	r2, #255	@ 0xff
 8001940:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001942:	4b35      	ldr	r3, [pc, #212]	@ (8001a18 <MX_RTC_Init+0x114>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001948:	4b33      	ldr	r3, [pc, #204]	@ (8001a18 <MX_RTC_Init+0x114>)
 800194a:	2200      	movs	r2, #0
 800194c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800194e:	4b32      	ldr	r3, [pc, #200]	@ (8001a18 <MX_RTC_Init+0x114>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001954:	4830      	ldr	r0, [pc, #192]	@ (8001a18 <MX_RTC_Init+0x114>)
 8001956:	f003 fe85 	bl	8005664 <HAL_RTC_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001960:	f000 fae8 	bl	8001f34 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001976:	2300      	movs	r3, #0
 8001978:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800197a:	2300      	movs	r3, #0
 800197c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800197e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001982:	2200      	movs	r2, #0
 8001984:	4619      	mov	r1, r3
 8001986:	4824      	ldr	r0, [pc, #144]	@ (8001a18 <MX_RTC_Init+0x114>)
 8001988:	f003 fee2 	bl	8005750 <HAL_RTC_SetTime>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001992:	f000 facf 	bl	8001f34 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001996:	2301      	movs	r3, #1
 8001998:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800199c:	2301      	movs	r3, #1
 800199e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 1;
 80019a2:	2301      	movs	r3, #1
 80019a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80019ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019b2:	2200      	movs	r2, #0
 80019b4:	4619      	mov	r1, r3
 80019b6:	4818      	ldr	r0, [pc, #96]	@ (8001a18 <MX_RTC_Init+0x114>)
 80019b8:	f003 ff64 	bl	8005884 <HAL_RTC_SetDate>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80019c2:	f000 fab7 	bl	8001f34 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 80019de:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80019e2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80019f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80019f8:	463b      	mov	r3, r7
 80019fa:	2200      	movs	r2, #0
 80019fc:	4619      	mov	r1, r3
 80019fe:	4806      	ldr	r0, [pc, #24]	@ (8001a18 <MX_RTC_Init+0x114>)
 8001a00:	f003 ffc4 	bl	800598c <HAL_RTC_SetAlarm_IT>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001a0a:	f000 fa93 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	3740      	adds	r7, #64	@ 0x40
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2000024c 	.word	0x2000024c
 8001a1c:	40002800 	.word	0x40002800

08001a20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a24:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <MX_USART1_UART_Init+0x4c>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	@ (8001a70 <MX_USART1_UART_Init+0x50>)
 8001a28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a2a:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <MX_USART1_UART_Init+0x4c>)
 8001a2c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001a30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <MX_USART1_UART_Init+0x4c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a38:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <MX_USART1_UART_Init+0x4c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <MX_USART1_UART_Init+0x4c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a44:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <MX_USART1_UART_Init+0x4c>)
 8001a46:	220c      	movs	r2, #12
 8001a48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4a:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <MX_USART1_UART_Init+0x4c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a50:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <MX_USART1_UART_Init+0x4c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a56:	4805      	ldr	r0, [pc, #20]	@ (8001a6c <MX_USART1_UART_Init+0x4c>)
 8001a58:	f004 fd82 	bl	8006560 <HAL_UART_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a62:	f000 fa67 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	2000026c 	.word	0x2000026c
 8001a70:	40011000 	.word	0x40011000

08001a74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a78:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <MX_USART2_UART_Init+0x4c>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	@ (8001ac4 <MX_USART2_UART_Init+0x50>)
 8001a7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001a7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <MX_USART2_UART_Init+0x4c>)
 8001a80:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001a84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac0 <MX_USART2_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <MX_USART2_UART_Init+0x4c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a92:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <MX_USART2_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a98:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <MX_USART2_UART_Init+0x4c>)
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <MX_USART2_UART_Init+0x4c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <MX_USART2_UART_Init+0x4c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aaa:	4805      	ldr	r0, [pc, #20]	@ (8001ac0 <MX_USART2_UART_Init+0x4c>)
 8001aac:	f004 fd58 	bl	8006560 <HAL_UART_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ab6:	f000 fa3d 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200002b0 	.word	0x200002b0
 8001ac4:	40004400 	.word	0x40004400

08001ac8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001acc:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <MX_USART6_UART_Init+0x4c>)
 8001ace:	4a12      	ldr	r2, [pc, #72]	@ (8001b18 <MX_USART6_UART_Init+0x50>)
 8001ad0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001ad2:	4b10      	ldr	r3, [pc, #64]	@ (8001b14 <MX_USART6_UART_Init+0x4c>)
 8001ad4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ad8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <MX_USART6_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <MX_USART6_UART_Init+0x4c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <MX_USART6_UART_Init+0x4c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001aec:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <MX_USART6_UART_Init+0x4c>)
 8001aee:	220c      	movs	r2, #12
 8001af0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001af2:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <MX_USART6_UART_Init+0x4c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af8:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <MX_USART6_UART_Init+0x4c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001afe:	4805      	ldr	r0, [pc, #20]	@ (8001b14 <MX_USART6_UART_Init+0x4c>)
 8001b00:	f004 fd2e 	bl	8006560 <HAL_UART_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001b0a:	f000 fa13 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200002f4 	.word	0x200002f4
 8001b18:	40011400 	.word	0x40011400

08001b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	4b2b      	ldr	r3, [pc, #172]	@ (8001be4 <MX_GPIO_Init+0xc8>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	4a2a      	ldr	r2, [pc, #168]	@ (8001be4 <MX_GPIO_Init+0xc8>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b42:	4b28      	ldr	r3, [pc, #160]	@ (8001be4 <MX_GPIO_Init+0xc8>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	4b24      	ldr	r3, [pc, #144]	@ (8001be4 <MX_GPIO_Init+0xc8>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	4a23      	ldr	r2, [pc, #140]	@ (8001be4 <MX_GPIO_Init+0xc8>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5e:	4b21      	ldr	r3, [pc, #132]	@ (8001be4 <MX_GPIO_Init+0xc8>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	603b      	str	r3, [r7, #0]
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001be4 <MX_GPIO_Init+0xc8>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	4a1c      	ldr	r2, [pc, #112]	@ (8001be4 <MX_GPIO_Init+0xc8>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001be4 <MX_GPIO_Init+0xc8>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NEO6_PWR_CNTRL_GPIO_Port, NEO6_PWR_CNTRL_Pin, GPIO_PIN_SET);
 8001b86:	2201      	movs	r2, #1
 8001b88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b8c:	4816      	ldr	r0, [pc, #88]	@ (8001be8 <MX_GPIO_Init+0xcc>)
 8001b8e:	f002 ffbb 	bl	8004b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIM_PWR_CNTRL_GPIO_Port, SIM_PWR_CNTRL_Pin, GPIO_PIN_RESET);
 8001b92:	2200      	movs	r2, #0
 8001b94:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b98:	4814      	ldr	r0, [pc, #80]	@ (8001bec <MX_GPIO_Init+0xd0>)
 8001b9a:	f002 ffb5 	bl	8004b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NEO6_PWR_CNTRL_Pin */
  GPIO_InitStruct.Pin = NEO6_PWR_CNTRL_Pin;
 8001b9e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ba2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NEO6_PWR_CNTRL_GPIO_Port, &GPIO_InitStruct);
 8001bb0:	f107 030c 	add.w	r3, r7, #12
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	480c      	ldr	r0, [pc, #48]	@ (8001be8 <MX_GPIO_Init+0xcc>)
 8001bb8:	f002 fe22 	bl	8004800 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_PWR_CNTRL_Pin */
  GPIO_InitStruct.Pin = SIM_PWR_CNTRL_Pin;
 8001bbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SIM_PWR_CNTRL_GPIO_Port, &GPIO_InitStruct);
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4805      	ldr	r0, [pc, #20]	@ (8001bec <MX_GPIO_Init+0xd0>)
 8001bd6:	f002 fe13 	bl	8004800 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bda:	bf00      	nop
 8001bdc:	3720      	adds	r7, #32
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020400 	.word	0x40020400
 8001bec:	40020800 	.word	0x40020800

08001bf0 <HAL_UART_RxCpltCallback>:
 * @brief  Callback function called when data is received on UART.
 * @param  huart Pointer to the UART handle structure.
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check if the received data is from the SIM800 module */
  if(huart == sim800_uart)
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c24 <HAL_UART_RxCpltCallback+0x34>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d103      	bne.n	8001c0a <HAL_UART_RxCpltCallback+0x1a>
  {
    /* Call the SIM800 message handler */
    SIM800_MessageHandler(&sim800h);
 8001c02:	4809      	ldr	r0, [pc, #36]	@ (8001c28 <HAL_UART_RxCpltCallback+0x38>)
 8001c04:	f001 f990 	bl	8002f28 <SIM800_MessageHandler>
  else if( huart == gps_uart )
  {
    /* Call the NEO6M message handler */
    NEO6M_MessageHandler(&neo6mh);
  }
}
 8001c08:	e007      	b.n	8001c1a <HAL_UART_RxCpltCallback+0x2a>
  else if( huart == gps_uart )
 8001c0a:	4b08      	ldr	r3, [pc, #32]	@ (8001c2c <HAL_UART_RxCpltCallback+0x3c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d102      	bne.n	8001c1a <HAL_UART_RxCpltCallback+0x2a>
    NEO6M_MessageHandler(&neo6mh);
 8001c14:	4806      	ldr	r0, [pc, #24]	@ (8001c30 <HAL_UART_RxCpltCallback+0x40>)
 8001c16:	f000 fa31 	bl	800207c <NEO6M_MessageHandler>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000000 	.word	0x20000000
 8001c28:	20000338 	.word	0x20000338
 8001c2c:	20000004 	.word	0x20000004
 8001c30:	20000888 	.word	0x20000888

08001c34 <HAL_ADC_ConvCpltCallback>:
 * @brief  Callback function called when ADC conversion is completed.
 * @param  hadc Pointer to the ADC handle structure.
 * @retval None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t adc_value = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]

  /* Get the ADC conversion value */
  adc_value = HAL_ADC_GetValue(hadc);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f002 fa1f 	bl	8004084 <HAL_ADC_GetValue>
 8001c46:	4603      	mov	r3, r0
 8001c48:	60fb      	str	r3, [r7, #12]

  /* Send the ADC value to the queue from the interrupt context */
  xQueueSendFromISR( xADCValueQueue, ( void * )&adc_value, NULL );
 8001c4a:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_ADC_ConvCpltCallback+0x30>)
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	f107 010c 	add.w	r1, r7, #12
 8001c52:	2300      	movs	r3, #0
 8001c54:	2200      	movs	r2, #0
 8001c56:	f006 f88d 	bl	8007d74 <xQueueGenericSendFromISR>
}
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	2000099c 	.word	0x2000099c

08001c68 <NEO6M_RMCCallBack>:
 * @brief  Callback function called when an RMC message is received from the NEO6M GPS module.
 * @param  package Pointer to the RMC package data structure.
 * @retval None
 */
void NEO6M_RMCCallBack(void *package)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
    RMC_Package_t *rmc_package = (RMC_Package_t *)package;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	61fb      	str	r3, [r7, #28]
    Coordinates_t cor = {0};
 8001c74:	f107 0308 	add.w	r3, r7, #8
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]

    /* Check if valid latitude and longitude values are received */
    if( rmc_package->latitude != 0 && rmc_package->longitude != 0 )
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	f7fe ff22 	bl	8000ad8 <__aeabi_dcmpeq>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d000      	beq.n	8001c9c <NEO6M_RMCCallBack+0x34>
        cor.longitude = rmc_package->longitude;

        /* Send the coordinates to the queue from the interrupt context */
        xQueueSendFromISR( xGPSCoordinatesQueue, ( void * ) &cor, NULL );
    }
}
 8001c9a:	e01e      	b.n	8001cda <NEO6M_RMCCallBack+0x72>
    if( rmc_package->latitude != 0 && rmc_package->longitude != 0 )
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	f7fe ff15 	bl	8000ad8 <__aeabi_dcmpeq>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d000      	beq.n	8001cb6 <NEO6M_RMCCallBack+0x4e>
}
 8001cb4:	e011      	b.n	8001cda <NEO6M_RMCCallBack+0x72>
        cor.latitude = rmc_package->latitude;
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cbc:	e9c7 2302 	strd	r2, r3, [r7, #8]
        cor.longitude = rmc_package->longitude;
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001cc6:	e9c7 2304 	strd	r2, r3, [r7, #16]
        xQueueSendFromISR( xGPSCoordinatesQueue, ( void * ) &cor, NULL );
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <NEO6M_RMCCallBack+0x7c>)
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	f107 0108 	add.w	r1, r7, #8
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f006 f84d 	bl	8007d74 <xQueueGenericSendFromISR>
}
 8001cda:	bf00      	nop
 8001cdc:	3720      	adds	r7, #32
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000998 	.word	0x20000998

08001ce8 <NEO6M_GLLCallBack>:
 * @brief  Callback function called when a GLL message is received from the NEO6M GPS module.
 * @param  package Pointer to the GLL package data structure.
 * @retval None
 */
void NEO6M_GLLCallBack(void *package)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
    GLL_Package_t *gll_package = (GLL_Package_t *)package;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	60fb      	str	r3, [r7, #12]

    /* Check if valid latitude and longitude values are received */
    if( gll_package->latitude != 0 && gll_package->longitude != 0 )
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	f7fe fee9 	bl	8000ad8 <__aeabi_dcmpeq>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d000      	beq.n	8001d0e <NEO6M_GLLCallBack+0x26>
        if(currentTime > 240000)
        {
            currentTime -= 240000;
        }
    }
}
 8001d0c:	e020      	b.n	8001d50 <NEO6M_GLLCallBack+0x68>
    if( gll_package->latitude != 0 && gll_package->longitude != 0 )
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	f7fe fedc 	bl	8000ad8 <__aeabi_dcmpeq>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d000      	beq.n	8001d28 <NEO6M_GLLCallBack+0x40>
}
 8001d26:	e013      	b.n	8001d50 <NEO6M_GLLCallBack+0x68>
        currentTime = gll_package->time + 30000;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	f503 43ea 	add.w	r3, r3, #29952	@ 0x7500
 8001d30:	3330      	adds	r3, #48	@ 0x30
 8001d32:	4a09      	ldr	r2, [pc, #36]	@ (8001d58 <NEO6M_GLLCallBack+0x70>)
 8001d34:	6013      	str	r3, [r2, #0]
        if(currentTime > 240000)
 8001d36:	4b08      	ldr	r3, [pc, #32]	@ (8001d58 <NEO6M_GLLCallBack+0x70>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a08      	ldr	r2, [pc, #32]	@ (8001d5c <NEO6M_GLLCallBack+0x74>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d907      	bls.n	8001d50 <NEO6M_GLLCallBack+0x68>
            currentTime -= 240000;
 8001d40:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <NEO6M_GLLCallBack+0x70>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f5a3 336a 	sub.w	r3, r3, #239616	@ 0x3a800
 8001d48:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001d4c:	4a02      	ldr	r2, [pc, #8]	@ (8001d58 <NEO6M_GLLCallBack+0x70>)
 8001d4e:	6013      	str	r3, [r2, #0]
}
 8001d50:	bf00      	nop
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	200009bc 	.word	0x200009bc
 8001d5c:	0003a980 	.word	0x0003a980

08001d60 <SIM800_NewSMSNotificationCallBack>:
 * @param  handle Pointer to the SIM800 handle structure.
 * @param  sms_index Index of the received SMS message.
 * @retval None
 */
void SIM800_NewSMSNotificationCallBack(SIM800_Handle_t *handle, uint32_t sms_index)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
    /* Request the SIM800 module to send the received SMS message */
    SIM800_RequestSMSMessage(handle, sms_index);
 8001d6a:	6839      	ldr	r1, [r7, #0]
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f001 f885 	bl	8002e7c <SIM800_RequestSMSMessage>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <SIM800_RcvdSMSCallBack>:
 * @param  handle Pointer to the SIM800 handle structure.
 * @param  message Pointer to the received SMS message structure.
 * @retval None
 */
void SIM800_RcvdSMSCallBack(SIM800_Handle_t *handle, SIM800_SMSMessage_t *message)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b0a2      	sub	sp, #136	@ 0x88
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
    SMS_t cmd_buff = {0};
 8001d86:	f107 0308 	add.w	r3, r7, #8
 8001d8a:	2278      	movs	r2, #120	@ 0x78
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f009 fca5 	bl	800b6de <memset>
    size_t phone_number_size = 0, sms_message_size = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    /* Get the length of the phone number and SMS message */
    phone_number_size = strlen(message->sender);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fa6c 	bl	8000280 <strlen>
 8001da8:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    sms_message_size = strlen(message->text);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	3314      	adds	r3, #20
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe fa65 	bl	8000280 <strlen>
 8001db6:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80

    /* Truncate the phone number if it exceeds the maximum allowed length */
    if( phone_number_size > SMS_SENDER_MAX_LEN)
 8001dba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001dbe:	2b14      	cmp	r3, #20
 8001dc0:	d902      	bls.n	8001dc8 <SIM800_RcvdSMSCallBack+0x4c>
    {
        message->sender[SMS_SENDER_MAX_LEN] = '\0';
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	751a      	strb	r2, [r3, #20]
    }

    /* Truncate the SMS message if it exceeds the maximum allowed length */
    if( sms_message_size > SMS_TEXT_MAX_LEN)
 8001dc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001dcc:	2b64      	cmp	r3, #100	@ 0x64
 8001dce:	d903      	bls.n	8001dd8 <SIM800_RcvdSMSCallBack+0x5c>
    {
        message->text[SMS_TEXT_MAX_LEN] = '\0';
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    }

    /* Copy the phone number and SMS message to the command buffer */
    strcpy((char *)&cmd_buff.number, message->sender);
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	f107 0308 	add.w	r3, r7, #8
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f009 fdb2 	bl	800b94a <strcpy>
    strcpy((char *)&cmd_buff.message, message->text);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	f103 0214 	add.w	r2, r3, #20
 8001dec:	f107 0308 	add.w	r3, r7, #8
 8001df0:	3314      	adds	r3, #20
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f009 fda8 	bl	800b94a <strcpy>

    /* Send the command buffer to the queue from the interrupt context */
    xQueueSendFromISR( xCommandQueue, ( void * ) &cmd_buff, NULL );
 8001dfa:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <SIM800_RcvdSMSCallBack+0x98>)
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	f107 0108 	add.w	r1, r7, #8
 8001e02:	2300      	movs	r3, #0
 8001e04:	2200      	movs	r2, #0
 8001e06:	f005 ffb5 	bl	8007d74 <xQueueGenericSendFromISR>
}
 8001e0a:	bf00      	nop
 8001e0c:	3788      	adds	r7, #136	@ 0x88
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000984 	.word	0x20000984

08001e18 <HAL_RTC_AlarmAEventCallback>:
 * @brief  Callback function called when the RTC alarm event occurs.
 * @param  hrtc Pointer to the RTC handle structure.
 * @retval None
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
    /* Send the phone number for notification to the queue for sending GPS coordinates */
    xQueueSendFromISR( xNumbersToSendGPSQueue, phoneNumberForNotify, 0 );
 8001e20:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <HAL_RTC_AlarmAEventCallback+0x20>)
 8001e22:	6818      	ldr	r0, [r3, #0]
 8001e24:	2300      	movs	r3, #0
 8001e26:	2200      	movs	r2, #0
 8001e28:	4904      	ldr	r1, [pc, #16]	@ (8001e3c <HAL_RTC_AlarmAEventCallback+0x24>)
 8001e2a:	f005 ffa3 	bl	8007d74 <xQueueGenericSendFromISR>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	2000098c 	.word	0x2000098c
 8001e3c:	200009c0 	.word	0x200009c0

08001e40 <set_current_time>:
 * @brief  Function to set the current time in the RTC using the GPS module.
 * @param  None
 * @retval None
 */
static void set_current_time(void)
{
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime;
    uint8_t hrs = 0, min = 0, sec = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	75fb      	strb	r3, [r7, #23]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	75bb      	strb	r3, [r7, #22]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	757b      	strb	r3, [r7, #21]

    /* Enable power to the GPS module */
    HAL_GPIO_WritePin(NEO6_PWR_CNTRL_GPIO_Port, NEO6_PWR_CNTRL_Pin, RESET);
 8001e52:	2200      	movs	r2, #0
 8001e54:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e58:	4827      	ldr	r0, [pc, #156]	@ (8001ef8 <set_current_time+0xb8>)
 8001e5a:	f002 fe55 	bl	8004b08 <HAL_GPIO_WritePin>
    /* Add the GLL message type to the expected message list */
    NEO6M_AddExpectedMessage(&neo6mh, GLL);
 8001e5e:	2101      	movs	r1, #1
 8001e60:	4826      	ldr	r0, [pc, #152]	@ (8001efc <set_current_time+0xbc>)
 8001e62:	f000 f86d 	bl	8001f40 <NEO6M_AddExpectedMessage>

    /* Wait until the current time is updated from the GLL message */
    while( !currentTime );
 8001e66:	bf00      	nop
 8001e68:	4b25      	ldr	r3, [pc, #148]	@ (8001f00 <set_current_time+0xc0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0fb      	beq.n	8001e68 <set_current_time+0x28>

    /* Remove the GLL message type from the expected message list */
    NEO6M_RemoveExpectedMessage(&neo6mh, GLL);
 8001e70:	2101      	movs	r1, #1
 8001e72:	4822      	ldr	r0, [pc, #136]	@ (8001efc <set_current_time+0xbc>)
 8001e74:	f000 f8c0 	bl	8001ff8 <NEO6M_RemoveExpectedMessage>
    /* Disable power to the GPS module */
//    HAL_GPIO_WritePin(NEO6_PWR_CNTRL_GPIO_Port, NEO6_PWR_CNTRL_Pin, SET);

    /* Extract the hours, minutes, and seconds from the current time */
    hrs = currentTime / 10000;
 8001e78:	4b21      	ldr	r3, [pc, #132]	@ (8001f00 <set_current_time+0xc0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a21      	ldr	r2, [pc, #132]	@ (8001f04 <set_current_time+0xc4>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	0b5b      	lsrs	r3, r3, #13
 8001e84:	75fb      	strb	r3, [r7, #23]
    min = ( currentTime - hrs * 10000 ) / 100;
 8001e86:	4b1e      	ldr	r3, [pc, #120]	@ (8001f00 <set_current_time+0xc0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	7dfa      	ldrb	r2, [r7, #23]
 8001e8c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001e90:	fb01 f202 	mul.w	r2, r1, r2
 8001e94:	1a9b      	subs	r3, r3, r2
 8001e96:	4a1c      	ldr	r2, [pc, #112]	@ (8001f08 <set_current_time+0xc8>)
 8001e98:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9c:	095b      	lsrs	r3, r3, #5
 8001e9e:	75bb      	strb	r3, [r7, #22]
    sec = currentTime - ( hrs * 10000 + min * 100 );
 8001ea0:	4b17      	ldr	r3, [pc, #92]	@ (8001f00 <set_current_time+0xc0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	b2d9      	uxtb	r1, r3
 8001eac:	7dbb      	ldrb	r3, [r7, #22]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	0080      	lsls	r0, r0, #2
 8001eb2:	4403      	add	r3, r0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	0084      	lsls	r4, r0, #2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	4623      	mov	r3, r4
 8001ebc:	4403      	add	r3, r0
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	440b      	add	r3, r1
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	757b      	strb	r3, [r7, #21]

    /* Configure the RTC time structure */
    sTime.Hours = hrs;
 8001eca:	7dfb      	ldrb	r3, [r7, #23]
 8001ecc:	703b      	strb	r3, [r7, #0]
    sTime.Minutes = min;
 8001ece:	7dbb      	ldrb	r3, [r7, #22]
 8001ed0:	707b      	strb	r3, [r7, #1]
    sTime.Seconds = sec;
 8001ed2:	7d7b      	ldrb	r3, [r7, #21]
 8001ed4:	70bb      	strb	r3, [r7, #2]
    sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	70fb      	strb	r3, [r7, #3]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]

    /* Set the RTC time */
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001ee2:	463b      	mov	r3, r7
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4808      	ldr	r0, [pc, #32]	@ (8001f0c <set_current_time+0xcc>)
 8001eea:	f003 fc31 	bl	8005750 <HAL_RTC_SetTime>
}
 8001eee:	bf00      	nop
 8001ef0:	371c      	adds	r7, #28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd90      	pop	{r4, r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40020400 	.word	0x40020400
 8001efc:	20000888 	.word	0x20000888
 8001f00:	200009bc 	.word	0x200009bc
 8001f04:	d1b71759 	.word	0xd1b71759
 8001f08:	51eb851f 	.word	0x51eb851f
 8001f0c:	2000024c 	.word	0x2000024c

08001f10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a04      	ldr	r2, [pc, #16]	@ (8001f30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d101      	bne.n	8001f26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f22:	f001 fe59 	bl	8003bd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40010000 	.word	0x40010000

08001f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f38:	b672      	cpsid	i
}
 8001f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f3c:	bf00      	nop
 8001f3e:	e7fd      	b.n	8001f3c <Error_Handler+0x8>

08001f40 <NEO6M_AddExpectedMessage>:
  * @param   *handler: Pointer to the handler structure.
  * 		 MessagesTypes_t message_type: One of the supported message type, see @messages_types in .h file
  * @retval  0 - if successfully, otherwise - 1
  */
uint8_t NEO6M_AddExpectedMessage(NEO6M_Handle_t *handle, MessagesTypes_t message_type)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	70fb      	strb	r3, [r7, #3]
	uint8_t flag=1;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]

	/* Search for empty space */
	for(uint32_t i = 0; i < EXPECTED_MESSAGES_BUFF_SIZE; i++)
 8001f50:	2300      	movs	r3, #0
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	e02a      	b.n	8001fac <NEO6M_AddExpectedMessage+0x6c>
	{
		if(handle->expectedMessages[i].callback == NULL)
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	68ba      	ldr	r2, [r7, #8]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4413      	add	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	3308      	adds	r3, #8
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d11c      	bne.n	8001fa6 <NEO6M_AddExpectedMessage+0x66>
		{
			handle->expectedMessages[i] = NMEA_STANDART_MESSAGGES[message_type];
 8001f6c:	78fa      	ldrb	r2, [r7, #3]
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	460b      	mov	r3, r1
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	440b      	add	r3, r1
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4418      	add	r0, r3
 8001f7c:	491c      	ldr	r1, [pc, #112]	@ (8001ff0 <NEO6M_AddExpectedMessage+0xb0>)
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	18ca      	adds	r2, r1, r3
 8001f88:	4603      	mov	r3, r0
 8001f8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			handle->expectedMessagesCount++;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8001f96:	3301      	adds	r3, #1
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
			flag = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	73fb      	strb	r3, [r7, #15]
			break;
 8001fa4:	e005      	b.n	8001fb2 <NEO6M_AddExpectedMessage+0x72>
	for(uint32_t i = 0; i < EXPECTED_MESSAGES_BUFF_SIZE; i++)
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2b0b      	cmp	r3, #11
 8001fb0:	d9d1      	bls.n	8001f56 <NEO6M_AddExpectedMessage+0x16>
		}
	}

	/* If MCU doesn't receive messages from module yet, starts receiving and updates status flag */
	if(!flag)
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d115      	bne.n	8001fe4 <NEO6M_AddExpectedMessage+0xa4>
	{
		if(handle->receive_status == NEO_FREE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d110      	bne.n	8001fe4 <NEO6M_AddExpectedMessage+0xa4>
		{
			handle->receive_status = NEO_WAITING;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
			if(HAL_UART_Receive_IT(GPS_UART, (uint8_t *)&handle->rcvdByte, 1) != HAL_OK)
 8001fca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <NEO6M_AddExpectedMessage+0xb4>)
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3392      	adds	r3, #146	@ 0x92
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f004 fb55 	bl	8006684 <HAL_UART_Receive_IT>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <NEO6M_AddExpectedMessage+0xa4>
			{
				flag = 1;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return flag;
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	0800e4ec 	.word	0x0800e4ec
 8001ff4:	20000004 	.word	0x20000004

08001ff8 <NEO6M_RemoveExpectedMessage>:
  * @param   *handler: Pointer to the handler structure.
  * 		 MessagesTypes_t message_type: One of the supported message type, see @messages_types in .h file
  * @retval  0 - if successfully, otherwise - 1
  */
uint8_t NEO6M_RemoveExpectedMessage(NEO6M_Handle_t *handle, MessagesTypes_t message_type)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	70fb      	strb	r3, [r7, #3]
	/* Check which messages is expects, if this is type that must be removed - changes it to EMPTY */
	for(uint32_t i = 0; i < EXPECTED_MESSAGES_BUFF_SIZE; i++)
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	e02b      	b.n	8002062 <NEO6M_RemoveExpectedMessage+0x6a>
	{
		if(handle->expectedMessages[i].type == message_type)
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4613      	mov	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	78fa      	ldrb	r2, [r7, #3]
 800201c:	429a      	cmp	r2, r3
 800201e:	d11d      	bne.n	800205c <NEO6M_RemoveExpectedMessage+0x64>
		{
			handle->expectedMessages[i] = NMEA_STANDART_MESSAGGES[EMPTY];
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	4a12      	ldr	r2, [pc, #72]	@ (8002078 <NEO6M_RemoveExpectedMessage+0x80>)
 8002030:	ca07      	ldmia	r2, {r0, r1, r2}
 8002032:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			handle->expectedMessagesCount--;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800203c:	3b01      	subs	r3, #1
 800203e:	b2da      	uxtb	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

			//If no messages expects - finishes receiving
			if(handle->expectedMessagesCount < 1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800204c:	2b00      	cmp	r3, #0
 800204e:	d103      	bne.n	8002058 <NEO6M_RemoveExpectedMessage+0x60>
			{
				handle->receive_status = NEO_FREE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
			}
			return 0;
 8002058:	2300      	movs	r3, #0
 800205a:	e006      	b.n	800206a <NEO6M_RemoveExpectedMessage+0x72>
	for(uint32_t i = 0; i < EXPECTED_MESSAGES_BUFF_SIZE; i++)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3301      	adds	r3, #1
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b0b      	cmp	r3, #11
 8002066:	d9d0      	bls.n	800200a <NEO6M_RemoveExpectedMessage+0x12>
		}
	}

	return 1;
 8002068:	2301      	movs	r3, #1
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	0800e4ec 	.word	0x0800e4ec

0800207c <NEO6M_MessageHandler>:
  * @note	 Ensure this is invoked within the appropriate UART callback for proper operation.
  * @param   *handler: Pointer to the handler structure.
  * @retval  None
  */
void NEO6M_MessageHandler(NEO6M_Handle_t *handler)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
	uint32_t checked_types=0;
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]

	//Moves received byte to buffer
	handler->rxBuff[handler->rxCounter++] = handler->rcvdByte;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800208e:	1c59      	adds	r1, r3, #1
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	f8c2 10f8 	str.w	r1, [r2, #248]	@ 0xf8
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	f892 1092 	ldrb.w	r1, [r2, #146]	@ 0x92
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	4413      	add	r3, r2
 80020a0:	460a      	mov	r2, r1
 80020a2:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

	//Checks for end sequence
	if(handler->rcvdByte == '\n')
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80020ac:	2b0a      	cmp	r3, #10
 80020ae:	d14b      	bne.n	8002148 <NEO6M_MessageHandler+0xcc>
	{
		//Iterates array with expects messages types
		for(uint32_t i=0; i < EXPECTED_MESSAGES_BUFF_SIZE; i++)
 80020b0:	2300      	movs	r3, #0
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	e038      	b.n	8002128 <NEO6M_MessageHandler+0xac>
		{
			//Check for empty space in array
			if(handler->expectedMessages[i].type != EMPTY)
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d024      	beq.n	8002114 <NEO6M_MessageHandler+0x98>
			{
				//Compares received message type witch expected message type
				if(!( strncmp(handler->rxBuff, handler->expectedMessages[i].formatter, 6) ))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f103 0093 	add.w	r0, r3, #147	@ 0x93
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	3301      	adds	r3, #1
 80020e0:	2206      	movs	r2, #6
 80020e2:	4619      	mov	r1, r3
 80020e4:	f009 fb1f 	bl	800b726 <strncmp>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10f      	bne.n	800210e <NEO6M_MessageHandler+0x92>
				{
					//Calls appropriate message handler if this is expected message
					NMEA_MESSAGGES_HANDLERS[handler->expectedMessages[i].type-1](handler, i);
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	4613      	mov	r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	3b01      	subs	r3, #1
 8002100:	4a17      	ldr	r2, [pc, #92]	@ (8002160 <NEO6M_MessageHandler+0xe4>)
 8002102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002106:	68b9      	ldr	r1, [r7, #8]
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	4798      	blx	r3
					break;
 800210c:	e011      	b.n	8002132 <NEO6M_MessageHandler+0xb6>
				}
				checked_types++;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3301      	adds	r3, #1
 8002112:	60fb      	str	r3, [r7, #12]
			}
			//If count of checked messages types is equal to count of all messages types that expects, then finishes iteration
			if(checked_types >= handler->expectedMessagesCount)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800211a:	461a      	mov	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4293      	cmp	r3, r2
 8002120:	d206      	bcs.n	8002130 <NEO6M_MessageHandler+0xb4>
		for(uint32_t i=0; i < EXPECTED_MESSAGES_BUFF_SIZE; i++)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	3301      	adds	r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b0b      	cmp	r3, #11
 800212c:	d9c3      	bls.n	80020b6 <NEO6M_MessageHandler+0x3a>
 800212e:	e000      	b.n	8002132 <NEO6M_MessageHandler+0xb6>
			{
				break;
 8002130:	bf00      	nop
			}
		}

		//Resets the rx buffer
		memset(handler->rxBuff, 0, RX_BUFFER_SIZE);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3393      	adds	r3, #147	@ 0x93
 8002136:	2264      	movs	r2, #100	@ 0x64
 8002138:	2100      	movs	r1, #0
 800213a:	4618      	mov	r0, r3
 800213c:	f009 facf 	bl	800b6de <memset>
		handler->rxCounter = 0;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	}

	HAL_UART_Receive_IT(GPS_UART, (uint8_t *)&handler->rcvdByte, 1);
 8002148:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <NEO6M_MessageHandler+0xe8>)
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3392      	adds	r3, #146	@ 0x92
 8002150:	2201      	movs	r2, #1
 8002152:	4619      	mov	r1, r3
 8002154:	f004 fa96 	bl	8006684 <HAL_UART_Receive_IT>
}
 8002158:	bf00      	nop
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	0800e540 	.word	0x0800e540
 8002164:	20000004 	.word	0x20000004

08002168 <gga_handle>:
  * @param   *handler: Pointer to the handler structure.
  * @param   *message_num: Index of the message
  * @retval  None
  */
static void gga_handle(NEO6M_Handle_t *handle, uint32_t message_num)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b0a0      	sub	sp, #128	@ 0x80
 800216c:	af0e      	add	r7, sp, #56	@ 0x38
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
	GGA_Package_t package={0};
 8002172:	f107 0308 	add.w	r3, r7, #8
 8002176:	2240      	movs	r2, #64	@ 0x40
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f009 faaf 	bl	800b6de <memset>

	nmea_parser(handle->rxBuff, "3dcdc88ffcfc88",
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f103 0093 	add.w	r0, r3, #147	@ 0x93
 8002186:	f107 0308 	add.w	r3, r7, #8
 800218a:	f103 0108 	add.w	r1, r3, #8
 800218e:	f107 0208 	add.w	r2, r7, #8
 8002192:	f107 0308 	add.w	r3, r7, #8
 8002196:	3338      	adds	r3, #56	@ 0x38
 8002198:	930c      	str	r3, [sp, #48]	@ 0x30
 800219a:	f107 0308 	add.w	r3, r7, #8
 800219e:	3336      	adds	r3, #54	@ 0x36
 80021a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80021a2:	f107 0308 	add.w	r3, r7, #8
 80021a6:	3335      	adds	r3, #53	@ 0x35
 80021a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80021aa:	f107 0308 	add.w	r3, r7, #8
 80021ae:	3334      	adds	r3, #52	@ 0x34
 80021b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80021b2:	f107 0308 	add.w	r3, r7, #8
 80021b6:	3330      	adds	r3, #48	@ 0x30
 80021b8:	9308      	str	r3, [sp, #32]
 80021ba:	f107 0308 	add.w	r3, r7, #8
 80021be:	332c      	adds	r3, #44	@ 0x2c
 80021c0:	9307      	str	r3, [sp, #28]
 80021c2:	f107 0308 	add.w	r3, r7, #8
 80021c6:	3328      	adds	r3, #40	@ 0x28
 80021c8:	9306      	str	r3, [sp, #24]
 80021ca:	f107 0308 	add.w	r3, r7, #8
 80021ce:	3324      	adds	r3, #36	@ 0x24
 80021d0:	9305      	str	r3, [sp, #20]
 80021d2:	f107 0308 	add.w	r3, r7, #8
 80021d6:	3322      	adds	r3, #34	@ 0x22
 80021d8:	9304      	str	r3, [sp, #16]
 80021da:	f107 0308 	add.w	r3, r7, #8
 80021de:	3321      	adds	r3, #33	@ 0x21
 80021e0:	9303      	str	r3, [sp, #12]
 80021e2:	f107 0308 	add.w	r3, r7, #8
 80021e6:	3320      	adds	r3, #32
 80021e8:	9302      	str	r3, [sp, #8]
 80021ea:	f107 0308 	add.w	r3, r7, #8
 80021ee:	3318      	adds	r3, #24
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	f107 0308 	add.w	r3, r7, #8
 80021f6:	3310      	adds	r3, #16
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	460b      	mov	r3, r1
 80021fc:	491a      	ldr	r1, [pc, #104]	@ (8002268 <gga_handle+0x100>)
 80021fe:	f000 faf3 	bl	80027e8 <nmea_parser>
				&package.uSep,
				&package.diffAge,
				&package.diffStation,
				&package.cs);

	package.latitude = nmea_to_dec(package.latitude, package.ns);
 8002202:	ed97 7b04 	vldr	d7, [r7, #16]
 8002206:	7e3b      	ldrb	r3, [r7, #24]
 8002208:	4618      	mov	r0, r3
 800220a:	eeb0 0a47 	vmov.f32	s0, s14
 800220e:	eef0 0a67 	vmov.f32	s1, s15
 8002212:	f000 fa8f 	bl	8002734 <nmea_to_dec>
 8002216:	eeb0 7a40 	vmov.f32	s14, s0
 800221a:	eef0 7a60 	vmov.f32	s15, s1
 800221e:	ed87 7b04 	vstr	d7, [r7, #16]
	package.longitude = nmea_to_dec(package.longitude, package.ew);
 8002222:	ed97 7b08 	vldr	d7, [r7, #32]
 8002226:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800222a:	4618      	mov	r0, r3
 800222c:	eeb0 0a47 	vmov.f32	s0, s14
 8002230:	eef0 0a67 	vmov.f32	s1, s15
 8002234:	f000 fa7e 	bl	8002734 <nmea_to_dec>
 8002238:	eeb0 7a40 	vmov.f32	s14, s0
 800223c:	eef0 7a60 	vmov.f32	s15, s1
 8002240:	ed87 7b08 	vstr	d7, [r7, #32]

	handle->expectedMessages[message_num].callback(&package);
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	4613      	mov	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	3308      	adds	r3, #8
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f107 0208 	add.w	r2, r7, #8
 800225a:	4610      	mov	r0, r2
 800225c:	4798      	blx	r3
}
 800225e:	bf00      	nop
 8002260:	3748      	adds	r7, #72	@ 0x48
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	0800e3d8 	.word	0x0800e3d8

0800226c <gll_handle>:
  * @brief   This function parse particular message and calls appropriate callback
  * @param   *handler: Pointer to the handler structure.
  * @retval  None
  */
static void gll_handle(NEO6M_Handle_t *handle, uint32_t message_num)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b092      	sub	sp, #72	@ 0x48
 8002270:	af06      	add	r7, sp, #24
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
	GLL_Package_t package={0};
 8002276:	f107 0308 	add.w	r3, r7, #8
 800227a:	2228      	movs	r2, #40	@ 0x28
 800227c:	2100      	movs	r1, #0
 800227e:	4618      	mov	r0, r3
 8002280:	f009 fa2d 	bl	800b6de <memset>

	nmea_parser(handle->rxBuff, "dcdc3cc",
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f103 0093 	add.w	r0, r3, #147	@ 0x93
 800228a:	f107 0308 	add.w	r3, r7, #8
 800228e:	f103 0108 	add.w	r1, r3, #8
 8002292:	f107 0208 	add.w	r2, r7, #8
 8002296:	f107 0308 	add.w	r3, r7, #8
 800229a:	3322      	adds	r3, #34	@ 0x22
 800229c:	9305      	str	r3, [sp, #20]
 800229e:	f107 0308 	add.w	r3, r7, #8
 80022a2:	3321      	adds	r3, #33	@ 0x21
 80022a4:	9304      	str	r3, [sp, #16]
 80022a6:	f107 0308 	add.w	r3, r7, #8
 80022aa:	3320      	adds	r3, #32
 80022ac:	9303      	str	r3, [sp, #12]
 80022ae:	f107 0308 	add.w	r3, r7, #8
 80022b2:	331c      	adds	r3, #28
 80022b4:	9302      	str	r3, [sp, #8]
 80022b6:	f107 0308 	add.w	r3, r7, #8
 80022ba:	3318      	adds	r3, #24
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	f107 0308 	add.w	r3, r7, #8
 80022c2:	3310      	adds	r3, #16
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	460b      	mov	r3, r1
 80022c8:	491a      	ldr	r1, [pc, #104]	@ (8002334 <gll_handle+0xc8>)
 80022ca:	f000 fa8d 	bl	80027e8 <nmea_parser>
			&package.time,
			&package.valid,
			&package.mode,
			&package.cs);

	package.latitude = nmea_to_dec(package.latitude, package.ns);
 80022ce:	ed97 7b02 	vldr	d7, [r7, #8]
 80022d2:	7c3b      	ldrb	r3, [r7, #16]
 80022d4:	4618      	mov	r0, r3
 80022d6:	eeb0 0a47 	vmov.f32	s0, s14
 80022da:	eef0 0a67 	vmov.f32	s1, s15
 80022de:	f000 fa29 	bl	8002734 <nmea_to_dec>
 80022e2:	eeb0 7a40 	vmov.f32	s14, s0
 80022e6:	eef0 7a60 	vmov.f32	s15, s1
 80022ea:	ed87 7b02 	vstr	d7, [r7, #8]
	package.longitude = nmea_to_dec(package.longitude, package.ew);
 80022ee:	ed97 7b06 	vldr	d7, [r7, #24]
 80022f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80022f6:	4618      	mov	r0, r3
 80022f8:	eeb0 0a47 	vmov.f32	s0, s14
 80022fc:	eef0 0a67 	vmov.f32	s1, s15
 8002300:	f000 fa18 	bl	8002734 <nmea_to_dec>
 8002304:	eeb0 7a40 	vmov.f32	s14, s0
 8002308:	eef0 7a60 	vmov.f32	s15, s1
 800230c:	ed87 7b06 	vstr	d7, [r7, #24]

	handle->expectedMessages[message_num].callback(&package);
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	4613      	mov	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	3308      	adds	r3, #8
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f107 0208 	add.w	r2, r7, #8
 8002326:	4610      	mov	r0, r2
 8002328:	4798      	blx	r3
}
 800232a:	bf00      	nop
 800232c:	3730      	adds	r7, #48	@ 0x30
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	0800e3e8 	.word	0x0800e3e8

08002338 <gsa_handle>:
  * @brief   This function parse particular message and calls appropriate callback
  * @param   *handler: Pointer to the handler structure.
  * @retval  None
  */
static void gsa_handle(NEO6M_Handle_t *handle, uint32_t message_num)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b09a      	sub	sp, #104	@ 0x68
 800233c:	af10      	add	r7, sp, #64	@ 0x40
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
	GSA_Package_t package={0};
 8002342:	f107 0308 	add.w	r3, r7, #8
 8002346:	2220      	movs	r2, #32
 8002348:	2100      	movs	r1, #0
 800234a:	4618      	mov	r0, r3
 800234c:	f009 f9c7 	bl	800b6de <memset>

	nmea_parser(handle->rxBuff, "c8888888888888fff",
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f103 0093 	add.w	r0, r3, #147	@ 0x93
 8002356:	f107 0308 	add.w	r3, r7, #8
 800235a:	1c59      	adds	r1, r3, #1
 800235c:	f107 0208 	add.w	r2, r7, #8
 8002360:	f107 0308 	add.w	r3, r7, #8
 8002364:	331c      	adds	r3, #28
 8002366:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002368:	f107 0308 	add.w	r3, r7, #8
 800236c:	3318      	adds	r3, #24
 800236e:	930e      	str	r3, [sp, #56]	@ 0x38
 8002370:	f107 0308 	add.w	r3, r7, #8
 8002374:	3314      	adds	r3, #20
 8002376:	930d      	str	r3, [sp, #52]	@ 0x34
 8002378:	f107 0308 	add.w	r3, r7, #8
 800237c:	3310      	adds	r3, #16
 800237e:	930c      	str	r3, [sp, #48]	@ 0x30
 8002380:	f107 0308 	add.w	r3, r7, #8
 8002384:	330d      	adds	r3, #13
 8002386:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002388:	f107 0308 	add.w	r3, r7, #8
 800238c:	330c      	adds	r3, #12
 800238e:	930a      	str	r3, [sp, #40]	@ 0x28
 8002390:	f107 0308 	add.w	r3, r7, #8
 8002394:	330b      	adds	r3, #11
 8002396:	9309      	str	r3, [sp, #36]	@ 0x24
 8002398:	f107 0308 	add.w	r3, r7, #8
 800239c:	330a      	adds	r3, #10
 800239e:	9308      	str	r3, [sp, #32]
 80023a0:	f107 0308 	add.w	r3, r7, #8
 80023a4:	3309      	adds	r3, #9
 80023a6:	9307      	str	r3, [sp, #28]
 80023a8:	f107 0308 	add.w	r3, r7, #8
 80023ac:	3308      	adds	r3, #8
 80023ae:	9306      	str	r3, [sp, #24]
 80023b0:	f107 0308 	add.w	r3, r7, #8
 80023b4:	3307      	adds	r3, #7
 80023b6:	9305      	str	r3, [sp, #20]
 80023b8:	f107 0308 	add.w	r3, r7, #8
 80023bc:	3306      	adds	r3, #6
 80023be:	9304      	str	r3, [sp, #16]
 80023c0:	f107 0308 	add.w	r3, r7, #8
 80023c4:	3305      	adds	r3, #5
 80023c6:	9303      	str	r3, [sp, #12]
 80023c8:	f107 0308 	add.w	r3, r7, #8
 80023cc:	3304      	adds	r3, #4
 80023ce:	9302      	str	r3, [sp, #8]
 80023d0:	f107 0308 	add.w	r3, r7, #8
 80023d4:	3303      	adds	r3, #3
 80023d6:	9301      	str	r3, [sp, #4]
 80023d8:	f107 0308 	add.w	r3, r7, #8
 80023dc:	3302      	adds	r3, #2
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	460b      	mov	r3, r1
 80023e2:	490a      	ldr	r1, [pc, #40]	@ (800240c <gsa_handle+0xd4>)
 80023e4:	f000 fa00 	bl	80027e8 <nmea_parser>
				&package.pdop,
				&package.hdop,
				&package.vdop,
				&package.cs);

	handle->expectedMessages[message_num].callback(&package);
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	4613      	mov	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	3308      	adds	r3, #8
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f107 0208 	add.w	r2, r7, #8
 80023fe:	4610      	mov	r0, r2
 8002400:	4798      	blx	r3
}
 8002402:	bf00      	nop
 8002404:	3728      	adds	r7, #40	@ 0x28
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	0800e3f0 	.word	0x0800e3f0

08002410 <gsv_handle>:
  * @brief   This function store GSV packets, until all packets will be received, then parses this packets
  * @param   *handler: Pointer to the handler structure.
  * @retval  None
  */
static void gsv_handle(NEO6M_Handle_t *handle, uint32_t message_num)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b0a0      	sub	sp, #128	@ 0x80
 8002414:	af12      	add	r7, sp, #72	@ 0x48
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
	static char gsv_buff[300]={0};
	static size_t gsv_count=0, gsv_buff_len=0;
	GSV_Package_t package={0};
 800241a:	f107 0310 	add.w	r3, r7, #16
 800241e:	221e      	movs	r2, #30
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f009 f95b 	bl	800b6de <memset>
	char *ptr, *saveptr;

	//Waits for all packets that must be receive
	if(gsv_count < gsv_get_noMsg(handle->rxBuff))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3393      	adds	r3, #147	@ 0x93
 800242c:	4618      	mov	r0, r3
 800242e:	f000 faae 	bl	800298e <gsv_get_noMsg>
 8002432:	4603      	mov	r3, r0
 8002434:	461a      	mov	r2, r3
 8002436:	4b57      	ldr	r3, [pc, #348]	@ (8002594 <gsv_handle+0x184>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d91a      	bls.n	8002474 <gsv_handle+0x64>
	{
		strcpy(&gsv_buff[gsv_buff_len], handle->rxBuff);
 800243e:	4b56      	ldr	r3, [pc, #344]	@ (8002598 <gsv_handle+0x188>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a56      	ldr	r2, [pc, #344]	@ (800259c <gsv_handle+0x18c>)
 8002444:	441a      	add	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3393      	adds	r3, #147	@ 0x93
 800244a:	4619      	mov	r1, r3
 800244c:	4610      	mov	r0, r2
 800244e:	f009 fa7c 	bl	800b94a <strcpy>
		gsv_count++;
 8002452:	4b50      	ldr	r3, [pc, #320]	@ (8002594 <gsv_handle+0x184>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	3301      	adds	r3, #1
 8002458:	4a4e      	ldr	r2, [pc, #312]	@ (8002594 <gsv_handle+0x184>)
 800245a:	6013      	str	r3, [r2, #0]
		gsv_buff_len += strlen(handle->rxBuff);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3393      	adds	r3, #147	@ 0x93
 8002460:	4618      	mov	r0, r3
 8002462:	f7fd ff0d 	bl	8000280 <strlen>
 8002466:	4602      	mov	r2, r0
 8002468:	4b4b      	ldr	r3, [pc, #300]	@ (8002598 <gsv_handle+0x188>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4413      	add	r3, r2
 800246e:	4a4a      	ldr	r2, [pc, #296]	@ (8002598 <gsv_handle+0x188>)
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e08c      	b.n	800258e <gsv_handle+0x17e>
		return;
	}

	//If all packets was received, starts parse this packet one by one, and calls appropriate callback
	ptr = strtok_r(gsv_buff, "\n", &saveptr);
 8002474:	f107 030c 	add.w	r3, r7, #12
 8002478:	461a      	mov	r2, r3
 800247a:	4949      	ldr	r1, [pc, #292]	@ (80025a0 <gsv_handle+0x190>)
 800247c:	4847      	ldr	r0, [pc, #284]	@ (800259c <gsv_handle+0x18c>)
 800247e:	f009 f9d3 	bl	800b828 <strtok_r>
 8002482:	6378      	str	r0, [r7, #52]	@ 0x34
	for(uint32_t i=0; i < gsv_count; i++)
 8002484:	2300      	movs	r3, #0
 8002486:	633b      	str	r3, [r7, #48]	@ 0x30
 8002488:	e070      	b.n	800256c <gsv_handle+0x15c>
	{
		nmea_parser(ptr, "8888818881888188818",
 800248a:	f107 0310 	add.w	r3, r7, #16
 800248e:	1c59      	adds	r1, r3, #1
 8002490:	f107 0210 	add.w	r2, r7, #16
 8002494:	f107 0310 	add.w	r3, r7, #16
 8002498:	331c      	adds	r3, #28
 800249a:	9311      	str	r3, [sp, #68]	@ 0x44
 800249c:	f107 0310 	add.w	r3, r7, #16
 80024a0:	331a      	adds	r3, #26
 80024a2:	9310      	str	r3, [sp, #64]	@ 0x40
 80024a4:	f107 0310 	add.w	r3, r7, #16
 80024a8:	3318      	adds	r3, #24
 80024aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80024ac:	f107 0310 	add.w	r3, r7, #16
 80024b0:	3317      	adds	r3, #23
 80024b2:	930e      	str	r3, [sp, #56]	@ 0x38
 80024b4:	f107 0310 	add.w	r3, r7, #16
 80024b8:	3316      	adds	r3, #22
 80024ba:	930d      	str	r3, [sp, #52]	@ 0x34
 80024bc:	f107 0310 	add.w	r3, r7, #16
 80024c0:	3314      	adds	r3, #20
 80024c2:	930c      	str	r3, [sp, #48]	@ 0x30
 80024c4:	f107 0310 	add.w	r3, r7, #16
 80024c8:	3312      	adds	r3, #18
 80024ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80024cc:	f107 0310 	add.w	r3, r7, #16
 80024d0:	3311      	adds	r3, #17
 80024d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80024d4:	f107 0310 	add.w	r3, r7, #16
 80024d8:	3310      	adds	r3, #16
 80024da:	9309      	str	r3, [sp, #36]	@ 0x24
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	330e      	adds	r3, #14
 80024e2:	9308      	str	r3, [sp, #32]
 80024e4:	f107 0310 	add.w	r3, r7, #16
 80024e8:	330c      	adds	r3, #12
 80024ea:	9307      	str	r3, [sp, #28]
 80024ec:	f107 0310 	add.w	r3, r7, #16
 80024f0:	330b      	adds	r3, #11
 80024f2:	9306      	str	r3, [sp, #24]
 80024f4:	f107 0310 	add.w	r3, r7, #16
 80024f8:	330a      	adds	r3, #10
 80024fa:	9305      	str	r3, [sp, #20]
 80024fc:	f107 0310 	add.w	r3, r7, #16
 8002500:	3308      	adds	r3, #8
 8002502:	9304      	str	r3, [sp, #16]
 8002504:	f107 0310 	add.w	r3, r7, #16
 8002508:	3306      	adds	r3, #6
 800250a:	9303      	str	r3, [sp, #12]
 800250c:	f107 0310 	add.w	r3, r7, #16
 8002510:	3305      	adds	r3, #5
 8002512:	9302      	str	r3, [sp, #8]
 8002514:	f107 0310 	add.w	r3, r7, #16
 8002518:	3304      	adds	r3, #4
 800251a:	9301      	str	r3, [sp, #4]
 800251c:	f107 0310 	add.w	r3, r7, #16
 8002520:	3302      	adds	r3, #2
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	460b      	mov	r3, r1
 8002526:	491f      	ldr	r1, [pc, #124]	@ (80025a4 <gsv_handle+0x194>)
 8002528:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800252a:	f000 f95d 	bl	80027e8 <nmea_parser>
					&package.repeated_block[3].elv,
					&package.repeated_block[3].az,
					&package.repeated_block[3].cno,
					&package.cs);

		handle->expectedMessages[message_num].callback(&package);
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	4613      	mov	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	3308      	adds	r3, #8
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f107 0210 	add.w	r2, r7, #16
 8002544:	4610      	mov	r0, r2
 8002546:	4798      	blx	r3

		memset(&package, 0, sizeof(package));
 8002548:	f107 0310 	add.w	r3, r7, #16
 800254c:	221e      	movs	r2, #30
 800254e:	2100      	movs	r1, #0
 8002550:	4618      	mov	r0, r3
 8002552:	f009 f8c4 	bl	800b6de <memset>
		ptr = strtok_r(NULL, "\n", &saveptr);
 8002556:	f107 030c 	add.w	r3, r7, #12
 800255a:	461a      	mov	r2, r3
 800255c:	4910      	ldr	r1, [pc, #64]	@ (80025a0 <gsv_handle+0x190>)
 800255e:	2000      	movs	r0, #0
 8002560:	f009 f962 	bl	800b828 <strtok_r>
 8002564:	6378      	str	r0, [r7, #52]	@ 0x34
	for(uint32_t i=0; i < gsv_count; i++)
 8002566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002568:	3301      	adds	r3, #1
 800256a:	633b      	str	r3, [r7, #48]	@ 0x30
 800256c:	4b09      	ldr	r3, [pc, #36]	@ (8002594 <gsv_handle+0x184>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002572:	429a      	cmp	r2, r3
 8002574:	d389      	bcc.n	800248a <gsv_handle+0x7a>
	}

	gsv_count = 0;
 8002576:	4b07      	ldr	r3, [pc, #28]	@ (8002594 <gsv_handle+0x184>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
	gsv_buff_len = 0;
 800257c:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <gsv_handle+0x188>)
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
	memset(gsv_buff, 0, 300);
 8002582:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002586:	2100      	movs	r1, #0
 8002588:	4804      	ldr	r0, [pc, #16]	@ (800259c <gsv_handle+0x18c>)
 800258a:	f009 f8a8 	bl	800b6de <memset>
}
 800258e:	3738      	adds	r7, #56	@ 0x38
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200009d4 	.word	0x200009d4
 8002598:	200009d8 	.word	0x200009d8
 800259c:	200009dc 	.word	0x200009dc
 80025a0:	0800e404 	.word	0x0800e404
 80025a4:	0800e408 	.word	0x0800e408

080025a8 <rmc_handle>:
  * @brief   This function parse particular message and calls appropriate callback
  * @param   *handler: Pointer to the handler structure.
  * @retval  None
  */
static void rmc_handle(NEO6M_Handle_t *handle, uint32_t message_num)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b09c      	sub	sp, #112	@ 0x70
 80025ac:	af0c      	add	r7, sp, #48	@ 0x30
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
	RMC_Package_t package={0};
 80025b2:	f107 0308 	add.w	r3, r7, #8
 80025b6:	2238      	movs	r2, #56	@ 0x38
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f009 f88f 	bl	800b6de <memset>

	nmea_parser(handle->rxBuff, "3cdcdcff3fcc",
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f103 0093 	add.w	r0, r3, #147	@ 0x93
 80025c6:	f107 0308 	add.w	r3, r7, #8
 80025ca:	1d19      	adds	r1, r3, #4
 80025cc:	f107 0208 	add.w	r2, r7, #8
 80025d0:	f107 0308 	add.w	r3, r7, #8
 80025d4:	3336      	adds	r3, #54	@ 0x36
 80025d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80025d8:	f107 0308 	add.w	r3, r7, #8
 80025dc:	3335      	adds	r3, #53	@ 0x35
 80025de:	9309      	str	r3, [sp, #36]	@ 0x24
 80025e0:	f107 0308 	add.w	r3, r7, #8
 80025e4:	3334      	adds	r3, #52	@ 0x34
 80025e6:	9308      	str	r3, [sp, #32]
 80025e8:	f107 0308 	add.w	r3, r7, #8
 80025ec:	3330      	adds	r3, #48	@ 0x30
 80025ee:	9307      	str	r3, [sp, #28]
 80025f0:	f107 0308 	add.w	r3, r7, #8
 80025f4:	332c      	adds	r3, #44	@ 0x2c
 80025f6:	9306      	str	r3, [sp, #24]
 80025f8:	f107 0308 	add.w	r3, r7, #8
 80025fc:	3328      	adds	r3, #40	@ 0x28
 80025fe:	9305      	str	r3, [sp, #20]
 8002600:	f107 0308 	add.w	r3, r7, #8
 8002604:	3324      	adds	r3, #36	@ 0x24
 8002606:	9304      	str	r3, [sp, #16]
 8002608:	f107 0308 	add.w	r3, r7, #8
 800260c:	3320      	adds	r3, #32
 800260e:	9303      	str	r3, [sp, #12]
 8002610:	f107 0308 	add.w	r3, r7, #8
 8002614:	3318      	adds	r3, #24
 8002616:	9302      	str	r3, [sp, #8]
 8002618:	f107 0308 	add.w	r3, r7, #8
 800261c:	3310      	adds	r3, #16
 800261e:	9301      	str	r3, [sp, #4]
 8002620:	f107 0308 	add.w	r3, r7, #8
 8002624:	3308      	adds	r3, #8
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	460b      	mov	r3, r1
 800262a:	491a      	ldr	r1, [pc, #104]	@ (8002694 <rmc_handle+0xec>)
 800262c:	f000 f8dc 	bl	80027e8 <nmea_parser>
				&package.mv,
				&package.mvE,
				&package.mode,
				&package.cs);

	package.latitude = nmea_to_dec(package.latitude, package.ns);
 8002630:	ed97 7b04 	vldr	d7, [r7, #16]
 8002634:	7e3b      	ldrb	r3, [r7, #24]
 8002636:	4618      	mov	r0, r3
 8002638:	eeb0 0a47 	vmov.f32	s0, s14
 800263c:	eef0 0a67 	vmov.f32	s1, s15
 8002640:	f000 f878 	bl	8002734 <nmea_to_dec>
 8002644:	eeb0 7a40 	vmov.f32	s14, s0
 8002648:	eef0 7a60 	vmov.f32	s15, s1
 800264c:	ed87 7b04 	vstr	d7, [r7, #16]
	package.longitude = nmea_to_dec(package.longitude, package.ew);
 8002650:	ed97 7b08 	vldr	d7, [r7, #32]
 8002654:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002658:	4618      	mov	r0, r3
 800265a:	eeb0 0a47 	vmov.f32	s0, s14
 800265e:	eef0 0a67 	vmov.f32	s1, s15
 8002662:	f000 f867 	bl	8002734 <nmea_to_dec>
 8002666:	eeb0 7a40 	vmov.f32	s14, s0
 800266a:	eef0 7a60 	vmov.f32	s15, s1
 800266e:	ed87 7b08 	vstr	d7, [r7, #32]

	handle->expectedMessages[message_num].callback(&package);
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	4613      	mov	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	3308      	adds	r3, #8
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f107 0208 	add.w	r2, r7, #8
 8002688:	4610      	mov	r0, r2
 800268a:	4798      	blx	r3
}
 800268c:	bf00      	nop
 800268e:	3740      	adds	r7, #64	@ 0x40
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	0800e41c 	.word	0x0800e41c

08002698 <vtg_handle>:
  * @brief   This function parse particular message and calls appropriate callback
  * @param   *handler: Pointer to the handler structure.
  * @retval  None
  */
static void vtg_handle(NEO6M_Handle_t *handle, uint32_t message_num)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b090      	sub	sp, #64	@ 0x40
 800269c:	af08      	add	r7, sp, #32
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
	VTG_Package_t package={0};
 80026a2:	f107 0308 	add.w	r3, r7, #8
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	605a      	str	r2, [r3, #4]
 80026ac:	609a      	str	r2, [r3, #8]
 80026ae:	60da      	str	r2, [r3, #12]
 80026b0:	611a      	str	r2, [r3, #16]
 80026b2:	615a      	str	r2, [r3, #20]

	nmea_parser(handle->rxBuff, "fc8cfcfcc",
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f103 0093 	add.w	r0, r3, #147	@ 0x93
 80026ba:	f107 0308 	add.w	r3, r7, #8
 80026be:	1d19      	adds	r1, r3, #4
 80026c0:	f107 0208 	add.w	r2, r7, #8
 80026c4:	f107 0308 	add.w	r3, r7, #8
 80026c8:	3316      	adds	r3, #22
 80026ca:	9307      	str	r3, [sp, #28]
 80026cc:	f107 0308 	add.w	r3, r7, #8
 80026d0:	3315      	adds	r3, #21
 80026d2:	9306      	str	r3, [sp, #24]
 80026d4:	f107 0308 	add.w	r3, r7, #8
 80026d8:	3314      	adds	r3, #20
 80026da:	9305      	str	r3, [sp, #20]
 80026dc:	f107 0308 	add.w	r3, r7, #8
 80026e0:	3310      	adds	r3, #16
 80026e2:	9304      	str	r3, [sp, #16]
 80026e4:	f107 0308 	add.w	r3, r7, #8
 80026e8:	330c      	adds	r3, #12
 80026ea:	9303      	str	r3, [sp, #12]
 80026ec:	f107 0308 	add.w	r3, r7, #8
 80026f0:	3308      	adds	r3, #8
 80026f2:	9302      	str	r3, [sp, #8]
 80026f4:	f107 0308 	add.w	r3, r7, #8
 80026f8:	3306      	adds	r3, #6
 80026fa:	9301      	str	r3, [sp, #4]
 80026fc:	f107 0308 	add.w	r3, r7, #8
 8002700:	3305      	adds	r3, #5
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	460b      	mov	r3, r1
 8002706:	490a      	ldr	r1, [pc, #40]	@ (8002730 <vtg_handle+0x98>)
 8002708:	f000 f86e 	bl	80027e8 <nmea_parser>
			&package.kph,
			&package.kilometers,
			&package.mode,
			&package.cs);

	handle->expectedMessages[message_num].callback(&package);
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	4613      	mov	r3, r2
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4413      	add	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	3308      	adds	r3, #8
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f107 0208 	add.w	r2, r7, #8
 8002722:	4610      	mov	r0, r2
 8002724:	4798      	blx	r3
}
 8002726:	bf00      	nop
 8002728:	3720      	adds	r7, #32
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	0800e42c 	.word	0x0800e42c

08002734 <nmea_to_dec>:
  * @param   deg_coord: Coordinate that must be comverted
  * @param   nsew: N/S or E/W indicator
  * @retval  decimal format of coordinate
  */
static double nmea_to_dec(double deg_coord, char nsew)
{
 8002734:	b5b0      	push	{r4, r5, r7, lr}
 8002736:	b08c      	sub	sp, #48	@ 0x30
 8002738:	af00      	add	r7, sp, #0
 800273a:	ed87 0b02 	vstr	d0, [r7, #8]
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
    int degree = (int)(deg_coord/100);
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	4b26      	ldr	r3, [pc, #152]	@ (80027e0 <nmea_to_dec+0xac>)
 8002748:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800274c:	f7fe f886 	bl	800085c <__aeabi_ddiv>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	f7fe fa06 	bl	8000b68 <__aeabi_d2iz>
 800275c:	4603      	mov	r3, r0
 800275e:	627b      	str	r3, [r7, #36]	@ 0x24
    double minutes = deg_coord - degree*100;
 8002760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002762:	2264      	movs	r2, #100	@ 0x64
 8002764:	fb02 f303 	mul.w	r3, r2, r3
 8002768:	4618      	mov	r0, r3
 800276a:	f7fd fee3 	bl	8000534 <__aeabi_i2d>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002776:	f7fd fd8f 	bl	8000298 <__aeabi_dsub>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double dec_deg = minutes / 60;
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	4b17      	ldr	r3, [pc, #92]	@ (80027e4 <nmea_to_dec+0xb0>)
 8002788:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800278c:	f7fe f866 	bl	800085c <__aeabi_ddiv>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double decimal = degree + dec_deg;
 8002798:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800279a:	f7fd fecb 	bl	8000534 <__aeabi_i2d>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027a6:	f7fd fd79 	bl	800029c <__adddf3>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    if (nsew == 'S' || nsew == 'W')
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	2b53      	cmp	r3, #83	@ 0x53
 80027b6:	d002      	beq.n	80027be <nmea_to_dec+0x8a>
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	2b57      	cmp	r3, #87	@ 0x57
 80027bc:	d105      	bne.n	80027ca <nmea_to_dec+0x96>
    {
        decimal *= -1;
 80027be:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 80027c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80027c6:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
    }
    return decimal;
 80027ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027ce:	ec43 2b17 	vmov	d7, r2, r3
}
 80027d2:	eeb0 0a47 	vmov.f32	s0, s14
 80027d6:	eef0 0a67 	vmov.f32	s1, s15
 80027da:	3730      	adds	r7, #48	@ 0x30
 80027dc:	46bd      	mov	sp, r7
 80027de:	bdb0      	pop	{r4, r5, r7, pc}
 80027e0:	40590000 	.word	0x40590000
 80027e4:	404e0000 	.word	0x404e0000

080027e8 <nmea_parser>:
  * c - char, 8 - uint8_t, d - double, 1 - uint16_t, 3 - uint32_t)
  * @param   args: pointers to appropriate structure arguments
  * @retval  None
  */
static void nmea_parser(char *package, char *formats, ...)
{
 80027e8:	b40e      	push	{r1, r2, r3}
 80027ea:	b590      	push	{r4, r7, lr}
 80027ec:	b086      	sub	sp, #24
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
	va_list args;
	char *ptr = package;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	617b      	str	r3, [r7, #20]

	va_start(args, formats);
 80027f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027fa:	60fb      	str	r3, [r7, #12]

	for(uint32_t i=0; i < strlen(formats); i++)
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	e0a2      	b.n	8002948 <nmea_parser+0x160>
	{
		switch(formats[i])
 8002802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b66      	cmp	r3, #102	@ 0x66
 800280c:	d016      	beq.n	800283c <nmea_parser+0x54>
 800280e:	2b66      	cmp	r3, #102	@ 0x66
 8002810:	f300 8091 	bgt.w	8002936 <nmea_parser+0x14e>
 8002814:	2b64      	cmp	r3, #100	@ 0x64
 8002816:	d04d      	beq.n	80028b4 <nmea_parser+0xcc>
 8002818:	2b64      	cmp	r3, #100	@ 0x64
 800281a:	f300 808c 	bgt.w	8002936 <nmea_parser+0x14e>
 800281e:	2b63      	cmp	r3, #99	@ 0x63
 8002820:	d023      	beq.n	800286a <nmea_parser+0x82>
 8002822:	2b63      	cmp	r3, #99	@ 0x63
 8002824:	f300 8087 	bgt.w	8002936 <nmea_parser+0x14e>
 8002828:	2b38      	cmp	r3, #56	@ 0x38
 800282a:	d02e      	beq.n	800288a <nmea_parser+0xa2>
 800282c:	2b38      	cmp	r3, #56	@ 0x38
 800282e:	f300 8082 	bgt.w	8002936 <nmea_parser+0x14e>
 8002832:	2b31      	cmp	r3, #49	@ 0x31
 8002834:	d055      	beq.n	80028e2 <nmea_parser+0xfa>
 8002836:	2b33      	cmp	r3, #51	@ 0x33
 8002838:	d068      	beq.n	800290c <nmea_parser+0x124>
 800283a:	e07c      	b.n	8002936 <nmea_parser+0x14e>
		{
			case 'f':
			{
				ptr = strchr(ptr, ',');
 800283c:	212c      	movs	r1, #44	@ 0x2c
 800283e:	6978      	ldr	r0, [r7, #20]
 8002840:	f008 ff64 	bl	800b70c <strchr>
 8002844:	6178      	str	r0, [r7, #20]
				*va_arg(args, float *) = strtod(++ptr, NULL);
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	3301      	adds	r3, #1
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	2100      	movs	r1, #0
 800284e:	6978      	ldr	r0, [r7, #20]
 8002850:	f007 fee0 	bl	800a614 <strtod>
 8002854:	ec51 0b10 	vmov	r0, r1, d0
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	1d1a      	adds	r2, r3, #4
 800285c:	60fa      	str	r2, [r7, #12]
 800285e:	681c      	ldr	r4, [r3, #0]
 8002860:	f7fe f9ca 	bl	8000bf8 <__aeabi_d2f>
 8002864:	4603      	mov	r3, r0
 8002866:	6023      	str	r3, [r4, #0]
				break;
 8002868:	e06b      	b.n	8002942 <nmea_parser+0x15a>
			}
			case 'c':
			{
				ptr = strchr(ptr, ',');
 800286a:	212c      	movs	r1, #44	@ 0x2c
 800286c:	6978      	ldr	r0, [r7, #20]
 800286e:	f008 ff4d 	bl	800b70c <strchr>
 8002872:	6178      	str	r0, [r7, #20]
				*va_arg(args, char *) = *++ptr;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	3301      	adds	r3, #1
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1d1a      	adds	r2, r3, #4
 800287e:	60fa      	str	r2, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	7812      	ldrb	r2, [r2, #0]
 8002886:	701a      	strb	r2, [r3, #0]
				break;
 8002888:	e05b      	b.n	8002942 <nmea_parser+0x15a>
			}
			case '8':
			{
				ptr = strchr(ptr, ',');
 800288a:	212c      	movs	r1, #44	@ 0x2c
 800288c:	6978      	ldr	r0, [r7, #20]
 800288e:	f008 ff3d 	bl	800b70c <strchr>
 8002892:	6178      	str	r0, [r7, #20]
				*va_arg(args, uint8_t *) = strtol(++ptr, NULL, 10);
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	3301      	adds	r3, #1
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	220a      	movs	r2, #10
 800289c:	2100      	movs	r1, #0
 800289e:	6978      	ldr	r0, [r7, #20]
 80028a0:	f007 ff40 	bl	800a724 <strtol>
 80028a4:	4601      	mov	r1, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1d1a      	adds	r2, r3, #4
 80028aa:	60fa      	str	r2, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	b2ca      	uxtb	r2, r1
 80028b0:	701a      	strb	r2, [r3, #0]
				break;
 80028b2:	e046      	b.n	8002942 <nmea_parser+0x15a>
			}
			case 'd':
			{
				ptr = strchr(ptr, ',');
 80028b4:	212c      	movs	r1, #44	@ 0x2c
 80028b6:	6978      	ldr	r0, [r7, #20]
 80028b8:	f008 ff28 	bl	800b70c <strchr>
 80028bc:	6178      	str	r0, [r7, #20]
				*va_arg(args, double *) = strtod(++ptr, NULL);
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	3301      	adds	r3, #1
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1d1a      	adds	r2, r3, #4
 80028c8:	60fa      	str	r2, [r7, #12]
 80028ca:	681c      	ldr	r4, [r3, #0]
 80028cc:	2100      	movs	r1, #0
 80028ce:	6978      	ldr	r0, [r7, #20]
 80028d0:	f007 fea0 	bl	800a614 <strtod>
 80028d4:	eeb0 7a40 	vmov.f32	s14, s0
 80028d8:	eef0 7a60 	vmov.f32	s15, s1
 80028dc:	ed84 7b00 	vstr	d7, [r4]
				break;
 80028e0:	e02f      	b.n	8002942 <nmea_parser+0x15a>
			}
			case '1':
			{
				ptr = strchr(ptr, ',');
 80028e2:	212c      	movs	r1, #44	@ 0x2c
 80028e4:	6978      	ldr	r0, [r7, #20]
 80028e6:	f008 ff11 	bl	800b70c <strchr>
 80028ea:	6178      	str	r0, [r7, #20]
				*va_arg(args, uint16_t *) = strtol(++ptr, NULL, 10);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	3301      	adds	r3, #1
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	220a      	movs	r2, #10
 80028f4:	2100      	movs	r1, #0
 80028f6:	6978      	ldr	r0, [r7, #20]
 80028f8:	f007 ff14 	bl	800a724 <strtol>
 80028fc:	4601      	mov	r1, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1d1a      	adds	r2, r3, #4
 8002902:	60fa      	str	r2, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	b28a      	uxth	r2, r1
 8002908:	801a      	strh	r2, [r3, #0]
				break;
 800290a:	e01a      	b.n	8002942 <nmea_parser+0x15a>
			}
			case '3':
			{
				ptr = strchr(ptr, ',');
 800290c:	212c      	movs	r1, #44	@ 0x2c
 800290e:	6978      	ldr	r0, [r7, #20]
 8002910:	f008 fefc 	bl	800b70c <strchr>
 8002914:	6178      	str	r0, [r7, #20]
				*va_arg(args, uint32_t *) = strtol(++ptr, NULL, 10);
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	3301      	adds	r3, #1
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	220a      	movs	r2, #10
 800291e:	2100      	movs	r1, #0
 8002920:	6978      	ldr	r0, [r7, #20]
 8002922:	f007 feff 	bl	800a724 <strtol>
 8002926:	4601      	mov	r1, r0
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	1d1a      	adds	r2, r3, #4
 800292c:	60fa      	str	r2, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	460a      	mov	r2, r1
 8002932:	601a      	str	r2, [r3, #0]
				break;
 8002934:	e005      	b.n	8002942 <nmea_parser+0x15a>
			}
			default:
			{
				*va_arg(args, uint8_t *) = 0;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1d1a      	adds	r2, r3, #4
 800293a:	60fa      	str	r2, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2200      	movs	r2, #0
 8002940:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i < strlen(formats); i++)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	3301      	adds	r3, #1
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800294a:	f7fd fc99 	bl	8000280 <strlen>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4293      	cmp	r3, r2
 8002954:	f4ff af55 	bcc.w	8002802 <nmea_parser+0x1a>
			}
		}
	}

	ptr = strchr(package, '*');
 8002958:	212a      	movs	r1, #42	@ 0x2a
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f008 fed6 	bl	800b70c <strchr>
 8002960:	6178      	str	r0, [r7, #20]
	*va_arg(args, uint16_t *) = strtol(++ptr, NULL, 16);
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	3301      	adds	r3, #1
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	2210      	movs	r2, #16
 800296a:	2100      	movs	r1, #0
 800296c:	6978      	ldr	r0, [r7, #20]
 800296e:	f007 fed9 	bl	800a724 <strtol>
 8002972:	4601      	mov	r1, r0
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1d1a      	adds	r2, r3, #4
 8002978:	60fa      	str	r2, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	b28a      	uxth	r2, r1
 800297e:	801a      	strh	r2, [r3, #0]

	va_end(args);
}
 8002980:	bf00      	nop
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800298a:	b003      	add	sp, #12
 800298c:	4770      	bx	lr

0800298e <gsv_get_noMsg>:
  * @brief   This function return number of GPGSV messages being output
  * @param   *package: Pointer to the string, were noMsg must be found
  * @retval  uint8_t Number of messages
  */
static uint8_t gsv_get_noMsg(char *buff)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
	return strtol(&buff[7], NULL, 10);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3307      	adds	r3, #7
 800299a:	220a      	movs	r2, #10
 800299c:	2100      	movs	r1, #0
 800299e:	4618      	mov	r0, r3
 80029a0:	f007 fec0 	bl	800a724 <strtol>
 80029a4:	4603      	mov	r3, r0
 80029a6:	b2db      	uxtb	r3, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <NEO6M_GGACallBack>:
{

}

__weak void NEO6M_GGACallBack(void *package)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]

}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <NEO6M_GSACallBack>:

__weak void NEO6M_GSACallBack(void *package)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]

}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <NEO6M_GSVCallBack>:

__weak void NEO6M_GSVCallBack(void *package)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <NEO6M_VTGCallBack>:
{

}

__weak void NEO6M_VTGCallBack(void *package)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <SIM800_ManageReceiving>:
 * @param   enordi: ENABLE(1) to start receiving, DISABLE(0) to stop receiving.
 * @retval  SIM800_OK on success, SIM800_ERROR on failure, SIM800_TIMEOUT on timeout.
 * @return  Execution status. For details, refer to the SIM800_Status_t in the corresponding .h file.
 */
SIM800_Status_t SIM800_ManageReceiving(SIM800_Handle_t *handle, uint8_t enordi)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	70fb      	strb	r3, [r7, #3]
	if( enordi )
 8002a0c:	78fb      	ldrb	r3, [r7, #3]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d017      	beq.n	8002a42 <SIM800_ManageReceiving+0x42>
	{
		if( handle->recStatus == SIM800_DoesntReceive )
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 354c 	ldrb.w	r3, [r3, #1356]	@ 0x54c
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d112      	bne.n	8002a42 <SIM800_ManageReceiving+0x42>
		{
			if( HAL_UART_Receive_IT(SIM800_UART, (uint8_t *)&handle->rcvdByte, 1) != HAL_OK )
 8002a1c:	4b11      	ldr	r3, [pc, #68]	@ (8002a64 <SIM800_ManageReceiving+0x64>)
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3368      	adds	r3, #104	@ 0x68
 8002a24:	2201      	movs	r2, #1
 8002a26:	4619      	mov	r1, r3
 8002a28:	f003 fe2c 	bl	8006684 <HAL_UART_Receive_IT>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <SIM800_ManageReceiving+0x36>
			{
				return SIM800_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e011      	b.n	8002a5a <SIM800_ManageReceiving+0x5a>
			}

			handle->recStatus = SIM800_Receives;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 254c 	strb.w	r2, [r3, #1356]	@ 0x54c
			return SIM800_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	e00b      	b.n	8002a5a <SIM800_ManageReceiving+0x5a>
		}
	}

	if( handle->recStatus == SIM800_Receives )
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 354c 	ldrb.w	r3, [r3, #1356]	@ 0x54c
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d105      	bne.n	8002a58 <SIM800_ManageReceiving+0x58>
	{
		handle->recStatus = SIM800_DoesntReceive;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 254c 	strb.w	r2, [r3, #1356]	@ 0x54c
		return SIM800_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	e000      	b.n	8002a5a <SIM800_ManageReceiving+0x5a>
	}

	return SIM800_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000000 	.word	0x20000000

08002a68 <SIM800_GetNetworkRegStatus>:
 * @param   *handle: Pointer to the SIM800 handle structure.
 * @retval  SIM800_NetworkRegStatus_t enumeration value representing the network registration status.
 * @return  Network registration status. For possible values, refer to the SIM800_NetworkRegStatus_t enumeration.
 */
SIM800_NetworkRegStatus_t SIM800_GetNetworkRegStatus(SIM800_Handle_t *handle)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
	char cmd[] = "AT+CREG?\r\n", *ptr;
 8002a70:	4a33      	ldr	r2, [pc, #204]	@ (8002b40 <SIM800_GetNetworkRegStatus+0xd8>)
 8002a72:	f107 030c 	add.w	r3, r7, #12
 8002a76:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a78:	c303      	stmia	r3!, {r0, r1}
 8002a7a:	801a      	strh	r2, [r3, #0]
 8002a7c:	3302      	adds	r3, #2
 8002a7e:	0c12      	lsrs	r2, r2, #16
 8002a80:	701a      	strb	r2, [r3, #0]
	uint8_t index = add_pending_message(handle, "+CREG", NULL);
 8002a82:	2200      	movs	r2, #0
 8002a84:	492f      	ldr	r1, [pc, #188]	@ (8002b44 <SIM800_GetNetworkRegStatus+0xdc>)
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 fbb6 	bl	80031f8 <add_pending_message>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	77fb      	strb	r3, [r7, #31]
	SIM800_NetworkRegStatus_t status;

	if( send_command(cmd) == SIM800_ERROR )
 8002a90:	f107 030c 	add.w	r3, r7, #12
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 fc2f 	bl	80032f8 <send_command>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d106      	bne.n	8002aae <SIM800_GetNetworkRegStatus+0x46>
	{
		remove_expected_code(handle, index);
 8002aa0:	7ffb      	ldrb	r3, [r7, #31]
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fc08 	bl	80032ba <remove_expected_code>
		return SIM800_FAIL;
 8002aaa:	2306      	movs	r3, #6
 8002aac:	e043      	b.n	8002b36 <SIM800_GetNetworkRegStatus+0xce>
	}

	if( wait_for_state(handle, SIM800_ReceivedStatus, index) == SIM800_TIMEOUT )
 8002aae:	7ffb      	ldrb	r3, [r7, #31]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2104      	movs	r1, #4
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 fc4f 	bl	8003358 <wait_for_state>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d106      	bne.n	8002ace <SIM800_GetNetworkRegStatus+0x66>
	{
		remove_expected_code(handle, index);
 8002ac0:	7ffb      	ldrb	r3, [r7, #31]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fbf8 	bl	80032ba <remove_expected_code>
		return SIM800_FAIL;
 8002aca:	2306      	movs	r3, #6
 8002acc:	e033      	b.n	8002b36 <SIM800_GetNetworkRegStatus+0xce>
	}

	if( validate_message(handle->expected_codes[index].data) == SIM800_ERROR)
 8002ace:	7ffa      	ldrb	r2, [r7, #31]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	015b      	lsls	r3, r3, #5
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	3378      	adds	r3, #120	@ 0x78
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	4413      	add	r3, r2
 8002ade:	3304      	adds	r3, #4
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fc25 	bl	8003330 <validate_message>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d106      	bne.n	8002afa <SIM800_GetNetworkRegStatus+0x92>
	{
		remove_expected_code(handle, index);
 8002aec:	7ffb      	ldrb	r3, [r7, #31]
 8002aee:	4619      	mov	r1, r3
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 fbe2 	bl	80032ba <remove_expected_code>
		return SIM800_FAIL;
 8002af6:	2306      	movs	r3, #6
 8002af8:	e01d      	b.n	8002b36 <SIM800_GetNetworkRegStatus+0xce>
	}

	ptr = strchr(handle->expected_codes[index].data, ',');
 8002afa:	7ffa      	ldrb	r2, [r7, #31]
 8002afc:	4613      	mov	r3, r2
 8002afe:	015b      	lsls	r3, r3, #5
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	3378      	adds	r3, #120	@ 0x78
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	212c      	movs	r1, #44	@ 0x2c
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f008 fdfc 	bl	800b70c <strchr>
 8002b14:	61b8      	str	r0, [r7, #24]
	status = strtol(++ptr, NULL, 10);
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	61bb      	str	r3, [r7, #24]
 8002b1c:	220a      	movs	r2, #10
 8002b1e:	2100      	movs	r1, #0
 8002b20:	69b8      	ldr	r0, [r7, #24]
 8002b22:	f007 fdff 	bl	800a724 <strtol>
 8002b26:	4603      	mov	r3, r0
 8002b28:	75fb      	strb	r3, [r7, #23]

	remove_expected_code(handle, index);
 8002b2a:	7ffb      	ldrb	r3, [r7, #31]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fbc3 	bl	80032ba <remove_expected_code>

	return status;
 8002b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3720      	adds	r7, #32
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	0800e464 	.word	0x0800e464
 8002b44:	0800e45c 	.word	0x0800e45c

08002b48 <SIM800_SetSMSTextMode>:
 * @param   *handle: Pointer to the SIM800 handle structure.
 * @retval  SIM800_OK on success, SIM800_ERROR on failure, SIM800_TIMEOUT on timeout.
 * @return  Execution status. For details, refer to the SIM800_Status_t in the corresponding .h file.
 */
SIM800_Status_t SIM800_SetSMSTextMode(SIM800_Handle_t *handle)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
    char cmd[] = "AT+CMGF=1\r\n";
 8002b50:	4a25      	ldr	r2, [pc, #148]	@ (8002be8 <SIM800_SetSMSTextMode+0xa0>)
 8002b52:	f107 0308 	add.w	r3, r7, #8
 8002b56:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint8_t index = add_pending_message(handle, "+CMGF", NULL);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	4923      	ldr	r1, [pc, #140]	@ (8002bec <SIM800_SetSMSTextMode+0xa4>)
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fb49 	bl	80031f8 <add_pending_message>
 8002b66:	4603      	mov	r3, r0
 8002b68:	75fb      	strb	r3, [r7, #23]

    if (send_command(cmd) == SIM800_ERROR)
 8002b6a:	f107 0308 	add.w	r3, r7, #8
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 fbc2 	bl	80032f8 <send_command>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d106      	bne.n	8002b88 <SIM800_SetSMSTextMode+0x40>
    {
        remove_expected_code(handle, index);
 8002b7a:	7dfb      	ldrb	r3, [r7, #23]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fb9b 	bl	80032ba <remove_expected_code>
        return SIM800_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e02b      	b.n	8002be0 <SIM800_SetSMSTextMode+0x98>
    }

    if (wait_for_state(handle, SIM800_ReceivedStatus, index) == SIM800_TIMEOUT)
 8002b88:	7dfb      	ldrb	r3, [r7, #23]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2104      	movs	r1, #4
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fbe2 	bl	8003358 <wait_for_state>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d106      	bne.n	8002ba8 <SIM800_SetSMSTextMode+0x60>
    {
        remove_expected_code(handle, index);
 8002b9a:	7dfb      	ldrb	r3, [r7, #23]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 fb8b 	bl	80032ba <remove_expected_code>
        return SIM800_TIMEOUT;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e01b      	b.n	8002be0 <SIM800_SetSMSTextMode+0x98>
    }

    if (validate_message(handle->expected_codes[index].data) == SIM800_ERROR)
 8002ba8:	7dfa      	ldrb	r2, [r7, #23]
 8002baa:	4613      	mov	r3, r2
 8002bac:	015b      	lsls	r3, r3, #5
 8002bae:	1a9b      	subs	r3, r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	3378      	adds	r3, #120	@ 0x78
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3304      	adds	r3, #4
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fbb8 	bl	8003330 <validate_message>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d106      	bne.n	8002bd4 <SIM800_SetSMSTextMode+0x8c>
    {
        remove_expected_code(handle, index);
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fb75 	bl	80032ba <remove_expected_code>
        return SIM800_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e005      	b.n	8002be0 <SIM800_SetSMSTextMode+0x98>
    }

    remove_expected_code(handle, index);
 8002bd4:	7dfb      	ldrb	r3, [r7, #23]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 fb6e 	bl	80032ba <remove_expected_code>

    return SIM800_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	0800e478 	.word	0x0800e478
 8002bec:	0800e470 	.word	0x0800e470

08002bf0 <SIM800_DeleteAllSMSMessages>:
 * @param   *handle: Pointer to the SIM800 handle structure.
 * @retval  SIM800_OK on success, SIM800_ERROR on failure, SIM800_TIMEOUT on timeout.
 * @return  Execution status. For details, refer to the SIM800_Status_t enumeration.
 */
SIM800_Status_t SIM800_DeleteAllSMSMessages(SIM800_Handle_t *handle)
{
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
	char cmd[] = "AT+CMGD=1,4\r\n";
 8002bf8:	4b25      	ldr	r3, [pc, #148]	@ (8002c90 <SIM800_DeleteAllSMSMessages+0xa0>)
 8002bfa:	f107 0408 	add.w	r4, r7, #8
 8002bfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c00:	c407      	stmia	r4!, {r0, r1, r2}
 8002c02:	8023      	strh	r3, [r4, #0]
	uint8_t index = add_pending_message(handle, "+CMGD", NULL);
 8002c04:	2200      	movs	r2, #0
 8002c06:	4923      	ldr	r1, [pc, #140]	@ (8002c94 <SIM800_DeleteAllSMSMessages+0xa4>)
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 faf5 	bl	80031f8 <add_pending_message>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	75fb      	strb	r3, [r7, #23]

	if (send_command(cmd) == SIM800_ERROR)
 8002c12:	f107 0308 	add.w	r3, r7, #8
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 fb6e 	bl	80032f8 <send_command>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d106      	bne.n	8002c30 <SIM800_DeleteAllSMSMessages+0x40>
	{
		remove_expected_code(handle, index);
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
 8002c24:	4619      	mov	r1, r3
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 fb47 	bl	80032ba <remove_expected_code>
		return SIM800_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e02b      	b.n	8002c88 <SIM800_DeleteAllSMSMessages+0x98>
	}

	if (wait_for_state(handle, SIM800_ReceivedStatus, index) == SIM800_TIMEOUT)
 8002c30:	7dfb      	ldrb	r3, [r7, #23]
 8002c32:	461a      	mov	r2, r3
 8002c34:	2104      	movs	r1, #4
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fb8e 	bl	8003358 <wait_for_state>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d106      	bne.n	8002c50 <SIM800_DeleteAllSMSMessages+0x60>
	{
		remove_expected_code(handle, index);
 8002c42:	7dfb      	ldrb	r3, [r7, #23]
 8002c44:	4619      	mov	r1, r3
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fb37 	bl	80032ba <remove_expected_code>
		return SIM800_TIMEOUT;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e01b      	b.n	8002c88 <SIM800_DeleteAllSMSMessages+0x98>
	}

	if (validate_message(handle->expected_codes[index].data) == SIM800_ERROR)
 8002c50:	7dfa      	ldrb	r2, [r7, #23]
 8002c52:	4613      	mov	r3, r2
 8002c54:	015b      	lsls	r3, r3, #5
 8002c56:	1a9b      	subs	r3, r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	3378      	adds	r3, #120	@ 0x78
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	4413      	add	r3, r2
 8002c60:	3304      	adds	r3, #4
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 fb64 	bl	8003330 <validate_message>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d106      	bne.n	8002c7c <SIM800_DeleteAllSMSMessages+0x8c>
	{
		remove_expected_code(handle, index);
 8002c6e:	7dfb      	ldrb	r3, [r7, #23]
 8002c70:	4619      	mov	r1, r3
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fb21 	bl	80032ba <remove_expected_code>
		return SIM800_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e005      	b.n	8002c88 <SIM800_DeleteAllSMSMessages+0x98>
	}

	remove_expected_code(handle, index);
 8002c7c:	7dfb      	ldrb	r3, [r7, #23]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fb1a 	bl	80032ba <remove_expected_code>

	return SIM800_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	371c      	adds	r7, #28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd90      	pop	{r4, r7, pc}
 8002c90:	0800e48c 	.word	0x0800e48c
 8002c94:	0800e484 	.word	0x0800e484

08002c98 <SIM800_SendSMSMessage>:
 * @param   *message: SMS message to be sent.
 * @retval  SIM800_OK on success, SIM800_ERROR on failure, SIM800_TIMEOUT on timeout.
 * @return  Execution status. For details, refer to the SIM800_Status_t enumeration.
 */
SIM800_Status_t SIM800_SendSMSMessage(SIM800_Handle_t *handle, char *destination, char *message)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b09e      	sub	sp, #120	@ 0x78
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
    char buff[SMS_TX_MAX_LEN];
    // Add an expected code for the +CMGS code
    uint8_t index = add_pending_message(handle, "+CMGS", NULL);
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	4955      	ldr	r1, [pc, #340]	@ (8002dfc <SIM800_SendSMSMessage+0x164>)
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 faa5 	bl	80031f8 <add_pending_message>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

    if (strlen(destination) > (SMS_TX_MAX_LEN - 3) || strlen(message) > (SMS_TX_MAX_LEN - 3))
 8002cb4:	68b8      	ldr	r0, [r7, #8]
 8002cb6:	f7fd fae3 	bl	8000280 <strlen>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b61      	cmp	r3, #97	@ 0x61
 8002cbe:	d805      	bhi.n	8002ccc <SIM800_SendSMSMessage+0x34>
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7fd fadd 	bl	8000280 <strlen>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b61      	cmp	r3, #97	@ 0x61
 8002cca:	d907      	bls.n	8002cdc <SIM800_SendSMSMessage+0x44>
    {
        // Remove the expected code if the data is too large
        remove_expected_code(handle, index);
 8002ccc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 faf1 	bl	80032ba <remove_expected_code>
        return SIM800_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e08b      	b.n	8002df4 <SIM800_SendSMSMessage+0x15c>
    }

    // Prepare the AT command for sending an SMS
    strcpy(buff, "AT+CMGS=\"");
 8002cdc:	f107 0310 	add.w	r3, r7, #16
 8002ce0:	4a47      	ldr	r2, [pc, #284]	@ (8002e00 <SIM800_SendSMSMessage+0x168>)
 8002ce2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ce4:	c303      	stmia	r3!, {r0, r1}
 8002ce6:	801a      	strh	r2, [r3, #0]
    strcat(buff, destination);
 8002ce8:	f107 0310 	add.w	r3, r7, #16
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f008 fcfd 	bl	800b6ee <strcat>
    strcat(buff, "\"\r\n");
 8002cf4:	f107 0310 	add.w	r3, r7, #16
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fd fac1 	bl	8000280 <strlen>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	461a      	mov	r2, r3
 8002d02:	f107 0310 	add.w	r3, r7, #16
 8002d06:	4413      	add	r3, r2
 8002d08:	4a3e      	ldr	r2, [pc, #248]	@ (8002e04 <SIM800_SendSMSMessage+0x16c>)
 8002d0a:	6810      	ldr	r0, [r2, #0]
 8002d0c:	6018      	str	r0, [r3, #0]

    // Send the command
    if (send_command(buff) == SIM800_ERROR)
 8002d0e:	f107 0310 	add.w	r3, r7, #16
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 faf0 	bl	80032f8 <send_command>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d107      	bne.n	8002d2e <SIM800_SendSMSMessage+0x96>
    {
        // Remove the expected code in case of failure
        remove_expected_code(handle, index);
 8002d1e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002d22:	4619      	mov	r1, r3
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 fac8 	bl	80032ba <remove_expected_code>
        return SIM800_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e062      	b.n	8002df4 <SIM800_SendSMSMessage+0x15c>
    }

    // Wait after sending the first command
    HAL_Delay(500);
 8002d2e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d32:	f000 ff71 	bl	8003c18 <HAL_Delay>

    // Prepare the message for sending and add an end character
    strcpy(buff, message);
 8002d36:	f107 0310 	add.w	r3, r7, #16
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f008 fe04 	bl	800b94a <strcpy>
    strcat(buff, "\032");
 8002d42:	f107 0310 	add.w	r3, r7, #16
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fa9a 	bl	8000280 <strlen>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	461a      	mov	r2, r3
 8002d50:	f107 0310 	add.w	r3, r7, #16
 8002d54:	4413      	add	r3, r2
 8002d56:	492c      	ldr	r1, [pc, #176]	@ (8002e08 <SIM800_SendSMSMessage+0x170>)
 8002d58:	461a      	mov	r2, r3
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	8013      	strh	r3, [r2, #0]

    // Send the SMS message
    if (send_command(buff) == SIM800_ERROR)
 8002d60:	f107 0310 	add.w	r3, r7, #16
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 fac7 	bl	80032f8 <send_command>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d10a      	bne.n	8002d86 <SIM800_SendSMSMessage+0xee>
    {
        // Send the end character in case of failure
        send_command("\032");
 8002d70:	4825      	ldr	r0, [pc, #148]	@ (8002e08 <SIM800_SendSMSMessage+0x170>)
 8002d72:	f000 fac1 	bl	80032f8 <send_command>
        // Remove the expected code
        remove_expected_code(handle, index);
 8002d76:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 fa9c 	bl	80032ba <remove_expected_code>
        return SIM800_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e036      	b.n	8002df4 <SIM800_SendSMSMessage+0x15c>
    }

    // Wait for a response to the sent SMS
    if (wait_for_state(handle, SIM800_ReceivedStatus, index) == SIM800_TIMEOUT)
 8002d86:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2104      	movs	r1, #4
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 fae2 	bl	8003358 <wait_for_state>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d10a      	bne.n	8002db0 <SIM800_SendSMSMessage+0x118>
    {
        // Send the end character in case of a timeout
        send_command("\032");
 8002d9a:	481b      	ldr	r0, [pc, #108]	@ (8002e08 <SIM800_SendSMSMessage+0x170>)
 8002d9c:	f000 faac 	bl	80032f8 <send_command>
        // Remove the expected code
        remove_expected_code(handle, index);
 8002da0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002da4:	4619      	mov	r1, r3
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 fa87 	bl	80032ba <remove_expected_code>
        return SIM800_TIMEOUT;
 8002dac:	2302      	movs	r3, #2
 8002dae:	e021      	b.n	8002df4 <SIM800_SendSMSMessage+0x15c>
    }

    // Validate the response message
    if (validate_message(handle->expected_codes[index].data) == SIM800_ERROR)
 8002db0:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8002db4:	4613      	mov	r3, r2
 8002db6:	015b      	lsls	r3, r3, #5
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	3378      	adds	r3, #120	@ 0x78
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fab3 	bl	8003330 <validate_message>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d10a      	bne.n	8002de6 <SIM800_SendSMSMessage+0x14e>
    {
        // Send the end character in case of an error
        send_command("\032");
 8002dd0:	480d      	ldr	r0, [pc, #52]	@ (8002e08 <SIM800_SendSMSMessage+0x170>)
 8002dd2:	f000 fa91 	bl	80032f8 <send_command>
        // Remove the expected code
        remove_expected_code(handle, index);
 8002dd6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002dda:	4619      	mov	r1, r3
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 fa6c 	bl	80032ba <remove_expected_code>
        return SIM800_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e006      	b.n	8002df4 <SIM800_SendSMSMessage+0x15c>
    }

    // Remove the expected code since the SMS is sent
    remove_expected_code(handle, index);
 8002de6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002dea:	4619      	mov	r1, r3
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 fa64 	bl	80032ba <remove_expected_code>
    return SIM800_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3778      	adds	r7, #120	@ 0x78
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	0800e49c 	.word	0x0800e49c
 8002e00:	0800e4a4 	.word	0x0800e4a4
 8002e04:	0800e4b0 	.word	0x0800e4b0
 8002e08:	0800e4b4 	.word	0x0800e4b4

08002e0c <SIM800_ManageSMSNotifications>:
 * @param   enordi: ENABLE to enable SMS notifications, DISABLE to disable SMS notifications.
 * @retval  SIM800_OK on success, SIM800_ERROR on failure.
 * @return  Execution status. For details, refer to the SIM800_Status_t enumeration.
 */
SIM800_Status_t SIM800_ManageSMSNotifications(SIM800_Handle_t *handle, uint8_t enordi)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	70fb      	strb	r3, [r7, #3]
    static uint32_t index = 0xFFFF;

    if (enordi == ENABLE)
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d112      	bne.n	8002e44 <SIM800_ManageSMSNotifications+0x38>
    {
        if (index == 0xFFFF)
 8002e1e:	4b14      	ldr	r3, [pc, #80]	@ (8002e70 <SIM800_ManageSMSNotifications+0x64>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d10a      	bne.n	8002e40 <SIM800_ManageSMSNotifications+0x34>
        {
            // Add an expected code for incoming SMS notifications
            index = add_pending_message(handle, "+CMTI", &cmti_handler);
 8002e2a:	4a12      	ldr	r2, [pc, #72]	@ (8002e74 <SIM800_ManageSMSNotifications+0x68>)
 8002e2c:	4912      	ldr	r1, [pc, #72]	@ (8002e78 <SIM800_ManageSMSNotifications+0x6c>)
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f9e2 	bl	80031f8 <add_pending_message>
 8002e34:	4603      	mov	r3, r0
 8002e36:	461a      	mov	r2, r3
 8002e38:	4b0d      	ldr	r3, [pc, #52]	@ (8002e70 <SIM800_ManageSMSNotifications+0x64>)
 8002e3a:	601a      	str	r2, [r3, #0]
            return SIM800_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	e013      	b.n	8002e68 <SIM800_ManageSMSNotifications+0x5c>
        }
        return SIM800_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e011      	b.n	8002e68 <SIM800_ManageSMSNotifications+0x5c>
    }
    else
    {
        if (index != 0xFFFF)
 8002e44:	4b0a      	ldr	r3, [pc, #40]	@ (8002e70 <SIM800_ManageSMSNotifications+0x64>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00a      	beq.n	8002e66 <SIM800_ManageSMSNotifications+0x5a>
        {
            // Remove the expected code for incoming SMS notifications
            remove_expected_code(handle, index);
 8002e50:	4b07      	ldr	r3, [pc, #28]	@ (8002e70 <SIM800_ManageSMSNotifications+0x64>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	4619      	mov	r1, r3
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 fa2e 	bl	80032ba <remove_expected_code>
            index = 0xFFFF;
 8002e5e:	4b04      	ldr	r3, [pc, #16]	@ (8002e70 <SIM800_ManageSMSNotifications+0x64>)
 8002e60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e64:	601a      	str	r2, [r3, #0]
        }
    }

    return SIM800_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20000008 	.word	0x20000008
 8002e74:	080033a7 	.word	0x080033a7
 8002e78:	0800e4b8 	.word	0x0800e4b8

08002e7c <SIM800_RequestSMSMessage>:
 * @param   *handle: Pointer to the SIM800 handle structure.
 * @param   sms_index: Index of the SMS message to request.
 * @retval  SIM800_OK on success, SIM800_ERROR on failure.
 */
SIM800_Status_t SIM800_RequestSMSMessage(SIM800_Handle_t *handle, uint32_t sms_index)
{
 8002e7c:	b590      	push	{r4, r7, lr}
 8002e7e:	b089      	sub	sp, #36	@ 0x24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
 8002e86:	466b      	mov	r3, sp
 8002e88:	461c      	mov	r4, r3
    char cmd[strlen("AT+CMGR=") + 12];
 8002e8a:	2313      	movs	r3, #19
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	2314      	movs	r3, #20
 8002e90:	3307      	adds	r3, #7
 8002e92:	08db      	lsrs	r3, r3, #3
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	ebad 0d03 	sub.w	sp, sp, r3
 8002e9a:	466b      	mov	r3, sp
 8002e9c:	3300      	adds	r3, #0
 8002e9e:	61bb      	str	r3, [r7, #24]
    char str_sms_index[10];

    // Add an expected +CMGR code and associate it with the cmgr_handler function
    uint8_t index = add_pending_message(handle, "+CMGR", &cmgr_handler);
 8002ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f18 <SIM800_RequestSMSMessage+0x9c>)
 8002ea2:	491e      	ldr	r1, [pc, #120]	@ (8002f1c <SIM800_RequestSMSMessage+0xa0>)
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f9a7 	bl	80031f8 <add_pending_message>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	75fb      	strb	r3, [r7, #23]

    // Prepare the AT command to request the SMS message
    strcpy(cmd, "AT+CMGR=");
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	491b      	ldr	r1, [pc, #108]	@ (8002f20 <SIM800_RequestSMSMessage+0xa4>)
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	cb03      	ldmia	r3!, {r0, r1}
 8002eb8:	6010      	str	r0, [r2, #0]
 8002eba:	6051      	str	r1, [r2, #4]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	7213      	strb	r3, [r2, #8]
    itoa(sms_index, str_sms_index, 10);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	f107 010c 	add.w	r1, r7, #12
 8002ec6:	220a      	movs	r2, #10
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f006 fd99 	bl	8009a00 <itoa>
    strcat(cmd, str_sms_index);
 8002ece:	f107 030c 	add.w	r3, r7, #12
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	69b8      	ldr	r0, [r7, #24]
 8002ed6:	f008 fc0a 	bl	800b6ee <strcat>
    strcat(cmd, "\r\n");
 8002eda:	69b8      	ldr	r0, [r7, #24]
 8002edc:	f7fd f9d0 	bl	8000280 <strlen>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8002f24 <SIM800_RequestSMSMessage+0xa8>)
 8002eea:	8811      	ldrh	r1, [r2, #0]
 8002eec:	7892      	ldrb	r2, [r2, #2]
 8002eee:	8019      	strh	r1, [r3, #0]
 8002ef0:	709a      	strb	r2, [r3, #2]

    // Send the command to request the SMS message
    if (send_command(cmd) == SIM800_ERROR)
 8002ef2:	69b8      	ldr	r0, [r7, #24]
 8002ef4:	f000 fa00 	bl	80032f8 <send_command>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d106      	bne.n	8002f0c <SIM800_RequestSMSMessage+0x90>
    {
        remove_expected_code(handle, index);
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	4619      	mov	r1, r3
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f9d9 	bl	80032ba <remove_expected_code>
        return SIM800_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <SIM800_RequestSMSMessage+0x92>
    }

    return SIM800_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	46a5      	mov	sp, r4
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3724      	adds	r7, #36	@ 0x24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd90      	pop	{r4, r7, pc}
 8002f18:	08003409 	.word	0x08003409
 8002f1c:	0800e4c0 	.word	0x0800e4c0
 8002f20:	0800e4c8 	.word	0x0800e4c8
 8002f24:	0800e4d4 	.word	0x0800e4d4

08002f28 <SIM800_MessageHandler>:
 * The function is designed to work with asynchronous UART communication.
 *
 * @param   *handle: Pointer to the SIM800 handle structure.
 */
void SIM800_MessageHandler(SIM800_Handle_t *handle)
{
 8002f28:	b590      	push	{r4, r7, lr}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
    uint32_t counter = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
    uint8_t flag = 1; // Flag to check if the first part of a response (e.g., +CODE) is received
 8002f34:	2301      	movs	r3, #1
 8002f36:	74fb      	strb	r3, [r7, #19]
    size_t data_str_len;

    if (handle->rcvdByte != '\n')
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8002f3e:	2b0a      	cmp	r3, #10
 8002f40:	d018      	beq.n	8002f74 <SIM800_MessageHandler+0x4c>
    {
        // Store the received character in the buffer(if buffer is not full)
        if (handle->rxCounter < RX_BUFFER_LENGTH)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f46:	2b63      	cmp	r3, #99	@ 0x63
 8002f48:	d80b      	bhi.n	8002f62 <SIM800_MessageHandler+0x3a>
        {
            handle->rxBuffer[handle->rxCounter] = handle->rcvdByte;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	f892 1068 	ldrb.w	r1, [r2, #104]	@ 0x68
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	54d1      	strb	r1, [r2, r3]
            handle->rxCounter++;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        // Continue receiving characters
        HAL_UART_Receive_IT(SIM800_UART, (uint8_t *)&handle->rcvdByte, 1);
 8002f62:	4ba1      	ldr	r3, [pc, #644]	@ (80031e8 <SIM800_MessageHandler+0x2c0>)
 8002f64:	6818      	ldr	r0, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3368      	adds	r3, #104	@ 0x68
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	f003 fb89 	bl	8006684 <HAL_UART_Receive_IT>
        return;
 8002f72:	e135      	b.n	80031e0 <SIM800_MessageHandler+0x2b8>
    }

    // Append the newline character and terminate the buffer
    handle->rxBuffer[handle->rxCounter] = handle->rcvdByte;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	f892 1068 	ldrb.w	r1, [r2, #104]	@ 0x68
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	54d1      	strb	r1, [r2, r3]
    handle->rxCounter++;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	665a      	str	r2, [r3, #100]	@ 0x64
    handle->rxBuffer[handle->rxCounter] = '\0';
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	2100      	movs	r1, #0
 8002f94:	54d1      	strb	r1, [r2, r3]

    if (!strncmp(handle->rxBuffer, "OK", 2) || !strncmp(handle->rxBuffer, "ERROR", 2))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2202      	movs	r2, #2
 8002f9a:	4994      	ldr	r1, [pc, #592]	@ (80031ec <SIM800_MessageHandler+0x2c4>)
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f008 fbc2 	bl	800b726 <strncmp>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <SIM800_MessageHandler+0x92>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	4990      	ldr	r1, [pc, #576]	@ (80031f0 <SIM800_MessageHandler+0x2c8>)
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f008 fbb9 	bl	800b726 <strncmp>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d14e      	bne.n	8003058 <SIM800_MessageHandler+0x130>
    {
        // Check if the received response is "OK" or "ERROR"
        data_str_len = strlen(handle->expected_codes[handle->curProccesPacket_index].data);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f8d3 2548 	ldr.w	r2, [r3, #1352]	@ 0x548
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	015b      	lsls	r3, r3, #5
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	3378      	adds	r3, #120	@ 0x78
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	3304      	adds	r3, #4
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fd f955 	bl	8000280 <strlen>
 8002fd6:	60b8      	str	r0, [r7, #8]

        // Append the data to the expected code buffer
        strncpy(&handle->expected_codes[handle->curProccesPacket_index].data[data_str_len],
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8d3 2548 	ldr.w	r2, [r3, #1352]	@ 0x548
 8002fde:	4613      	mov	r3, r2
 8002fe0:	015b      	lsls	r3, r3, #5
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	4413      	add	r3, r2
 8002fea:	3378      	adds	r3, #120	@ 0x78
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	4413      	add	r3, r2
 8002ff0:	1d18      	adds	r0, r3, #4
                handle->rxBuffer,
 8002ff2:	6879      	ldr	r1, [r7, #4]
        strncpy(&handle->expected_codes[handle->curProccesPacket_index].data[data_str_len],
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f008 fba5 	bl	800b74a <strncpy>
                RECEIVE_DATA_MAX_LENGTH - data_str_len);

        // Set the received status to SIM800_ReceivedStatus
        handle->expected_codes[handle->curProccesPacket_index].state = SIM800_ReceivedStatus;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8d3 2548 	ldr.w	r2, [r3, #1352]	@ 0x548
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	015b      	lsls	r3, r3, #5
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	33e0      	adds	r3, #224	@ 0xe0
 8003014:	2204      	movs	r2, #4
 8003016:	701a      	strb	r2, [r3, #0]

        // Invoke the associated handler if available
        if (handle->expected_codes[handle->curProccesPacket_index].handle != NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f8d3 2548 	ldr.w	r2, [r3, #1352]	@ 0x548
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	015b      	lsls	r3, r3, #5
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	33e4      	adds	r3, #228	@ 0xe4
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 80c6 	beq.w	80031c0 <SIM800_MessageHandler+0x298>
        {
            handle->expected_codes[handle->curProccesPacket_index].handle(handle, handle->curProccesPacket_index);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8d3 2548 	ldr.w	r2, [r3, #1352]	@ 0x548
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	015b      	lsls	r3, r3, #5
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	33e4      	adds	r3, #228	@ 0xe4
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	f8d2 2548 	ldr.w	r2, [r2, #1352]	@ 0x548
 8003050:	4611      	mov	r1, r2
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	4798      	blx	r3
        if (handle->expected_codes[handle->curProccesPacket_index].handle != NULL)
 8003056:	e0b3      	b.n	80031c0 <SIM800_MessageHandler+0x298>
        }
    }
    else
    {
        for (uint32_t i = 0; i < EXPECTED_CODES_MAX_COUNT; i++)
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	e065      	b.n	800312a <SIM800_MessageHandler+0x202>
        {
            if (handle->expected_codes[i].state == SIM800_WaitingFor)
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4613      	mov	r3, r2
 8003064:	015b      	lsls	r3, r3, #5
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	33e0      	adds	r3, #224	@ 0xe0
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d157      	bne.n	8003124 <SIM800_MessageHandler+0x1fc>
            {
                if (!strncmp(handle->rxBuffer, handle->expected_codes[i].code, handle->expected_codes[i].code_length))
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4613      	mov	r3, r2
 800307a:	015b      	lsls	r3, r3, #5
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	3368      	adds	r3, #104	@ 0x68
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	1d1c      	adds	r4, r3, #4
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4613      	mov	r3, r2
 800308e:	015b      	lsls	r3, r3, #5
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	3378      	adds	r3, #120	@ 0x78
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	4621      	mov	r1, r4
 800309e:	f008 fb42 	bl	800b726 <strncmp>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d134      	bne.n	8003112 <SIM800_MessageHandler+0x1ea>
                {
                    // Store the data in the corresponding buffer
                    strcpy(handle->expected_codes[i].data, handle->rxBuffer);
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4613      	mov	r3, r2
 80030ac:	015b      	lsls	r3, r3, #5
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	3378      	adds	r3, #120	@ 0x78
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	4413      	add	r3, r2
 80030b8:	3304      	adds	r3, #4
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f008 fc43 	bl	800b94a <strcpy>

                    // Update the current processed packet index
                    handle->curProccesPacket_index = i;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	f8c3 2548 	str.w	r2, [r3, #1352]	@ 0x548

                    // Set the received status to SIM800_Received
                    handle->expected_codes[i].state = SIM800_Received;
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4613      	mov	r3, r2
 80030d2:	015b      	lsls	r3, r3, #5
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	33e0      	adds	r3, #224	@ 0xe0
 80030dc:	2202      	movs	r2, #2
 80030de:	701a      	strb	r2, [r3, #0]

                    flag = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	74fb      	strb	r3, [r7, #19]

                    // Invoke the associated handler if available
                    if (handle->expected_codes[i].handle != NULL)
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4613      	mov	r3, r2
 80030ea:	015b      	lsls	r3, r3, #5
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	33e4      	adds	r3, #228	@ 0xe4
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00b      	beq.n	8003112 <SIM800_MessageHandler+0x1ea>
                    {
                        handle->expected_codes[i].handle(handle, i);
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4613      	mov	r3, r2
 8003100:	015b      	lsls	r3, r3, #5
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	33e4      	adds	r3, #228	@ 0xe4
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68f9      	ldr	r1, [r7, #12]
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	4798      	blx	r3
                    }
                }

                counter++;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	3301      	adds	r3, #1
 8003116:	617b      	str	r3, [r7, #20]
                if (counter >= handle->expected_codes_count)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f8d3 3544 	ldr.w	r3, [r3, #1348]	@ 0x544
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	429a      	cmp	r2, r3
 8003122:	d206      	bcs.n	8003132 <SIM800_MessageHandler+0x20a>
        for (uint32_t i = 0; i < EXPECTED_CODES_MAX_COUNT; i++)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	3301      	adds	r3, #1
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b09      	cmp	r3, #9
 800312e:	d996      	bls.n	800305e <SIM800_MessageHandler+0x136>
 8003130:	e000      	b.n	8003134 <SIM800_MessageHandler+0x20c>
                {
                    break; // Exit the loop when all expected codes have been processed
 8003132:	bf00      	nop
                }
            }
        }

        if (flag && handle->expected_codes[handle->curProccesPacket_index].state == SIM800_Received &&
 8003134:	7cfb      	ldrb	r3, [r7, #19]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d042      	beq.n	80031c0 <SIM800_MessageHandler+0x298>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8d3 2548 	ldr.w	r2, [r3, #1352]	@ 0x548
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	015b      	lsls	r3, r3, #5
 8003146:	1a9b      	subs	r3, r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	33e0      	adds	r3, #224	@ 0xe0
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d135      	bne.n	80031c0 <SIM800_MessageHandler+0x298>
            strncmp(handle->expected_codes[handle->curProccesPacket_index].data, "\r\n", 2))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8d3 2548 	ldr.w	r2, [r3, #1352]	@ 0x548
 800315a:	4613      	mov	r3, r2
 800315c:	015b      	lsls	r3, r3, #5
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	3378      	adds	r3, #120	@ 0x78
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	4413      	add	r3, r2
 8003168:	3304      	adds	r3, #4
 800316a:	2202      	movs	r2, #2
 800316c:	4921      	ldr	r1, [pc, #132]	@ (80031f4 <SIM800_MessageHandler+0x2cc>)
 800316e:	4618      	mov	r0, r3
 8003170:	f008 fad9 	bl	800b726 <strncmp>
 8003174:	4603      	mov	r3, r0
        if (flag && handle->expected_codes[handle->curProccesPacket_index].state == SIM800_Received &&
 8003176:	2b00      	cmp	r3, #0
 8003178:	d022      	beq.n	80031c0 <SIM800_MessageHandler+0x298>
        {
            data_str_len = strlen(handle->expected_codes[handle->curProccesPacket_index].data);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8d3 2548 	ldr.w	r2, [r3, #1352]	@ 0x548
 8003180:	4613      	mov	r3, r2
 8003182:	015b      	lsls	r3, r3, #5
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	3378      	adds	r3, #120	@ 0x78
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	4413      	add	r3, r2
 800318e:	3304      	adds	r3, #4
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd f875 	bl	8000280 <strlen>
 8003196:	60b8      	str	r0, [r7, #8]

            // Append the received characters to the current expected code buffer
            strncpy(&handle->expected_codes[handle->curProccesPacket_index].data[data_str_len],
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8d3 2548 	ldr.w	r2, [r3, #1352]	@ 0x548
 800319e:	4613      	mov	r3, r2
 80031a0:	015b      	lsls	r3, r3, #5
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	4413      	add	r3, r2
 80031aa:	3378      	adds	r3, #120	@ 0x78
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	4413      	add	r3, r2
 80031b0:	1d18      	adds	r0, r3, #4
                    handle->rxBuffer,
 80031b2:	6879      	ldr	r1, [r7, #4]
            strncpy(&handle->expected_codes[handle->curProccesPacket_index].data[data_str_len],
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80031ba:	461a      	mov	r2, r3
 80031bc:	f008 fac5 	bl	800b74a <strncpy>
                    RECEIVE_DATA_MAX_LENGTH - data_str_len);
        }
    }

    // Reset the receive counter
    handle->rxCounter = 0;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	665a      	str	r2, [r3, #100]	@ 0x64

    // If still in receive status, continue to receive characters
    if (handle->recStatus == SIM800_Receives)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 354c 	ldrb.w	r3, [r3, #1356]	@ 0x54c
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d107      	bne.n	80031e0 <SIM800_MessageHandler+0x2b8>
    {
        HAL_UART_Receive_IT(SIM800_UART, (uint8_t *)&handle->rcvdByte, 1);
 80031d0:	4b05      	ldr	r3, [pc, #20]	@ (80031e8 <SIM800_MessageHandler+0x2c0>)
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3368      	adds	r3, #104	@ 0x68
 80031d8:	2201      	movs	r2, #1
 80031da:	4619      	mov	r1, r3
 80031dc:	f003 fa52 	bl	8006684 <HAL_UART_Receive_IT>
    }
}
 80031e0:	371c      	adds	r7, #28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd90      	pop	{r4, r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000000 	.word	0x20000000
 80031ec:	0800e4d8 	.word	0x0800e4d8
 80031f0:	0800e4dc 	.word	0x0800e4dc
 80031f4:	0800e4d4 	.word	0x0800e4d4

080031f8 <add_pending_message>:
 * @param   *code: Expected message code to watch for (e.g., "+CMGS").
 * @param   messageHandler: Custom message handler function to call upon receiving the expected code.
 * @retval  The index under which the code is added or 0xFF on error.
 */
static uint8_t add_pending_message(SIM800_Handle_t *handle, char *code, void (*messageHandler)(void*, uint32_t))
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
    size_t code_len = strlen(code);
 8003204:	68b8      	ldr	r0, [r7, #8]
 8003206:	f7fd f83b 	bl	8000280 <strlen>
 800320a:	6138      	str	r0, [r7, #16]

    if (code_len > CODE_MAX_LENGTH)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	2b0a      	cmp	r3, #10
 8003210:	d901      	bls.n	8003216 <add_pending_message+0x1e>
    {
        return 0xFF; // Error: Code is too long
 8003212:	23ff      	movs	r3, #255	@ 0xff
 8003214:	e04d      	b.n	80032b2 <add_pending_message+0xba>
    }

    for (uint32_t i = 0; i < EXPECTED_CODES_MAX_COUNT; i++)
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	e046      	b.n	80032aa <add_pending_message+0xb2>
    {
        if (handle->expected_codes[i].state == SIM800_DoesntExpects)
 800321c:	68f9      	ldr	r1, [r7, #12]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4613      	mov	r3, r2
 8003222:	015b      	lsls	r3, r3, #5
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	33e0      	adds	r3, #224	@ 0xe0
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d138      	bne.n	80032a4 <add_pending_message+0xac>
        {
            // Store the code, its length, and the associated message handler (if any)
            strcpy(handle->expected_codes[i].code, code);
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4613      	mov	r3, r2
 8003236:	015b      	lsls	r3, r3, #5
 8003238:	1a9b      	subs	r3, r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	3368      	adds	r3, #104	@ 0x68
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4413      	add	r3, r2
 8003242:	3304      	adds	r3, #4
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	4618      	mov	r0, r3
 8003248:	f008 fb7f 	bl	800b94a <strcpy>
            handle->expected_codes[i].code_length = code_len;
 800324c:	68f9      	ldr	r1, [r7, #12]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	4613      	mov	r3, r2
 8003252:	015b      	lsls	r3, r3, #5
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	3378      	adds	r3, #120	@ 0x78
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	601a      	str	r2, [r3, #0]
            handle->expected_codes[i].handle = messageHandler;
 8003260:	68f9      	ldr	r1, [r7, #12]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	4613      	mov	r3, r2
 8003266:	015b      	lsls	r3, r3, #5
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	33e4      	adds	r3, #228	@ 0xe4
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	601a      	str	r2, [r3, #0]
            handle->expected_codes[i].state = SIM800_WaitingFor;
 8003274:	68f9      	ldr	r1, [r7, #12]
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	4613      	mov	r3, r2
 800327a:	015b      	lsls	r3, r3, #5
 800327c:	1a9b      	subs	r3, r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	33e0      	adds	r3, #224	@ 0xe0
 8003284:	2201      	movs	r2, #1
 8003286:	701a      	strb	r2, [r3, #0]

            // Increase the count of expected codes
            handle->expected_codes_count++;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f8d3 3544 	ldr.w	r3, [r3, #1348]	@ 0x544
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f8c3 2544 	str.w	r2, [r3, #1348]	@ 0x544

            // Set the current processed packet index
            handle->curProccesPacket_index = i;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	f8c3 2548 	str.w	r2, [r3, #1352]	@ 0x548

            return i; // Return the index under which the code is added
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	e006      	b.n	80032b2 <add_pending_message+0xba>
    for (uint32_t i = 0; i < EXPECTED_CODES_MAX_COUNT; i++)
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	3301      	adds	r3, #1
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2b09      	cmp	r3, #9
 80032ae:	d9b5      	bls.n	800321c <add_pending_message+0x24>
        }
    }

    return 0xFF; // Error: Maximum expected codes count reached
 80032b0:	23ff      	movs	r3, #255	@ 0xff
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <remove_expected_code>:
 *
 * @param   *handle: Pointer to the SIM800 handle structure.
 * @param   index: The index of the expected code to remove.
 */
static void remove_expected_code(SIM800_Handle_t *handle, uint8_t index)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
 80032c2:	460b      	mov	r3, r1
 80032c4:	70fb      	strb	r3, [r7, #3]
    memset(&handle->expected_codes[index], 0, sizeof(handle->expected_codes[index]));
 80032c6:	78fa      	ldrb	r2, [r7, #3]
 80032c8:	4613      	mov	r3, r2
 80032ca:	015b      	lsls	r3, r3, #5
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	3368      	adds	r3, #104	@ 0x68
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	4413      	add	r3, r2
 80032d6:	3304      	adds	r3, #4
 80032d8:	227c      	movs	r2, #124	@ 0x7c
 80032da:	2100      	movs	r1, #0
 80032dc:	4618      	mov	r0, r3
 80032de:	f008 f9fe 	bl	800b6de <memset>
    handle->expected_codes_count--;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f8d3 3544 	ldr.w	r3, [r3, #1348]	@ 0x544
 80032e8:	1e5a      	subs	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8c3 2544 	str.w	r2, [r3, #1348]	@ 0x544
}
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <send_command>:
 *
 * @param   *cmd: Pointer to the AT command string to be sent.
 * @retval  SIM800_OK on success, SIM800_ERROR on failure.
 */
static SIM800_Status_t send_command(char *cmd)
{
 80032f8:	b590      	push	{r4, r7, lr}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
    if (HAL_UART_Transmit_IT(SIM800_UART, (uint8_t *)cmd, strlen(cmd)) != HAL_OK)
 8003300:	4b0a      	ldr	r3, [pc, #40]	@ (800332c <send_command+0x34>)
 8003302:	681c      	ldr	r4, [r3, #0]
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7fc ffbb 	bl	8000280 <strlen>
 800330a:	4603      	mov	r3, r0
 800330c:	b29b      	uxth	r3, r3
 800330e:	461a      	mov	r2, r3
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4620      	mov	r0, r4
 8003314:	f003 f971 	bl	80065fa <HAL_UART_Transmit_IT>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <send_command+0x2a>
    {
        return SIM800_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <send_command+0x2c>
    }

    return SIM800_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bd90      	pop	{r4, r7, pc}
 800332c:	20000000 	.word	0x20000000

08003330 <validate_message>:
 *
 * @param   *message: Pointer to the response message to be validated.
 * @retval  SIM800_OK if the message contains "OK," SIM800_ERROR otherwise.
 */
static SIM800_Status_t validate_message(char *message)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
    if (strstr(message, "OK"))
 8003338:	4906      	ldr	r1, [pc, #24]	@ (8003354 <validate_message+0x24>)
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f008 fa77 	bl	800b82e <strstr>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <validate_message+0x1a>
    {
        return SIM800_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	e000      	b.n	800334c <validate_message+0x1c>
    }

    return SIM800_ERROR;
 800334a:	2301      	movs	r3, #1
}
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	0800e4d8 	.word	0x0800e4d8

08003358 <wait_for_state>:
 * @param   state: The expected state to wait for in the pending message.
 * @param   index: The index of the expected message code to check.
 * @retval  SIM800_OK if the expected state is reached, SIM800_TIMEOUT if the timeout is reached.
 */
static SIM800_Status_t wait_for_state(SIM800_Handle_t *handle, SIM800_ExpectedCodeState_t state, uint8_t index)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	70fb      	strb	r3, [r7, #3]
 8003364:	4613      	mov	r3, r2
 8003366:	70bb      	strb	r3, [r7, #2]
    uint32_t tickStart = HAL_GetTick();
 8003368:	f000 fc4a 	bl	8003c00 <HAL_GetTick>
 800336c:	60f8      	str	r0, [r7, #12]

    while (handle->expected_codes[index].state != state)
 800336e:	e009      	b.n	8003384 <wait_for_state+0x2c>
    {
        if (HAL_GetTick() - tickStart > SIM800_MAX_DELAY)
 8003370:	f000 fc46 	bl	8003c00 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800337e:	d901      	bls.n	8003384 <wait_for_state+0x2c>
        {
            return SIM800_TIMEOUT;
 8003380:	2302      	movs	r3, #2
 8003382:	e00c      	b.n	800339e <wait_for_state+0x46>
    while (handle->expected_codes[index].state != state)
 8003384:	78ba      	ldrb	r2, [r7, #2]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	015b      	lsls	r3, r3, #5
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	33e0      	adds	r3, #224	@ 0xe0
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	429a      	cmp	r2, r3
 800339a:	d1e9      	bne.n	8003370 <wait_for_state+0x18>
        }
    }

    return SIM800_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <cmti_handler>:
 *
 * @param   *handle_ptr: Pointer to the SIM800 handle structure.
 * @param   msg_index: Index of the pending message associated with the +CMTI notification.
 */
static void cmti_handler(void *handle_ptr, uint32_t msg_index)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b086      	sub	sp, #24
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	6039      	str	r1, [r7, #0]
    /*
     * +CMTI: <mem3>,<index>
     */
    SIM800_Handle_t *handle = (SIM800_Handle_t *)handle_ptr;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	617b      	str	r3, [r7, #20]
    char *ptr;
    uint32_t sms_index;

    ptr = strchr(handle->expected_codes[msg_index].data, ',');
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	4613      	mov	r3, r2
 80033b8:	015b      	lsls	r3, r3, #5
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	3378      	adds	r3, #120	@ 0x78
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4413      	add	r3, r2
 80033c4:	3304      	adds	r3, #4
 80033c6:	212c      	movs	r1, #44	@ 0x2c
 80033c8:	4618      	mov	r0, r3
 80033ca:	f008 f99f 	bl	800b70c <strchr>
 80033ce:	6138      	str	r0, [r7, #16]
    sms_index = strtol(++ptr, NULL, 10);
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	3301      	adds	r3, #1
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	220a      	movs	r2, #10
 80033d8:	2100      	movs	r1, #0
 80033da:	6938      	ldr	r0, [r7, #16]
 80033dc:	f007 f9a2 	bl	800a724 <strtol>
 80033e0:	4603      	mov	r3, r0
 80033e2:	60fb      	str	r3, [r7, #12]

    handle->expected_codes[msg_index].state = SIM800_WaitingFor;
 80033e4:	6979      	ldr	r1, [r7, #20]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	015b      	lsls	r3, r3, #5
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	33e0      	adds	r3, #224	@ 0xe0
 80033f4:	2201      	movs	r2, #1
 80033f6:	701a      	strb	r2, [r3, #0]

    SIM800_NewSMSNotificationCallBack(handle, sms_index);
 80033f8:	68f9      	ldr	r1, [r7, #12]
 80033fa:	6978      	ldr	r0, [r7, #20]
 80033fc:	f7fe fcb0 	bl	8001d60 <SIM800_NewSMSNotificationCallBack>
}
 8003400:	bf00      	nop
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <cmgr_handler>:
 *
 * @param   *handle_ptr: Pointer to the SIM800 handle structure.
 * @param   msg_index: Index of the pending message associated with the +CMGR response.
 */
static void cmgr_handler(void *handle_ptr, uint32_t msg_index)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b0a2      	sub	sp, #136	@ 0x88
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
    SIM800_Handle_t *handle = (SIM800_Handle_t *)handle_ptr;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    SIM800_SMSMessage_t message = {0};
 8003418:	f107 030c 	add.w	r3, r7, #12
 800341c:	2278      	movs	r2, #120	@ 0x78
 800341e:	2100      	movs	r1, #0
 8003420:	4618      	mov	r0, r3
 8003422:	f008 f95c 	bl	800b6de <memset>

    if (handle->expected_codes[msg_index].state != SIM800_ReceivedStatus)
 8003426:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	015b      	lsls	r3, r3, #5
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	33e0      	adds	r3, #224	@ 0xe0
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b04      	cmp	r3, #4
 800343c:	d11e      	bne.n	800347c <cmgr_handler+0x74>
    {
        return;
    }

    cmgr_parser(&message, handle->expected_codes[msg_index].data);
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	4613      	mov	r3, r2
 8003442:	015b      	lsls	r3, r3, #5
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	3378      	adds	r3, #120	@ 0x78
 800344a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800344e:	4413      	add	r3, r2
 8003450:	1d1a      	adds	r2, r3, #4
 8003452:	f107 030c 	add.w	r3, r7, #12
 8003456:	4611      	mov	r1, r2
 8003458:	4618      	mov	r0, r3
 800345a:	f000 f813 	bl	8003484 <cmgr_parser>

    SIM800_RcvdSMSCallBack(handle, &message);
 800345e:	f107 030c 	add.w	r3, r7, #12
 8003462:	4619      	mov	r1, r3
 8003464:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003468:	f7fe fc88 	bl	8001d7c <SIM800_RcvdSMSCallBack>

    remove_expected_code(handle, msg_index);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	4619      	mov	r1, r3
 8003472:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003476:	f7ff ff20 	bl	80032ba <remove_expected_code>
 800347a:	e000      	b.n	800347e <cmgr_handler+0x76>
        return;
 800347c:	bf00      	nop
}
 800347e:	3788      	adds	r7, #136	@ 0x88
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <cmgr_parser>:
 *
 * @param   *sms_message: Pointer to the SIM800_SMSMessage_t structure to store the SMS message details.
 * @param   *message: The response message containing SMS message details.
 */
static void cmgr_parser(SIM800_SMSMessage_t *sms_message, char *message)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
     *	OK
     */
    char *ptr1, *ptr2;
    size_t len;

    if (validate_message(message) == SIM800_ERROR)
 800348e:	6838      	ldr	r0, [r7, #0]
 8003490:	f7ff ff4e 	bl	8003330 <validate_message>
 8003494:	4603      	mov	r3, r0
 8003496:	2b01      	cmp	r3, #1
 8003498:	d039      	beq.n	800350e <cmgr_parser+0x8a>
        return;

    ptr1 = strchr(message, '+');
 800349a:	212b      	movs	r1, #43	@ 0x2b
 800349c:	6838      	ldr	r0, [r7, #0]
 800349e:	f008 f935 	bl	800b70c <strchr>
 80034a2:	6178      	str	r0, [r7, #20]
    ptr1 = strchr(++ptr1, '+');
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	3301      	adds	r3, #1
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	212b      	movs	r1, #43	@ 0x2b
 80034ac:	6978      	ldr	r0, [r7, #20]
 80034ae:	f008 f92d 	bl	800b70c <strchr>
 80034b2:	6178      	str	r0, [r7, #20]

    ptr2 = strchr(ptr1, '"');
 80034b4:	2122      	movs	r1, #34	@ 0x22
 80034b6:	6978      	ldr	r0, [r7, #20]
 80034b8:	f008 f928 	bl	800b70c <strchr>
 80034bc:	6138      	str	r0, [r7, #16]
    ptr2--;
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	613b      	str	r3, [r7, #16]

    len = ptr2 - ptr1;
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	60fb      	str	r3, [r7, #12]

    strncpy(sms_message->sender, ptr1, len+1);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3301      	adds	r3, #1
 80034d2:	461a      	mov	r2, r3
 80034d4:	6979      	ldr	r1, [r7, #20]
 80034d6:	f008 f938 	bl	800b74a <strncpy>

    ptr1 = strchr(message, '\n');
 80034da:	210a      	movs	r1, #10
 80034dc:	6838      	ldr	r0, [r7, #0]
 80034de:	f008 f915 	bl	800b70c <strchr>
 80034e2:	6178      	str	r0, [r7, #20]
    ptr1++;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	3301      	adds	r3, #1
 80034e8:	617b      	str	r3, [r7, #20]

    ptr2 = strchr(ptr1, '\n');
 80034ea:	210a      	movs	r1, #10
 80034ec:	6978      	ldr	r0, [r7, #20]
 80034ee:	f008 f90d 	bl	800b70c <strchr>
 80034f2:	6138      	str	r0, [r7, #16]

    len = ptr2 - ptr1 - 1;
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	60fb      	str	r3, [r7, #12]

    strncpy(sms_message->text, ptr1, len);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3314      	adds	r3, #20
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	6979      	ldr	r1, [r7, #20]
 8003506:	4618      	mov	r0, r3
 8003508:	f008 f91f 	bl	800b74a <strncpy>
 800350c:	e000      	b.n	8003510 <cmgr_parser+0x8c>
        return;
 800350e:	bf00      	nop
}
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	607b      	str	r3, [r7, #4]
 8003522:	4b10      	ldr	r3, [pc, #64]	@ (8003564 <HAL_MspInit+0x4c>)
 8003524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003526:	4a0f      	ldr	r2, [pc, #60]	@ (8003564 <HAL_MspInit+0x4c>)
 8003528:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800352c:	6453      	str	r3, [r2, #68]	@ 0x44
 800352e:	4b0d      	ldr	r3, [pc, #52]	@ (8003564 <HAL_MspInit+0x4c>)
 8003530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003532:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003536:	607b      	str	r3, [r7, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	603b      	str	r3, [r7, #0]
 800353e:	4b09      	ldr	r3, [pc, #36]	@ (8003564 <HAL_MspInit+0x4c>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003542:	4a08      	ldr	r2, [pc, #32]	@ (8003564 <HAL_MspInit+0x4c>)
 8003544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003548:	6413      	str	r3, [r2, #64]	@ 0x40
 800354a:	4b06      	ldr	r3, [pc, #24]	@ (8003564 <HAL_MspInit+0x4c>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40023800 	.word	0x40023800

08003568 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08a      	sub	sp, #40	@ 0x28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003570:	f107 0314 	add.w	r3, r7, #20
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a1b      	ldr	r2, [pc, #108]	@ (80035f4 <HAL_ADC_MspInit+0x8c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d12f      	bne.n	80035ea <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	4b1a      	ldr	r3, [pc, #104]	@ (80035f8 <HAL_ADC_MspInit+0x90>)
 8003590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003592:	4a19      	ldr	r2, [pc, #100]	@ (80035f8 <HAL_ADC_MspInit+0x90>)
 8003594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003598:	6453      	str	r3, [r2, #68]	@ 0x44
 800359a:	4b17      	ldr	r3, [pc, #92]	@ (80035f8 <HAL_ADC_MspInit+0x90>)
 800359c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	4b13      	ldr	r3, [pc, #76]	@ (80035f8 <HAL_ADC_MspInit+0x90>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ae:	4a12      	ldr	r2, [pc, #72]	@ (80035f8 <HAL_ADC_MspInit+0x90>)
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035b6:	4b10      	ldr	r3, [pc, #64]	@ (80035f8 <HAL_ADC_MspInit+0x90>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035c2:	2340      	movs	r3, #64	@ 0x40
 80035c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035c6:	2303      	movs	r3, #3
 80035c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ce:	f107 0314 	add.w	r3, r7, #20
 80035d2:	4619      	mov	r1, r3
 80035d4:	4809      	ldr	r0, [pc, #36]	@ (80035fc <HAL_ADC_MspInit+0x94>)
 80035d6:	f001 f913 	bl	8004800 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 14, 0);
 80035da:	2200      	movs	r2, #0
 80035dc:	210e      	movs	r1, #14
 80035de:	2012      	movs	r0, #18
 80035e0:	f001 f852 	bl	8004688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80035e4:	2012      	movs	r0, #18
 80035e6:	f001 f86b 	bl	80046c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80035ea:	bf00      	nop
 80035ec:	3728      	adds	r7, #40	@ 0x28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40012000 	.word	0x40012000
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40020000 	.word	0x40020000

08003600 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003608:	f107 030c 	add.w	r3, r7, #12
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	60da      	str	r2, [r3, #12]
 8003616:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a10      	ldr	r2, [pc, #64]	@ (8003660 <HAL_RTC_MspInit+0x60>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d119      	bne.n	8003656 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003622:	2302      	movs	r3, #2
 8003624:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003626:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800362a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800362c:	f107 030c 	add.w	r3, r7, #12
 8003630:	4618      	mov	r0, r3
 8003632:	f001 ff29 	bl	8005488 <HAL_RCCEx_PeriphCLKConfig>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800363c:	f7fe fc7a 	bl	8001f34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003640:	4b08      	ldr	r3, [pc, #32]	@ (8003664 <HAL_RTC_MspInit+0x64>)
 8003642:	2201      	movs	r2, #1
 8003644:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 14, 0);
 8003646:	2200      	movs	r2, #0
 8003648:	210e      	movs	r1, #14
 800364a:	2029      	movs	r0, #41	@ 0x29
 800364c:	f001 f81c 	bl	8004688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003650:	2029      	movs	r0, #41	@ 0x29
 8003652:	f001 f835 	bl	80046c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003656:	bf00      	nop
 8003658:	3720      	adds	r7, #32
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40002800 	.word	0x40002800
 8003664:	42470e3c 	.word	0x42470e3c

08003668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08e      	sub	sp, #56	@ 0x38
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003670:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	609a      	str	r2, [r3, #8]
 800367c:	60da      	str	r2, [r3, #12]
 800367e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a57      	ldr	r2, [pc, #348]	@ (80037e4 <HAL_UART_MspInit+0x17c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d135      	bne.n	80036f6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	623b      	str	r3, [r7, #32]
 800368e:	4b56      	ldr	r3, [pc, #344]	@ (80037e8 <HAL_UART_MspInit+0x180>)
 8003690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003692:	4a55      	ldr	r2, [pc, #340]	@ (80037e8 <HAL_UART_MspInit+0x180>)
 8003694:	f043 0310 	orr.w	r3, r3, #16
 8003698:	6453      	str	r3, [r2, #68]	@ 0x44
 800369a:	4b53      	ldr	r3, [pc, #332]	@ (80037e8 <HAL_UART_MspInit+0x180>)
 800369c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369e:	f003 0310 	and.w	r3, r3, #16
 80036a2:	623b      	str	r3, [r7, #32]
 80036a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
 80036aa:	4b4f      	ldr	r3, [pc, #316]	@ (80037e8 <HAL_UART_MspInit+0x180>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ae:	4a4e      	ldr	r2, [pc, #312]	@ (80037e8 <HAL_UART_MspInit+0x180>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036b6:	4b4c      	ldr	r3, [pc, #304]	@ (80037e8 <HAL_UART_MspInit+0x180>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	61fb      	str	r3, [r7, #28]
 80036c0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80036c2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80036c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c8:	2302      	movs	r3, #2
 80036ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d0:	2303      	movs	r3, #3
 80036d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036d4:	2307      	movs	r3, #7
 80036d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036dc:	4619      	mov	r1, r3
 80036de:	4843      	ldr	r0, [pc, #268]	@ (80037ec <HAL_UART_MspInit+0x184>)
 80036e0:	f001 f88e 	bl	8004800 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 80036e4:	2200      	movs	r2, #0
 80036e6:	210e      	movs	r1, #14
 80036e8:	2025      	movs	r0, #37	@ 0x25
 80036ea:	f000 ffcd 	bl	8004688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036ee:	2025      	movs	r0, #37	@ 0x25
 80036f0:	f000 ffe6 	bl	80046c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80036f4:	e072      	b.n	80037dc <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a3d      	ldr	r2, [pc, #244]	@ (80037f0 <HAL_UART_MspInit+0x188>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d134      	bne.n	800376a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003700:	2300      	movs	r3, #0
 8003702:	61bb      	str	r3, [r7, #24]
 8003704:	4b38      	ldr	r3, [pc, #224]	@ (80037e8 <HAL_UART_MspInit+0x180>)
 8003706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003708:	4a37      	ldr	r2, [pc, #220]	@ (80037e8 <HAL_UART_MspInit+0x180>)
 800370a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800370e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003710:	4b35      	ldr	r3, [pc, #212]	@ (80037e8 <HAL_UART_MspInit+0x180>)
 8003712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	4b31      	ldr	r3, [pc, #196]	@ (80037e8 <HAL_UART_MspInit+0x180>)
 8003722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003724:	4a30      	ldr	r2, [pc, #192]	@ (80037e8 <HAL_UART_MspInit+0x180>)
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	6313      	str	r3, [r2, #48]	@ 0x30
 800372c:	4b2e      	ldr	r3, [pc, #184]	@ (80037e8 <HAL_UART_MspInit+0x180>)
 800372e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003738:	230c      	movs	r3, #12
 800373a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373c:	2302      	movs	r3, #2
 800373e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003740:	2300      	movs	r3, #0
 8003742:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003744:	2303      	movs	r3, #3
 8003746:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003748:	2307      	movs	r3, #7
 800374a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800374c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003750:	4619      	mov	r1, r3
 8003752:	4826      	ldr	r0, [pc, #152]	@ (80037ec <HAL_UART_MspInit+0x184>)
 8003754:	f001 f854 	bl	8004800 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 14, 0);
 8003758:	2200      	movs	r2, #0
 800375a:	210e      	movs	r1, #14
 800375c:	2026      	movs	r0, #38	@ 0x26
 800375e:	f000 ff93 	bl	8004688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003762:	2026      	movs	r0, #38	@ 0x26
 8003764:	f000 ffac 	bl	80046c0 <HAL_NVIC_EnableIRQ>
}
 8003768:	e038      	b.n	80037dc <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a21      	ldr	r2, [pc, #132]	@ (80037f4 <HAL_UART_MspInit+0x18c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d133      	bne.n	80037dc <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003774:	2300      	movs	r3, #0
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	4b1b      	ldr	r3, [pc, #108]	@ (80037e8 <HAL_UART_MspInit+0x180>)
 800377a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377c:	4a1a      	ldr	r2, [pc, #104]	@ (80037e8 <HAL_UART_MspInit+0x180>)
 800377e:	f043 0320 	orr.w	r3, r3, #32
 8003782:	6453      	str	r3, [r2, #68]	@ 0x44
 8003784:	4b18      	ldr	r3, [pc, #96]	@ (80037e8 <HAL_UART_MspInit+0x180>)
 8003786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	613b      	str	r3, [r7, #16]
 800378e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	4b14      	ldr	r3, [pc, #80]	@ (80037e8 <HAL_UART_MspInit+0x180>)
 8003796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003798:	4a13      	ldr	r2, [pc, #76]	@ (80037e8 <HAL_UART_MspInit+0x180>)
 800379a:	f043 0304 	orr.w	r3, r3, #4
 800379e:	6313      	str	r3, [r2, #48]	@ 0x30
 80037a0:	4b11      	ldr	r3, [pc, #68]	@ (80037e8 <HAL_UART_MspInit+0x180>)
 80037a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037ac:	23c0      	movs	r3, #192	@ 0xc0
 80037ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b0:	2302      	movs	r3, #2
 80037b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b8:	2303      	movs	r3, #3
 80037ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80037bc:	2308      	movs	r3, #8
 80037be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037c4:	4619      	mov	r1, r3
 80037c6:	480c      	ldr	r0, [pc, #48]	@ (80037f8 <HAL_UART_MspInit+0x190>)
 80037c8:	f001 f81a 	bl	8004800 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 14, 0);
 80037cc:	2200      	movs	r2, #0
 80037ce:	210e      	movs	r1, #14
 80037d0:	2047      	movs	r0, #71	@ 0x47
 80037d2:	f000 ff59 	bl	8004688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80037d6:	2047      	movs	r0, #71	@ 0x47
 80037d8:	f000 ff72 	bl	80046c0 <HAL_NVIC_EnableIRQ>
}
 80037dc:	bf00      	nop
 80037de:	3738      	adds	r7, #56	@ 0x38
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40011000 	.word	0x40011000
 80037e8:	40023800 	.word	0x40023800
 80037ec:	40020000 	.word	0x40020000
 80037f0:	40004400 	.word	0x40004400
 80037f4:	40011400 	.word	0x40011400
 80037f8:	40020800 	.word	0x40020800

080037fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08c      	sub	sp, #48	@ 0x30
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800380c:	2300      	movs	r3, #0
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	4b2e      	ldr	r3, [pc, #184]	@ (80038cc <HAL_InitTick+0xd0>)
 8003812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003814:	4a2d      	ldr	r2, [pc, #180]	@ (80038cc <HAL_InitTick+0xd0>)
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	6453      	str	r3, [r2, #68]	@ 0x44
 800381c:	4b2b      	ldr	r3, [pc, #172]	@ (80038cc <HAL_InitTick+0xd0>)
 800381e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003828:	f107 020c 	add.w	r2, r7, #12
 800382c:	f107 0310 	add.w	r3, r7, #16
 8003830:	4611      	mov	r1, r2
 8003832:	4618      	mov	r0, r3
 8003834:	f001 fdf6 	bl	8005424 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003838:	f001 fde0 	bl	80053fc <HAL_RCC_GetPCLK2Freq>
 800383c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800383e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003840:	4a23      	ldr	r2, [pc, #140]	@ (80038d0 <HAL_InitTick+0xd4>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	0c9b      	lsrs	r3, r3, #18
 8003848:	3b01      	subs	r3, #1
 800384a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800384c:	4b21      	ldr	r3, [pc, #132]	@ (80038d4 <HAL_InitTick+0xd8>)
 800384e:	4a22      	ldr	r2, [pc, #136]	@ (80038d8 <HAL_InitTick+0xdc>)
 8003850:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003852:	4b20      	ldr	r3, [pc, #128]	@ (80038d4 <HAL_InitTick+0xd8>)
 8003854:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003858:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800385a:	4a1e      	ldr	r2, [pc, #120]	@ (80038d4 <HAL_InitTick+0xd8>)
 800385c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003860:	4b1c      	ldr	r3, [pc, #112]	@ (80038d4 <HAL_InitTick+0xd8>)
 8003862:	2200      	movs	r2, #0
 8003864:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003866:	4b1b      	ldr	r3, [pc, #108]	@ (80038d4 <HAL_InitTick+0xd8>)
 8003868:	2200      	movs	r2, #0
 800386a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800386c:	4b19      	ldr	r3, [pc, #100]	@ (80038d4 <HAL_InitTick+0xd8>)
 800386e:	2200      	movs	r2, #0
 8003870:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003872:	4818      	ldr	r0, [pc, #96]	@ (80038d4 <HAL_InitTick+0xd8>)
 8003874:	f002 fbf5 	bl	8006062 <HAL_TIM_Base_Init>
 8003878:	4603      	mov	r3, r0
 800387a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800387e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003882:	2b00      	cmp	r3, #0
 8003884:	d11b      	bne.n	80038be <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003886:	4813      	ldr	r0, [pc, #76]	@ (80038d4 <HAL_InitTick+0xd8>)
 8003888:	f002 fc44 	bl	8006114 <HAL_TIM_Base_Start_IT>
 800388c:	4603      	mov	r3, r0
 800388e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003892:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003896:	2b00      	cmp	r3, #0
 8003898:	d111      	bne.n	80038be <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800389a:	2019      	movs	r0, #25
 800389c:	f000 ff10 	bl	80046c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b0f      	cmp	r3, #15
 80038a4:	d808      	bhi.n	80038b8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80038a6:	2200      	movs	r2, #0
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	2019      	movs	r0, #25
 80038ac:	f000 feec 	bl	8004688 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038b0:	4a0a      	ldr	r2, [pc, #40]	@ (80038dc <HAL_InitTick+0xe0>)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e002      	b.n	80038be <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80038be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3730      	adds	r7, #48	@ 0x30
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40023800 	.word	0x40023800
 80038d0:	431bde83 	.word	0x431bde83
 80038d4:	20000b08 	.word	0x20000b08
 80038d8:	40010000 	.word	0x40010000
 80038dc:	20000010 	.word	0x20000010

080038e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038e4:	bf00      	nop
 80038e6:	e7fd      	b.n	80038e4 <NMI_Handler+0x4>

080038e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038ec:	bf00      	nop
 80038ee:	e7fd      	b.n	80038ec <HardFault_Handler+0x4>

080038f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038f4:	bf00      	nop
 80038f6:	e7fd      	b.n	80038f4 <MemManage_Handler+0x4>

080038f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038fc:	bf00      	nop
 80038fe:	e7fd      	b.n	80038fc <BusFault_Handler+0x4>

08003900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003904:	bf00      	nop
 8003906:	e7fd      	b.n	8003904 <UsageFault_Handler+0x4>

08003908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
	...

08003918 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800391c:	4802      	ldr	r0, [pc, #8]	@ (8003928 <ADC_IRQHandler+0x10>)
 800391e:	f000 faa1 	bl	8003e64 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20000204 	.word	0x20000204

0800392c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003930:	4802      	ldr	r0, [pc, #8]	@ (800393c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003932:	f002 fc51 	bl	80061d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000b08 	.word	0x20000b08

08003940 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003944:	4802      	ldr	r0, [pc, #8]	@ (8003950 <USART1_IRQHandler+0x10>)
 8003946:	f002 fecd 	bl	80066e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	2000026c 	.word	0x2000026c

08003954 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003958:	4802      	ldr	r0, [pc, #8]	@ (8003964 <USART2_IRQHandler+0x10>)
 800395a:	f002 fec3 	bl	80066e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	200002b0 	.word	0x200002b0

08003968 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800396c:	4802      	ldr	r0, [pc, #8]	@ (8003978 <RTC_Alarm_IRQHandler+0x10>)
 800396e:	f002 fa6b 	bl	8005e48 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003972:	bf00      	nop
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	2000024c 	.word	0x2000024c

0800397c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003980:	4802      	ldr	r0, [pc, #8]	@ (800398c <USART6_IRQHandler+0x10>)
 8003982:	f002 feaf 	bl	80066e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003986:	bf00      	nop
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	200002f4 	.word	0x200002f4

08003990 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return 1;
 8003994:	2301      	movs	r3, #1
}
 8003996:	4618      	mov	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <_kill>:

int _kill(int pid, int sig)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80039aa:	f007 ffa1 	bl	800b8f0 <__errno>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2216      	movs	r2, #22
 80039b2:	601a      	str	r2, [r3, #0]
  return -1;
 80039b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <_exit>:

void _exit (int status)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039c8:	f04f 31ff 	mov.w	r1, #4294967295
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff ffe7 	bl	80039a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80039d2:	bf00      	nop
 80039d4:	e7fd      	b.n	80039d2 <_exit+0x12>

080039d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b086      	sub	sp, #24
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	e00a      	b.n	80039fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80039e8:	f3af 8000 	nop.w
 80039ec:	4601      	mov	r1, r0
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	60ba      	str	r2, [r7, #8]
 80039f4:	b2ca      	uxtb	r2, r1
 80039f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	3301      	adds	r3, #1
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	dbf0      	blt.n	80039e8 <_read+0x12>
  }

  return len;
 8003a06:	687b      	ldr	r3, [r7, #4]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	e009      	b.n	8003a36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	60ba      	str	r2, [r7, #8]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	3301      	adds	r3, #1
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	dbf1      	blt.n	8003a22 <_write+0x12>
  }
  return len;
 8003a3e:	687b      	ldr	r3, [r7, #4]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <_close>:

int _close(int file)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a70:	605a      	str	r2, [r3, #4]
  return 0;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <_isatty>:

int _isatty(int file)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a88:	2301      	movs	r3, #1
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b085      	sub	sp, #20
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ab8:	4a14      	ldr	r2, [pc, #80]	@ (8003b0c <_sbrk+0x5c>)
 8003aba:	4b15      	ldr	r3, [pc, #84]	@ (8003b10 <_sbrk+0x60>)
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ac4:	4b13      	ldr	r3, [pc, #76]	@ (8003b14 <_sbrk+0x64>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d102      	bne.n	8003ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003acc:	4b11      	ldr	r3, [pc, #68]	@ (8003b14 <_sbrk+0x64>)
 8003ace:	4a12      	ldr	r2, [pc, #72]	@ (8003b18 <_sbrk+0x68>)
 8003ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ad2:	4b10      	ldr	r3, [pc, #64]	@ (8003b14 <_sbrk+0x64>)
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4413      	add	r3, r2
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d207      	bcs.n	8003af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ae0:	f007 ff06 	bl	800b8f0 <__errno>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	220c      	movs	r2, #12
 8003ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003aea:	f04f 33ff 	mov.w	r3, #4294967295
 8003aee:	e009      	b.n	8003b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003af0:	4b08      	ldr	r3, [pc, #32]	@ (8003b14 <_sbrk+0x64>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003af6:	4b07      	ldr	r3, [pc, #28]	@ (8003b14 <_sbrk+0x64>)
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4413      	add	r3, r2
 8003afe:	4a05      	ldr	r2, [pc, #20]	@ (8003b14 <_sbrk+0x64>)
 8003b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b02:	68fb      	ldr	r3, [r7, #12]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20010000 	.word	0x20010000
 8003b10:	00000400 	.word	0x00000400
 8003b14:	20000b50 	.word	0x20000b50
 8003b18:	200049d0 	.word	0x200049d0

08003b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b20:	4b06      	ldr	r3, [pc, #24]	@ (8003b3c <SystemInit+0x20>)
 8003b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b26:	4a05      	ldr	r2, [pc, #20]	@ (8003b3c <SystemInit+0x20>)
 8003b28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b30:	bf00      	nop
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	e000ed00 	.word	0xe000ed00

08003b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003b40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b44:	480d      	ldr	r0, [pc, #52]	@ (8003b7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b46:	490e      	ldr	r1, [pc, #56]	@ (8003b80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b48:	4a0e      	ldr	r2, [pc, #56]	@ (8003b84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b4c:	e002      	b.n	8003b54 <LoopCopyDataInit>

08003b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b52:	3304      	adds	r3, #4

08003b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b58:	d3f9      	bcc.n	8003b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b5a:	4a0b      	ldr	r2, [pc, #44]	@ (8003b88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b5c:	4c0b      	ldr	r4, [pc, #44]	@ (8003b8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b60:	e001      	b.n	8003b66 <LoopFillZerobss>

08003b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b64:	3204      	adds	r2, #4

08003b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b68:	d3fb      	bcc.n	8003b62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b6a:	f7ff ffd7 	bl	8003b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b6e:	f007 fec5 	bl	800b8fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b72:	f7fd fdab 	bl	80016cc <main>
  bx  lr    
 8003b76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b78:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b80:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003b84:	0800ea2c 	.word	0x0800ea2c
  ldr r2, =_sbss
 8003b88:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003b8c:	200049cc 	.word	0x200049cc

08003b90 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b90:	e7fe      	b.n	8003b90 <DMA1_Stream0_IRQHandler>
	...

08003b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b98:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd4 <HAL_Init+0x40>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd4 <HAL_Init+0x40>)
 8003b9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ba2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd4 <HAL_Init+0x40>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd4 <HAL_Init+0x40>)
 8003baa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bb0:	4b08      	ldr	r3, [pc, #32]	@ (8003bd4 <HAL_Init+0x40>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a07      	ldr	r2, [pc, #28]	@ (8003bd4 <HAL_Init+0x40>)
 8003bb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bbc:	2003      	movs	r0, #3
 8003bbe:	f000 fd58 	bl	8004672 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bc2:	200f      	movs	r0, #15
 8003bc4:	f7ff fe1a 	bl	80037fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bc8:	f7ff fca6 	bl	8003518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40023c00 	.word	0x40023c00

08003bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bdc:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <HAL_IncTick+0x20>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	4b06      	ldr	r3, [pc, #24]	@ (8003bfc <HAL_IncTick+0x24>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4413      	add	r3, r2
 8003be8:	4a04      	ldr	r2, [pc, #16]	@ (8003bfc <HAL_IncTick+0x24>)
 8003bea:	6013      	str	r3, [r2, #0]
}
 8003bec:	bf00      	nop
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	20000014 	.word	0x20000014
 8003bfc:	20000b54 	.word	0x20000b54

08003c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  return uwTick;
 8003c04:	4b03      	ldr	r3, [pc, #12]	@ (8003c14 <HAL_GetTick+0x14>)
 8003c06:	681b      	ldr	r3, [r3, #0]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	20000b54 	.word	0x20000b54

08003c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c20:	f7ff ffee 	bl	8003c00 <HAL_GetTick>
 8003c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c30:	d005      	beq.n	8003c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c32:	4b0a      	ldr	r3, [pc, #40]	@ (8003c5c <HAL_Delay+0x44>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c3e:	bf00      	nop
 8003c40:	f7ff ffde 	bl	8003c00 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d8f7      	bhi.n	8003c40 <HAL_Delay+0x28>
  {
  }
}
 8003c50:	bf00      	nop
 8003c52:	bf00      	nop
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000014 	.word	0x20000014

08003c60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e033      	b.n	8003cde <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d109      	bne.n	8003c92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff fc72 	bl	8003568 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	f003 0310 	and.w	r3, r3, #16
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d118      	bne.n	8003cd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003ca6:	f023 0302 	bic.w	r3, r3, #2
 8003caa:	f043 0202 	orr.w	r2, r3, #2
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fb2a 	bl	800430c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	f023 0303 	bic.w	r3, r3, #3
 8003cc6:	f043 0201 	orr.w	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	641a      	str	r2, [r3, #64]	@ 0x40
 8003cce:	e001      	b.n	8003cd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d101      	bne.n	8003d02 <HAL_ADC_Start_IT+0x1a>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e0a1      	b.n	8003e46 <HAL_ADC_Start_IT+0x15e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d018      	beq.n	8003d4a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d28:	4b4a      	ldr	r3, [pc, #296]	@ (8003e54 <HAL_ADC_Start_IT+0x16c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a4a      	ldr	r2, [pc, #296]	@ (8003e58 <HAL_ADC_Start_IT+0x170>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	0c9a      	lsrs	r2, r3, #18
 8003d34:	4613      	mov	r3, r2
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	4413      	add	r3, r2
 8003d3a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003d3c:	e002      	b.n	8003d44 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f9      	bne.n	8003d3e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d169      	bne.n	8003e2c <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003d60:	f023 0301 	bic.w	r3, r3, #1
 8003d64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d007      	beq.n	8003d8a <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003d82:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d96:	d106      	bne.n	8003da6 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9c:	f023 0206 	bic.w	r2, r3, #6
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	645a      	str	r2, [r3, #68]	@ 0x44
 8003da4:	e002      	b.n	8003dac <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003db4:	4b29      	ldr	r3, [pc, #164]	@ (8003e5c <HAL_ADC_Start_IT+0x174>)
 8003db6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003dc0:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003dd0:	f043 0320 	orr.w	r3, r3, #32
 8003dd4:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10f      	bne.n	8003e02 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d129      	bne.n	8003e44 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003dfe:	609a      	str	r2, [r3, #8]
 8003e00:	e020      	b.n	8003e44 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a16      	ldr	r2, [pc, #88]	@ (8003e60 <HAL_ADC_Start_IT+0x178>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d11b      	bne.n	8003e44 <HAL_ADC_Start_IT+0x15c>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d114      	bne.n	8003e44 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003e28:	609a      	str	r2, [r3, #8]
 8003e2a:	e00b      	b.n	8003e44 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e30:	f043 0210 	orr.w	r2, r3, #16
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3c:	f043 0201 	orr.w	r2, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	2000000c 	.word	0x2000000c
 8003e58:	431bde83 	.word	0x431bde83
 8003e5c:	40012300 	.word	0x40012300
 8003e60:	40012000 	.word	0x40012000

08003e64 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	2300      	movs	r3, #0
 8003e72:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d049      	beq.n	8003f2e <HAL_ADC_IRQHandler+0xca>
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d046      	beq.n	8003f2e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d105      	bne.n	8003eb8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d12b      	bne.n	8003f1e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d127      	bne.n	8003f1e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d006      	beq.n	8003eea <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d119      	bne.n	8003f1e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0220 	bic.w	r2, r2, #32
 8003ef8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d105      	bne.n	8003f1e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f16:	f043 0201 	orr.w	r2, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fd fe88 	bl	8001c34 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0212 	mvn.w	r2, #18
 8003f2c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f3c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d057      	beq.n	8003ff4 <HAL_ADC_IRQHandler+0x190>
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d054      	beq.n	8003ff4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d105      	bne.n	8003f62 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d139      	bne.n	8003fe4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f76:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d006      	beq.n	8003f8c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d12b      	bne.n	8003fe4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d124      	bne.n	8003fe4 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d11d      	bne.n	8003fe4 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d119      	bne.n	8003fe4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fbe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d105      	bne.n	8003fe4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fdc:	f043 0201 	orr.w	r2, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 fa8d 	bl	8004504 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f06f 020c 	mvn.w	r2, #12
 8003ff2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004002:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d017      	beq.n	800403a <HAL_ADC_IRQHandler+0x1d6>
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d014      	beq.n	800403a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b01      	cmp	r3, #1
 800401c:	d10d      	bne.n	800403a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004022:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f837 	bl	800409e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0201 	mvn.w	r2, #1
 8004038:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004048:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d015      	beq.n	800407c <HAL_ADC_IRQHandler+0x218>
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d012      	beq.n	800407c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405a:	f043 0202 	orr.w	r2, r3, #2
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f06f 0220 	mvn.w	r2, #32
 800406a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f820 	bl	80040b2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f06f 0220 	mvn.w	r2, #32
 800407a:	601a      	str	r2, [r3, #0]
  }
}
 800407c:	bf00      	nop
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004092:	4618      	mov	r0, r3
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
	...

080040c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d101      	bne.n	80040e4 <HAL_ADC_ConfigChannel+0x1c>
 80040e0:	2302      	movs	r3, #2
 80040e2:	e105      	b.n	80042f0 <HAL_ADC_ConfigChannel+0x228>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b09      	cmp	r3, #9
 80040f2:	d925      	bls.n	8004140 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68d9      	ldr	r1, [r3, #12]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	b29b      	uxth	r3, r3
 8004100:	461a      	mov	r2, r3
 8004102:	4613      	mov	r3, r2
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	4413      	add	r3, r2
 8004108:	3b1e      	subs	r3, #30
 800410a:	2207      	movs	r2, #7
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43da      	mvns	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	400a      	ands	r2, r1
 8004118:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68d9      	ldr	r1, [r3, #12]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	b29b      	uxth	r3, r3
 800412a:	4618      	mov	r0, r3
 800412c:	4603      	mov	r3, r0
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	4403      	add	r3, r0
 8004132:	3b1e      	subs	r3, #30
 8004134:	409a      	lsls	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	60da      	str	r2, [r3, #12]
 800413e:	e022      	b.n	8004186 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6919      	ldr	r1, [r3, #16]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	b29b      	uxth	r3, r3
 800414c:	461a      	mov	r2, r3
 800414e:	4613      	mov	r3, r2
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	4413      	add	r3, r2
 8004154:	2207      	movs	r2, #7
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	43da      	mvns	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	400a      	ands	r2, r1
 8004162:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6919      	ldr	r1, [r3, #16]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	b29b      	uxth	r3, r3
 8004174:	4618      	mov	r0, r3
 8004176:	4603      	mov	r3, r0
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	4403      	add	r3, r0
 800417c:	409a      	lsls	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b06      	cmp	r3, #6
 800418c:	d824      	bhi.n	80041d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	3b05      	subs	r3, #5
 80041a0:	221f      	movs	r2, #31
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	43da      	mvns	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	400a      	ands	r2, r1
 80041ae:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	4618      	mov	r0, r3
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	3b05      	subs	r3, #5
 80041ca:	fa00 f203 	lsl.w	r2, r0, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80041d6:	e04c      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b0c      	cmp	r3, #12
 80041de:	d824      	bhi.n	800422a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	4613      	mov	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	3b23      	subs	r3, #35	@ 0x23
 80041f2:	221f      	movs	r2, #31
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	43da      	mvns	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	400a      	ands	r2, r1
 8004200:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	b29b      	uxth	r3, r3
 800420e:	4618      	mov	r0, r3
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	3b23      	subs	r3, #35	@ 0x23
 800421c:	fa00 f203 	lsl.w	r2, r0, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	631a      	str	r2, [r3, #48]	@ 0x30
 8004228:	e023      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	3b41      	subs	r3, #65	@ 0x41
 800423c:	221f      	movs	r2, #31
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	43da      	mvns	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	400a      	ands	r2, r1
 800424a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	b29b      	uxth	r3, r3
 8004258:	4618      	mov	r0, r3
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	3b41      	subs	r3, #65	@ 0x41
 8004266:	fa00 f203 	lsl.w	r2, r0, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004272:	4b22      	ldr	r3, [pc, #136]	@ (80042fc <HAL_ADC_ConfigChannel+0x234>)
 8004274:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a21      	ldr	r2, [pc, #132]	@ (8004300 <HAL_ADC_ConfigChannel+0x238>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d109      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x1cc>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b12      	cmp	r3, #18
 8004286:	d105      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a19      	ldr	r2, [pc, #100]	@ (8004300 <HAL_ADC_ConfigChannel+0x238>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d123      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x21e>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b10      	cmp	r3, #16
 80042a4:	d003      	beq.n	80042ae <HAL_ADC_ConfigChannel+0x1e6>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b11      	cmp	r3, #17
 80042ac:	d11b      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2b10      	cmp	r3, #16
 80042c0:	d111      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042c2:	4b10      	ldr	r3, [pc, #64]	@ (8004304 <HAL_ADC_ConfigChannel+0x23c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a10      	ldr	r2, [pc, #64]	@ (8004308 <HAL_ADC_ConfigChannel+0x240>)
 80042c8:	fba2 2303 	umull	r2, r3, r2, r3
 80042cc:	0c9a      	lsrs	r2, r3, #18
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042d8:	e002      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	3b01      	subs	r3, #1
 80042de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f9      	bne.n	80042da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	40012300 	.word	0x40012300
 8004300:	40012000 	.word	0x40012000
 8004304:	2000000c 	.word	0x2000000c
 8004308:	431bde83 	.word	0x431bde83

0800430c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004314:	4b79      	ldr	r3, [pc, #484]	@ (80044fc <ADC_Init+0x1f0>)
 8004316:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	431a      	orrs	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004340:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6859      	ldr	r1, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	021a      	lsls	r2, r3, #8
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004364:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6859      	ldr	r1, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004386:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6899      	ldr	r1, [r3, #8]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439e:	4a58      	ldr	r2, [pc, #352]	@ (8004500 <ADC_Init+0x1f4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d022      	beq.n	80043ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80043b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6899      	ldr	r1, [r3, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80043d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6899      	ldr	r1, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	e00f      	b.n	800440a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80043f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004408:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0202 	bic.w	r2, r2, #2
 8004418:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6899      	ldr	r1, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	7e1b      	ldrb	r3, [r3, #24]
 8004424:	005a      	lsls	r2, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d01b      	beq.n	8004470 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004446:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004456:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6859      	ldr	r1, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004462:	3b01      	subs	r3, #1
 8004464:	035a      	lsls	r2, r3, #13
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	605a      	str	r2, [r3, #4]
 800446e:	e007      	b.n	8004480 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800447e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800448e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	3b01      	subs	r3, #1
 800449c:	051a      	lsls	r2, r3, #20
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80044b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6899      	ldr	r1, [r3, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80044c2:	025a      	lsls	r2, r3, #9
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6899      	ldr	r1, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	029a      	lsls	r2, r3, #10
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	609a      	str	r2, [r3, #8]
}
 80044f0:	bf00      	nop
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	40012300 	.word	0x40012300
 8004500:	0f000001 	.word	0x0f000001

08004504 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004528:	4b0c      	ldr	r3, [pc, #48]	@ (800455c <__NVIC_SetPriorityGrouping+0x44>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004534:	4013      	ands	r3, r2
 8004536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004540:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800454a:	4a04      	ldr	r2, [pc, #16]	@ (800455c <__NVIC_SetPriorityGrouping+0x44>)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	60d3      	str	r3, [r2, #12]
}
 8004550:	bf00      	nop
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	e000ed00 	.word	0xe000ed00

08004560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004564:	4b04      	ldr	r3, [pc, #16]	@ (8004578 <__NVIC_GetPriorityGrouping+0x18>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	0a1b      	lsrs	r3, r3, #8
 800456a:	f003 0307 	and.w	r3, r3, #7
}
 800456e:	4618      	mov	r0, r3
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	e000ed00 	.word	0xe000ed00

0800457c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	4603      	mov	r3, r0
 8004584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458a:	2b00      	cmp	r3, #0
 800458c:	db0b      	blt.n	80045a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800458e:	79fb      	ldrb	r3, [r7, #7]
 8004590:	f003 021f 	and.w	r2, r3, #31
 8004594:	4907      	ldr	r1, [pc, #28]	@ (80045b4 <__NVIC_EnableIRQ+0x38>)
 8004596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459a:	095b      	lsrs	r3, r3, #5
 800459c:	2001      	movs	r0, #1
 800459e:	fa00 f202 	lsl.w	r2, r0, r2
 80045a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	e000e100 	.word	0xe000e100

080045b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	4603      	mov	r3, r0
 80045c0:	6039      	str	r1, [r7, #0]
 80045c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	db0a      	blt.n	80045e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	490c      	ldr	r1, [pc, #48]	@ (8004604 <__NVIC_SetPriority+0x4c>)
 80045d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d6:	0112      	lsls	r2, r2, #4
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	440b      	add	r3, r1
 80045dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045e0:	e00a      	b.n	80045f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	4908      	ldr	r1, [pc, #32]	@ (8004608 <__NVIC_SetPriority+0x50>)
 80045e8:	79fb      	ldrb	r3, [r7, #7]
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	3b04      	subs	r3, #4
 80045f0:	0112      	lsls	r2, r2, #4
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	440b      	add	r3, r1
 80045f6:	761a      	strb	r2, [r3, #24]
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	e000e100 	.word	0xe000e100
 8004608:	e000ed00 	.word	0xe000ed00

0800460c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800460c:	b480      	push	{r7}
 800460e:	b089      	sub	sp, #36	@ 0x24
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f1c3 0307 	rsb	r3, r3, #7
 8004626:	2b04      	cmp	r3, #4
 8004628:	bf28      	it	cs
 800462a:	2304      	movcs	r3, #4
 800462c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	3304      	adds	r3, #4
 8004632:	2b06      	cmp	r3, #6
 8004634:	d902      	bls.n	800463c <NVIC_EncodePriority+0x30>
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	3b03      	subs	r3, #3
 800463a:	e000      	b.n	800463e <NVIC_EncodePriority+0x32>
 800463c:	2300      	movs	r3, #0
 800463e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004640:	f04f 32ff 	mov.w	r2, #4294967295
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43da      	mvns	r2, r3
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	401a      	ands	r2, r3
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004654:	f04f 31ff 	mov.w	r1, #4294967295
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	fa01 f303 	lsl.w	r3, r1, r3
 800465e:	43d9      	mvns	r1, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004664:	4313      	orrs	r3, r2
         );
}
 8004666:	4618      	mov	r0, r3
 8004668:	3724      	adds	r7, #36	@ 0x24
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff ff4c 	bl	8004518 <__NVIC_SetPriorityGrouping>
}
 8004680:	bf00      	nop
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800469a:	f7ff ff61 	bl	8004560 <__NVIC_GetPriorityGrouping>
 800469e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	6978      	ldr	r0, [r7, #20]
 80046a6:	f7ff ffb1 	bl	800460c <NVIC_EncodePriority>
 80046aa:	4602      	mov	r2, r0
 80046ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046b0:	4611      	mov	r1, r2
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff ff80 	bl	80045b8 <__NVIC_SetPriority>
}
 80046b8:	bf00      	nop
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff ff54 	bl	800457c <__NVIC_EnableIRQ>
}
 80046d4:	bf00      	nop
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046ea:	f7ff fa89 	bl	8003c00 <HAL_GetTick>
 80046ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d008      	beq.n	800470e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2280      	movs	r2, #128	@ 0x80
 8004700:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e052      	b.n	80047b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0216 	bic.w	r2, r2, #22
 800471c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695a      	ldr	r2, [r3, #20]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800472c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	d103      	bne.n	800473e <HAL_DMA_Abort+0x62>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800473a:	2b00      	cmp	r3, #0
 800473c:	d007      	beq.n	800474e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0208 	bic.w	r2, r2, #8
 800474c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0201 	bic.w	r2, r2, #1
 800475c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800475e:	e013      	b.n	8004788 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004760:	f7ff fa4e 	bl	8003c00 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b05      	cmp	r3, #5
 800476c:	d90c      	bls.n	8004788 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2220      	movs	r2, #32
 8004772:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2203      	movs	r2, #3
 8004778:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e015      	b.n	80047b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1e4      	bne.n	8004760 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800479a:	223f      	movs	r2, #63	@ 0x3f
 800479c:	409a      	lsls	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d004      	beq.n	80047da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2280      	movs	r2, #128	@ 0x80
 80047d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e00c      	b.n	80047f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2205      	movs	r2, #5
 80047de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0201 	bic.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004800:	b480      	push	{r7}
 8004802:	b089      	sub	sp, #36	@ 0x24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800480e:	2300      	movs	r3, #0
 8004810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004812:	2300      	movs	r3, #0
 8004814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
 800481a:	e159      	b.n	8004ad0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800481c:	2201      	movs	r2, #1
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4013      	ands	r3, r2
 800482e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	429a      	cmp	r2, r3
 8004836:	f040 8148 	bne.w	8004aca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	2b01      	cmp	r3, #1
 8004844:	d005      	beq.n	8004852 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800484e:	2b02      	cmp	r3, #2
 8004850:	d130      	bne.n	80048b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	2203      	movs	r2, #3
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	43db      	mvns	r3, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4013      	ands	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	4313      	orrs	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004888:	2201      	movs	r2, #1
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	43db      	mvns	r3, r3
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	4013      	ands	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	091b      	lsrs	r3, r3, #4
 800489e:	f003 0201 	and.w	r2, r3, #1
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 0303 	and.w	r3, r3, #3
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d017      	beq.n	80048f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	2203      	movs	r2, #3
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	43db      	mvns	r3, r3
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	4013      	ands	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f003 0303 	and.w	r3, r3, #3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d123      	bne.n	8004944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	08da      	lsrs	r2, r3, #3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	3208      	adds	r2, #8
 8004904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	220f      	movs	r2, #15
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	43db      	mvns	r3, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	4013      	ands	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	4313      	orrs	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	08da      	lsrs	r2, r3, #3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3208      	adds	r2, #8
 800493e:	69b9      	ldr	r1, [r7, #24]
 8004940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	2203      	movs	r2, #3
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	43db      	mvns	r3, r3
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	4013      	ands	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f003 0203 	and.w	r2, r3, #3
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4313      	orrs	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 80a2 	beq.w	8004aca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	4b57      	ldr	r3, [pc, #348]	@ (8004ae8 <HAL_GPIO_Init+0x2e8>)
 800498c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498e:	4a56      	ldr	r2, [pc, #344]	@ (8004ae8 <HAL_GPIO_Init+0x2e8>)
 8004990:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004994:	6453      	str	r3, [r2, #68]	@ 0x44
 8004996:	4b54      	ldr	r3, [pc, #336]	@ (8004ae8 <HAL_GPIO_Init+0x2e8>)
 8004998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049a2:	4a52      	ldr	r2, [pc, #328]	@ (8004aec <HAL_GPIO_Init+0x2ec>)
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	089b      	lsrs	r3, r3, #2
 80049a8:	3302      	adds	r3, #2
 80049aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	220f      	movs	r2, #15
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	43db      	mvns	r3, r3
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	4013      	ands	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a49      	ldr	r2, [pc, #292]	@ (8004af0 <HAL_GPIO_Init+0x2f0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d019      	beq.n	8004a02 <HAL_GPIO_Init+0x202>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a48      	ldr	r2, [pc, #288]	@ (8004af4 <HAL_GPIO_Init+0x2f4>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d013      	beq.n	80049fe <HAL_GPIO_Init+0x1fe>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a47      	ldr	r2, [pc, #284]	@ (8004af8 <HAL_GPIO_Init+0x2f8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00d      	beq.n	80049fa <HAL_GPIO_Init+0x1fa>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a46      	ldr	r2, [pc, #280]	@ (8004afc <HAL_GPIO_Init+0x2fc>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d007      	beq.n	80049f6 <HAL_GPIO_Init+0x1f6>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a45      	ldr	r2, [pc, #276]	@ (8004b00 <HAL_GPIO_Init+0x300>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d101      	bne.n	80049f2 <HAL_GPIO_Init+0x1f2>
 80049ee:	2304      	movs	r3, #4
 80049f0:	e008      	b.n	8004a04 <HAL_GPIO_Init+0x204>
 80049f2:	2307      	movs	r3, #7
 80049f4:	e006      	b.n	8004a04 <HAL_GPIO_Init+0x204>
 80049f6:	2303      	movs	r3, #3
 80049f8:	e004      	b.n	8004a04 <HAL_GPIO_Init+0x204>
 80049fa:	2302      	movs	r3, #2
 80049fc:	e002      	b.n	8004a04 <HAL_GPIO_Init+0x204>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <HAL_GPIO_Init+0x204>
 8004a02:	2300      	movs	r3, #0
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	f002 0203 	and.w	r2, r2, #3
 8004a0a:	0092      	lsls	r2, r2, #2
 8004a0c:	4093      	lsls	r3, r2
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a14:	4935      	ldr	r1, [pc, #212]	@ (8004aec <HAL_GPIO_Init+0x2ec>)
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	089b      	lsrs	r3, r3, #2
 8004a1a:	3302      	adds	r3, #2
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a22:	4b38      	ldr	r3, [pc, #224]	@ (8004b04 <HAL_GPIO_Init+0x304>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	43db      	mvns	r3, r3
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a46:	4a2f      	ldr	r2, [pc, #188]	@ (8004b04 <HAL_GPIO_Init+0x304>)
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8004b04 <HAL_GPIO_Init+0x304>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	43db      	mvns	r3, r3
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a70:	4a24      	ldr	r2, [pc, #144]	@ (8004b04 <HAL_GPIO_Init+0x304>)
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a76:	4b23      	ldr	r3, [pc, #140]	@ (8004b04 <HAL_GPIO_Init+0x304>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	43db      	mvns	r3, r3
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	4013      	ands	r3, r2
 8004a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a9a:	4a1a      	ldr	r2, [pc, #104]	@ (8004b04 <HAL_GPIO_Init+0x304>)
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004aa0:	4b18      	ldr	r3, [pc, #96]	@ (8004b04 <HAL_GPIO_Init+0x304>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	4013      	ands	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ac4:	4a0f      	ldr	r2, [pc, #60]	@ (8004b04 <HAL_GPIO_Init+0x304>)
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	3301      	adds	r3, #1
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	2b0f      	cmp	r3, #15
 8004ad4:	f67f aea2 	bls.w	800481c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop
 8004adc:	3724      	adds	r7, #36	@ 0x24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	40013800 	.word	0x40013800
 8004af0:	40020000 	.word	0x40020000
 8004af4:	40020400 	.word	0x40020400
 8004af8:	40020800 	.word	0x40020800
 8004afc:	40020c00 	.word	0x40020c00
 8004b00:	40021000 	.word	0x40021000
 8004b04:	40013c00 	.word	0x40013c00

08004b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	807b      	strh	r3, [r7, #2]
 8004b14:	4613      	mov	r3, r2
 8004b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b18:	787b      	ldrb	r3, [r7, #1]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b1e:	887a      	ldrh	r2, [r7, #2]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b24:	e003      	b.n	8004b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b26:	887b      	ldrh	r3, [r7, #2]
 8004b28:	041a      	lsls	r2, r3, #16
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	619a      	str	r2, [r3, #24]
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
	...

08004b3c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004b48:	4b09      	ldr	r3, [pc, #36]	@ (8004b70 <HAL_PWR_EnterSLEEPMode+0x34>)
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	4a08      	ldr	r2, [pc, #32]	@ (8004b70 <HAL_PWR_EnterSLEEPMode+0x34>)
 8004b4e:	f023 0304 	bic.w	r3, r3, #4
 8004b52:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d101      	bne.n	8004b5e <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8004b5a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8004b5c:	e002      	b.n	8004b64 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8004b5e:	bf40      	sev
    __WFE();
 8004b60:	bf20      	wfe
    __WFE();
 8004b62:	bf20      	wfe
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	e000ed00 	.word	0xe000ed00

08004b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e267      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d075      	beq.n	8004c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b92:	4b88      	ldr	r3, [pc, #544]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 030c 	and.w	r3, r3, #12
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d00c      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b9e:	4b85      	ldr	r3, [pc, #532]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ba6:	2b08      	cmp	r3, #8
 8004ba8:	d112      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004baa:	4b82      	ldr	r3, [pc, #520]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bb6:	d10b      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb8:	4b7e      	ldr	r3, [pc, #504]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d05b      	beq.n	8004c7c <HAL_RCC_OscConfig+0x108>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d157      	bne.n	8004c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e242      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bd8:	d106      	bne.n	8004be8 <HAL_RCC_OscConfig+0x74>
 8004bda:	4b76      	ldr	r3, [pc, #472]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a75      	ldr	r2, [pc, #468]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004be4:	6013      	str	r3, [r2, #0]
 8004be6:	e01d      	b.n	8004c24 <HAL_RCC_OscConfig+0xb0>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bf0:	d10c      	bne.n	8004c0c <HAL_RCC_OscConfig+0x98>
 8004bf2:	4b70      	ldr	r3, [pc, #448]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a6f      	ldr	r2, [pc, #444]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004bf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	4b6d      	ldr	r3, [pc, #436]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a6c      	ldr	r2, [pc, #432]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	e00b      	b.n	8004c24 <HAL_RCC_OscConfig+0xb0>
 8004c0c:	4b69      	ldr	r3, [pc, #420]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a68      	ldr	r2, [pc, #416]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004c12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	4b66      	ldr	r3, [pc, #408]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a65      	ldr	r2, [pc, #404]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004c1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d013      	beq.n	8004c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c2c:	f7fe ffe8 	bl	8003c00 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c34:	f7fe ffe4 	bl	8003c00 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b64      	cmp	r3, #100	@ 0x64
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e207      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c46:	4b5b      	ldr	r3, [pc, #364]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0f0      	beq.n	8004c34 <HAL_RCC_OscConfig+0xc0>
 8004c52:	e014      	b.n	8004c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c54:	f7fe ffd4 	bl	8003c00 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c5c:	f7fe ffd0 	bl	8003c00 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b64      	cmp	r3, #100	@ 0x64
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e1f3      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c6e:	4b51      	ldr	r3, [pc, #324]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f0      	bne.n	8004c5c <HAL_RCC_OscConfig+0xe8>
 8004c7a:	e000      	b.n	8004c7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d063      	beq.n	8004d52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c8a:	4b4a      	ldr	r3, [pc, #296]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 030c 	and.w	r3, r3, #12
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00b      	beq.n	8004cae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c96:	4b47      	ldr	r3, [pc, #284]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c9e:	2b08      	cmp	r3, #8
 8004ca0:	d11c      	bne.n	8004cdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ca2:	4b44      	ldr	r3, [pc, #272]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d116      	bne.n	8004cdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cae:	4b41      	ldr	r3, [pc, #260]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d005      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x152>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d001      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e1c7      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc6:	4b3b      	ldr	r3, [pc, #236]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	4937      	ldr	r1, [pc, #220]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cda:	e03a      	b.n	8004d52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d020      	beq.n	8004d26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ce4:	4b34      	ldr	r3, [pc, #208]	@ (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cea:	f7fe ff89 	bl	8003c00 <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf0:	e008      	b.n	8004d04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cf2:	f7fe ff85 	bl	8003c00 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e1a8      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d04:	4b2b      	ldr	r3, [pc, #172]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0f0      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d10:	4b28      	ldr	r3, [pc, #160]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	4925      	ldr	r1, [pc, #148]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	600b      	str	r3, [r1, #0]
 8004d24:	e015      	b.n	8004d52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d26:	4b24      	ldr	r3, [pc, #144]	@ (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2c:	f7fe ff68 	bl	8003c00 <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d34:	f7fe ff64 	bl	8003c00 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e187      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d46:	4b1b      	ldr	r3, [pc, #108]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1f0      	bne.n	8004d34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0308 	and.w	r3, r3, #8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d036      	beq.n	8004dcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d016      	beq.n	8004d94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d66:	4b15      	ldr	r3, [pc, #84]	@ (8004dbc <HAL_RCC_OscConfig+0x248>)
 8004d68:	2201      	movs	r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6c:	f7fe ff48 	bl	8003c00 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d74:	f7fe ff44 	bl	8003c00 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e167      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d86:	4b0b      	ldr	r3, [pc, #44]	@ (8004db4 <HAL_RCC_OscConfig+0x240>)
 8004d88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0f0      	beq.n	8004d74 <HAL_RCC_OscConfig+0x200>
 8004d92:	e01b      	b.n	8004dcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d94:	4b09      	ldr	r3, [pc, #36]	@ (8004dbc <HAL_RCC_OscConfig+0x248>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d9a:	f7fe ff31 	bl	8003c00 <HAL_GetTick>
 8004d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004da0:	e00e      	b.n	8004dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004da2:	f7fe ff2d 	bl	8003c00 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d907      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e150      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
 8004db4:	40023800 	.word	0x40023800
 8004db8:	42470000 	.word	0x42470000
 8004dbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc0:	4b88      	ldr	r3, [pc, #544]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004dc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1ea      	bne.n	8004da2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 8097 	beq.w	8004f08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dde:	4b81      	ldr	r3, [pc, #516]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10f      	bne.n	8004e0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dea:	2300      	movs	r3, #0
 8004dec:	60bb      	str	r3, [r7, #8]
 8004dee:	4b7d      	ldr	r3, [pc, #500]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df2:	4a7c      	ldr	r2, [pc, #496]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004df4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dfa:	4b7a      	ldr	r3, [pc, #488]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e02:	60bb      	str	r3, [r7, #8]
 8004e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e06:	2301      	movs	r3, #1
 8004e08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e0a:	4b77      	ldr	r3, [pc, #476]	@ (8004fe8 <HAL_RCC_OscConfig+0x474>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d118      	bne.n	8004e48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e16:	4b74      	ldr	r3, [pc, #464]	@ (8004fe8 <HAL_RCC_OscConfig+0x474>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a73      	ldr	r2, [pc, #460]	@ (8004fe8 <HAL_RCC_OscConfig+0x474>)
 8004e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e22:	f7fe feed 	bl	8003c00 <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e2a:	f7fe fee9 	bl	8003c00 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e10c      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3c:	4b6a      	ldr	r3, [pc, #424]	@ (8004fe8 <HAL_RCC_OscConfig+0x474>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0f0      	beq.n	8004e2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d106      	bne.n	8004e5e <HAL_RCC_OscConfig+0x2ea>
 8004e50:	4b64      	ldr	r3, [pc, #400]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e54:	4a63      	ldr	r2, [pc, #396]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004e56:	f043 0301 	orr.w	r3, r3, #1
 8004e5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e5c:	e01c      	b.n	8004e98 <HAL_RCC_OscConfig+0x324>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2b05      	cmp	r3, #5
 8004e64:	d10c      	bne.n	8004e80 <HAL_RCC_OscConfig+0x30c>
 8004e66:	4b5f      	ldr	r3, [pc, #380]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e6a:	4a5e      	ldr	r2, [pc, #376]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004e6c:	f043 0304 	orr.w	r3, r3, #4
 8004e70:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e72:	4b5c      	ldr	r3, [pc, #368]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e76:	4a5b      	ldr	r2, [pc, #364]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004e78:	f043 0301 	orr.w	r3, r3, #1
 8004e7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e7e:	e00b      	b.n	8004e98 <HAL_RCC_OscConfig+0x324>
 8004e80:	4b58      	ldr	r3, [pc, #352]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e84:	4a57      	ldr	r2, [pc, #348]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004e86:	f023 0301 	bic.w	r3, r3, #1
 8004e8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e8c:	4b55      	ldr	r3, [pc, #340]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e90:	4a54      	ldr	r2, [pc, #336]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004e92:	f023 0304 	bic.w	r3, r3, #4
 8004e96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d015      	beq.n	8004ecc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea0:	f7fe feae 	bl	8003c00 <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea6:	e00a      	b.n	8004ebe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ea8:	f7fe feaa 	bl	8003c00 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e0cb      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ebe:	4b49      	ldr	r3, [pc, #292]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0ee      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x334>
 8004eca:	e014      	b.n	8004ef6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ecc:	f7fe fe98 	bl	8003c00 <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ed2:	e00a      	b.n	8004eea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ed4:	f7fe fe94 	bl	8003c00 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e0b5      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eea:	4b3e      	ldr	r3, [pc, #248]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1ee      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ef6:	7dfb      	ldrb	r3, [r7, #23]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d105      	bne.n	8004f08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004efc:	4b39      	ldr	r3, [pc, #228]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f00:	4a38      	ldr	r2, [pc, #224]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004f02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 80a1 	beq.w	8005054 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f12:	4b34      	ldr	r3, [pc, #208]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 030c 	and.w	r3, r3, #12
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d05c      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d141      	bne.n	8004faa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f26:	4b31      	ldr	r3, [pc, #196]	@ (8004fec <HAL_RCC_OscConfig+0x478>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2c:	f7fe fe68 	bl	8003c00 <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f34:	f7fe fe64 	bl	8003c00 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e087      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f46:	4b27      	ldr	r3, [pc, #156]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f0      	bne.n	8004f34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69da      	ldr	r2, [r3, #28]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f60:	019b      	lsls	r3, r3, #6
 8004f62:	431a      	orrs	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f68:	085b      	lsrs	r3, r3, #1
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	041b      	lsls	r3, r3, #16
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f74:	061b      	lsls	r3, r3, #24
 8004f76:	491b      	ldr	r1, [pc, #108]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004fec <HAL_RCC_OscConfig+0x478>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f82:	f7fe fe3d 	bl	8003c00 <HAL_GetTick>
 8004f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f88:	e008      	b.n	8004f9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f8a:	f7fe fe39 	bl	8003c00 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e05c      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f9c:	4b11      	ldr	r3, [pc, #68]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0f0      	beq.n	8004f8a <HAL_RCC_OscConfig+0x416>
 8004fa8:	e054      	b.n	8005054 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004faa:	4b10      	ldr	r3, [pc, #64]	@ (8004fec <HAL_RCC_OscConfig+0x478>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb0:	f7fe fe26 	bl	8003c00 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fb8:	f7fe fe22 	bl	8003c00 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e045      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fca:	4b06      	ldr	r3, [pc, #24]	@ (8004fe4 <HAL_RCC_OscConfig+0x470>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1f0      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x444>
 8004fd6:	e03d      	b.n	8005054 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d107      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e038      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	40007000 	.word	0x40007000
 8004fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8005060 <HAL_RCC_OscConfig+0x4ec>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d028      	beq.n	8005050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005008:	429a      	cmp	r2, r3
 800500a:	d121      	bne.n	8005050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005016:	429a      	cmp	r2, r3
 8005018:	d11a      	bne.n	8005050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005020:	4013      	ands	r3, r2
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005028:	4293      	cmp	r3, r2
 800502a:	d111      	bne.n	8005050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005036:	085b      	lsrs	r3, r3, #1
 8005038:	3b01      	subs	r3, #1
 800503a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800503c:	429a      	cmp	r2, r3
 800503e:	d107      	bne.n	8005050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800504c:	429a      	cmp	r2, r3
 800504e:	d001      	beq.n	8005054 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e000      	b.n	8005056 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40023800 	.word	0x40023800

08005064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e0cc      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005078:	4b68      	ldr	r3, [pc, #416]	@ (800521c <HAL_RCC_ClockConfig+0x1b8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d90c      	bls.n	80050a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005086:	4b65      	ldr	r3, [pc, #404]	@ (800521c <HAL_RCC_ClockConfig+0x1b8>)
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800508e:	4b63      	ldr	r3, [pc, #396]	@ (800521c <HAL_RCC_ClockConfig+0x1b8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	429a      	cmp	r2, r3
 800509a:	d001      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e0b8      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d020      	beq.n	80050ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050b8:	4b59      	ldr	r3, [pc, #356]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	4a58      	ldr	r2, [pc, #352]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d005      	beq.n	80050dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050d0:	4b53      	ldr	r3, [pc, #332]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	4a52      	ldr	r2, [pc, #328]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050dc:	4b50      	ldr	r3, [pc, #320]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	494d      	ldr	r1, [pc, #308]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d044      	beq.n	8005184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d107      	bne.n	8005112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005102:	4b47      	ldr	r3, [pc, #284]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d119      	bne.n	8005142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e07f      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b02      	cmp	r3, #2
 8005118:	d003      	beq.n	8005122 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800511e:	2b03      	cmp	r3, #3
 8005120:	d107      	bne.n	8005132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005122:	4b3f      	ldr	r3, [pc, #252]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d109      	bne.n	8005142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e06f      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005132:	4b3b      	ldr	r3, [pc, #236]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e067      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005142:	4b37      	ldr	r3, [pc, #220]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f023 0203 	bic.w	r2, r3, #3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	4934      	ldr	r1, [pc, #208]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005150:	4313      	orrs	r3, r2
 8005152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005154:	f7fe fd54 	bl	8003c00 <HAL_GetTick>
 8005158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515a:	e00a      	b.n	8005172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800515c:	f7fe fd50 	bl	8003c00 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800516a:	4293      	cmp	r3, r2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e04f      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005172:	4b2b      	ldr	r3, [pc, #172]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 020c 	and.w	r2, r3, #12
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	429a      	cmp	r2, r3
 8005182:	d1eb      	bne.n	800515c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005184:	4b25      	ldr	r3, [pc, #148]	@ (800521c <HAL_RCC_ClockConfig+0x1b8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d20c      	bcs.n	80051ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005192:	4b22      	ldr	r3, [pc, #136]	@ (800521c <HAL_RCC_ClockConfig+0x1b8>)
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800519a:	4b20      	ldr	r3, [pc, #128]	@ (800521c <HAL_RCC_ClockConfig+0x1b8>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d001      	beq.n	80051ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e032      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d008      	beq.n	80051ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051b8:	4b19      	ldr	r3, [pc, #100]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	4916      	ldr	r1, [pc, #88]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d009      	beq.n	80051ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051d6:	4b12      	ldr	r3, [pc, #72]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	490e      	ldr	r1, [pc, #56]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051ea:	f000 f821 	bl	8005230 <HAL_RCC_GetSysClockFreq>
 80051ee:	4602      	mov	r2, r0
 80051f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	091b      	lsrs	r3, r3, #4
 80051f6:	f003 030f 	and.w	r3, r3, #15
 80051fa:	490a      	ldr	r1, [pc, #40]	@ (8005224 <HAL_RCC_ClockConfig+0x1c0>)
 80051fc:	5ccb      	ldrb	r3, [r1, r3]
 80051fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005202:	4a09      	ldr	r2, [pc, #36]	@ (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 8005204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005206:	4b09      	ldr	r3, [pc, #36]	@ (800522c <HAL_RCC_ClockConfig+0x1c8>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f7fe faf6 	bl	80037fc <HAL_InitTick>

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	40023c00 	.word	0x40023c00
 8005220:	40023800 	.word	0x40023800
 8005224:	0800e558 	.word	0x0800e558
 8005228:	2000000c 	.word	0x2000000c
 800522c:	20000010 	.word	0x20000010

08005230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005234:	b090      	sub	sp, #64	@ 0x40
 8005236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	637b      	str	r3, [r7, #52]	@ 0x34
 800523c:	2300      	movs	r3, #0
 800523e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005240:	2300      	movs	r3, #0
 8005242:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005248:	4b59      	ldr	r3, [pc, #356]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f003 030c 	and.w	r3, r3, #12
 8005250:	2b08      	cmp	r3, #8
 8005252:	d00d      	beq.n	8005270 <HAL_RCC_GetSysClockFreq+0x40>
 8005254:	2b08      	cmp	r3, #8
 8005256:	f200 80a1 	bhi.w	800539c <HAL_RCC_GetSysClockFreq+0x16c>
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <HAL_RCC_GetSysClockFreq+0x34>
 800525e:	2b04      	cmp	r3, #4
 8005260:	d003      	beq.n	800526a <HAL_RCC_GetSysClockFreq+0x3a>
 8005262:	e09b      	b.n	800539c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005264:	4b53      	ldr	r3, [pc, #332]	@ (80053b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005266:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8005268:	e09b      	b.n	80053a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800526a:	4b53      	ldr	r3, [pc, #332]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800526c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800526e:	e098      	b.n	80053a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005270:	4b4f      	ldr	r3, [pc, #316]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005278:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800527a:	4b4d      	ldr	r3, [pc, #308]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d028      	beq.n	80052d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005286:	4b4a      	ldr	r3, [pc, #296]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	099b      	lsrs	r3, r3, #6
 800528c:	2200      	movs	r2, #0
 800528e:	623b      	str	r3, [r7, #32]
 8005290:	627a      	str	r2, [r7, #36]	@ 0x24
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005298:	2100      	movs	r1, #0
 800529a:	4b47      	ldr	r3, [pc, #284]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800529c:	fb03 f201 	mul.w	r2, r3, r1
 80052a0:	2300      	movs	r3, #0
 80052a2:	fb00 f303 	mul.w	r3, r0, r3
 80052a6:	4413      	add	r3, r2
 80052a8:	4a43      	ldr	r2, [pc, #268]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80052aa:	fba0 1202 	umull	r1, r2, r0, r2
 80052ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052b0:	460a      	mov	r2, r1
 80052b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80052b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052b6:	4413      	add	r3, r2
 80052b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052bc:	2200      	movs	r2, #0
 80052be:	61bb      	str	r3, [r7, #24]
 80052c0:	61fa      	str	r2, [r7, #28]
 80052c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80052ca:	f7fb fce5 	bl	8000c98 <__aeabi_uldivmod>
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	4613      	mov	r3, r2
 80052d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052d6:	e053      	b.n	8005380 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052d8:	4b35      	ldr	r3, [pc, #212]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	099b      	lsrs	r3, r3, #6
 80052de:	2200      	movs	r2, #0
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	617a      	str	r2, [r7, #20]
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80052ea:	f04f 0b00 	mov.w	fp, #0
 80052ee:	4652      	mov	r2, sl
 80052f0:	465b      	mov	r3, fp
 80052f2:	f04f 0000 	mov.w	r0, #0
 80052f6:	f04f 0100 	mov.w	r1, #0
 80052fa:	0159      	lsls	r1, r3, #5
 80052fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005300:	0150      	lsls	r0, r2, #5
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	ebb2 080a 	subs.w	r8, r2, sl
 800530a:	eb63 090b 	sbc.w	r9, r3, fp
 800530e:	f04f 0200 	mov.w	r2, #0
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800531a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800531e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005322:	ebb2 0408 	subs.w	r4, r2, r8
 8005326:	eb63 0509 	sbc.w	r5, r3, r9
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	f04f 0300 	mov.w	r3, #0
 8005332:	00eb      	lsls	r3, r5, #3
 8005334:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005338:	00e2      	lsls	r2, r4, #3
 800533a:	4614      	mov	r4, r2
 800533c:	461d      	mov	r5, r3
 800533e:	eb14 030a 	adds.w	r3, r4, sl
 8005342:	603b      	str	r3, [r7, #0]
 8005344:	eb45 030b 	adc.w	r3, r5, fp
 8005348:	607b      	str	r3, [r7, #4]
 800534a:	f04f 0200 	mov.w	r2, #0
 800534e:	f04f 0300 	mov.w	r3, #0
 8005352:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005356:	4629      	mov	r1, r5
 8005358:	028b      	lsls	r3, r1, #10
 800535a:	4621      	mov	r1, r4
 800535c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005360:	4621      	mov	r1, r4
 8005362:	028a      	lsls	r2, r1, #10
 8005364:	4610      	mov	r0, r2
 8005366:	4619      	mov	r1, r3
 8005368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800536a:	2200      	movs	r2, #0
 800536c:	60bb      	str	r3, [r7, #8]
 800536e:	60fa      	str	r2, [r7, #12]
 8005370:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005374:	f7fb fc90 	bl	8000c98 <__aeabi_uldivmod>
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	4613      	mov	r3, r2
 800537e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005380:	4b0b      	ldr	r3, [pc, #44]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	0c1b      	lsrs	r3, r3, #16
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	3301      	adds	r3, #1
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8005390:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005394:	fbb2 f3f3 	udiv	r3, r2, r3
 8005398:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800539a:	e002      	b.n	80053a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800539c:	4b05      	ldr	r3, [pc, #20]	@ (80053b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800539e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80053a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3740      	adds	r7, #64	@ 0x40
 80053a8:	46bd      	mov	sp, r7
 80053aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ae:	bf00      	nop
 80053b0:	40023800 	.word	0x40023800
 80053b4:	00f42400 	.word	0x00f42400
 80053b8:	02aea540 	.word	0x02aea540

080053bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053c0:	4b03      	ldr	r3, [pc, #12]	@ (80053d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80053c2:	681b      	ldr	r3, [r3, #0]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	2000000c 	.word	0x2000000c

080053d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053d8:	f7ff fff0 	bl	80053bc <HAL_RCC_GetHCLKFreq>
 80053dc:	4602      	mov	r2, r0
 80053de:	4b05      	ldr	r3, [pc, #20]	@ (80053f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	0a9b      	lsrs	r3, r3, #10
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	4903      	ldr	r1, [pc, #12]	@ (80053f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053ea:	5ccb      	ldrb	r3, [r1, r3]
 80053ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40023800 	.word	0x40023800
 80053f8:	0800e568 	.word	0x0800e568

080053fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005400:	f7ff ffdc 	bl	80053bc <HAL_RCC_GetHCLKFreq>
 8005404:	4602      	mov	r2, r0
 8005406:	4b05      	ldr	r3, [pc, #20]	@ (800541c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	0b5b      	lsrs	r3, r3, #13
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	4903      	ldr	r1, [pc, #12]	@ (8005420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005412:	5ccb      	ldrb	r3, [r1, r3]
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005418:	4618      	mov	r0, r3
 800541a:	bd80      	pop	{r7, pc}
 800541c:	40023800 	.word	0x40023800
 8005420:	0800e568 	.word	0x0800e568

08005424 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	220f      	movs	r2, #15
 8005432:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005434:	4b12      	ldr	r3, [pc, #72]	@ (8005480 <HAL_RCC_GetClockConfig+0x5c>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f003 0203 	and.w	r2, r3, #3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005440:	4b0f      	ldr	r3, [pc, #60]	@ (8005480 <HAL_RCC_GetClockConfig+0x5c>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800544c:	4b0c      	ldr	r3, [pc, #48]	@ (8005480 <HAL_RCC_GetClockConfig+0x5c>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005458:	4b09      	ldr	r3, [pc, #36]	@ (8005480 <HAL_RCC_GetClockConfig+0x5c>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	08db      	lsrs	r3, r3, #3
 800545e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005466:	4b07      	ldr	r3, [pc, #28]	@ (8005484 <HAL_RCC_GetClockConfig+0x60>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0207 	and.w	r2, r3, #7
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	601a      	str	r2, [r3, #0]
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40023800 	.word	0x40023800
 8005484:	40023c00 	.word	0x40023c00

08005488 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d105      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d035      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80054b0:	4b67      	ldr	r3, [pc, #412]	@ (8005650 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054b6:	f7fe fba3 	bl	8003c00 <HAL_GetTick>
 80054ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054bc:	e008      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80054be:	f7fe fb9f 	bl	8003c00 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e0ba      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054d0:	4b60      	ldr	r3, [pc, #384]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1f0      	bne.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	019a      	lsls	r2, r3, #6
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	071b      	lsls	r3, r3, #28
 80054e8:	495a      	ldr	r1, [pc, #360]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054f0:	4b57      	ldr	r3, [pc, #348]	@ (8005650 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054f6:	f7fe fb83 	bl	8003c00 <HAL_GetTick>
 80054fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054fc:	e008      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80054fe:	f7fe fb7f 	bl	8003c00 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e09a      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005510:	4b50      	ldr	r3, [pc, #320]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0f0      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 8083 	beq.w	8005630 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800552a:	2300      	movs	r3, #0
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	4b49      	ldr	r3, [pc, #292]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005532:	4a48      	ldr	r2, [pc, #288]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005538:	6413      	str	r3, [r2, #64]	@ 0x40
 800553a:	4b46      	ldr	r3, [pc, #280]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800553c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005546:	4b44      	ldr	r3, [pc, #272]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a43      	ldr	r2, [pc, #268]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800554c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005550:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005552:	f7fe fb55 	bl	8003c00 <HAL_GetTick>
 8005556:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005558:	e008      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800555a:	f7fe fb51 	bl	8003c00 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e06c      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800556c:	4b3a      	ldr	r3, [pc, #232]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0f0      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005578:	4b36      	ldr	r3, [pc, #216]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800557a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800557c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005580:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d02f      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	429a      	cmp	r2, r3
 8005594:	d028      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005596:	4b2f      	ldr	r3, [pc, #188]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800559a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800559e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055a0:	4b2e      	ldr	r3, [pc, #184]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80055a2:	2201      	movs	r2, #1
 80055a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055a6:	4b2d      	ldr	r3, [pc, #180]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80055ac:	4a29      	ldr	r2, [pc, #164]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055b2:	4b28      	ldr	r3, [pc, #160]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80055b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d114      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80055be:	f7fe fb1f 	bl	8003c00 <HAL_GetTick>
 80055c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055c4:	e00a      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055c6:	f7fe fb1b 	bl	8003c00 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d901      	bls.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e034      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80055de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0ee      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055f4:	d10d      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80055f6:	4b17      	ldr	r3, [pc, #92]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800560a:	4912      	ldr	r1, [pc, #72]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800560c:	4313      	orrs	r3, r2
 800560e:	608b      	str	r3, [r1, #8]
 8005610:	e005      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005612:	4b10      	ldr	r3, [pc, #64]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	4a0f      	ldr	r2, [pc, #60]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005618:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800561c:	6093      	str	r3, [r2, #8]
 800561e:	4b0d      	ldr	r3, [pc, #52]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005620:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800562a:	490a      	ldr	r1, [pc, #40]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800562c:	4313      	orrs	r3, r2
 800562e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	7c1a      	ldrb	r2, [r3, #16]
 8005640:	4b07      	ldr	r3, [pc, #28]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005642:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	42470068 	.word	0x42470068
 8005654:	40023800 	.word	0x40023800
 8005658:	40007000 	.word	0x40007000
 800565c:	42470e40 	.word	0x42470e40
 8005660:	424711e0 	.word	0x424711e0

08005664 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e066      	b.n	8005748 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	7f5b      	ldrb	r3, [r3, #29]
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d105      	bne.n	8005690 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7fd ffb8 	bl	8003600 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	22ca      	movs	r2, #202	@ 0xca
 800569c:	625a      	str	r2, [r3, #36]	@ 0x24
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2253      	movs	r2, #83	@ 0x53
 80056a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fc3c 	bl	8005f24 <RTC_EnterInitMode>
 80056ac:	4603      	mov	r3, r0
 80056ae:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d12c      	bne.n	8005710 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6812      	ldr	r2, [r2, #0]
 80056c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80056c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056c8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6899      	ldr	r1, [r3, #8]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	68d2      	ldr	r2, [r2, #12]
 80056f0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6919      	ldr	r1, [r3, #16]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	041a      	lsls	r2, r3, #16
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fc43 	bl	8005f92 <RTC_ExitInitMode>
 800570c:	4603      	mov	r3, r0
 800570e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d113      	bne.n	800573e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005724:	641a      	str	r2, [r3, #64]	@ 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699a      	ldr	r2, [r3, #24]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	641a      	str	r2, [r3, #64]	@ 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	22ff      	movs	r2, #255	@ 0xff
 8005744:	625a      	str	r2, [r3, #36]	@ 0x24

  return status;
 8005746:	7bfb      	ldrb	r3, [r7, #15]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005750:	b590      	push	{r4, r7, lr}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	7f1b      	ldrb	r3, [r3, #28]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d101      	bne.n	800576c <HAL_RTC_SetTime+0x1c>
 8005768:	2302      	movs	r3, #2
 800576a:	e087      	b.n	800587c <HAL_RTC_SetTime+0x12c>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2201      	movs	r2, #1
 8005770:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2202      	movs	r2, #2
 8005776:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d126      	bne.n	80057cc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005788:	2b00      	cmp	r3, #0
 800578a:	d102      	bne.n	8005792 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2200      	movs	r2, #0
 8005790:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fc20 	bl	8005fdc <RTC_ByteToBcd2>
 800579c:	4603      	mov	r3, r0
 800579e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	785b      	ldrb	r3, [r3, #1]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 fc19 	bl	8005fdc <RTC_ByteToBcd2>
 80057aa:	4603      	mov	r3, r0
 80057ac:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80057ae:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	789b      	ldrb	r3, [r3, #2]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fc11 	bl	8005fdc <RTC_ByteToBcd2>
 80057ba:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80057bc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	78db      	ldrb	r3, [r3, #3]
 80057c4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80057c6:	4313      	orrs	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	e018      	b.n	80057fe <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d102      	bne.n	80057e0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2200      	movs	r2, #0
 80057de:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	785b      	ldrb	r3, [r3, #1]
 80057ea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80057ec:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80057f2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	78db      	ldrb	r3, [r3, #3]
 80057f8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80057fa:	4313      	orrs	r3, r2
 80057fc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	22ca      	movs	r2, #202	@ 0xca
 8005804:	625a      	str	r2, [r3, #36]	@ 0x24
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2253      	movs	r2, #83	@ 0x53
 800580c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 fb88 	bl	8005f24 <RTC_EnterInitMode>
 8005814:	4603      	mov	r3, r0
 8005816:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005818:	7cfb      	ldrb	r3, [r7, #19]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d120      	bne.n	8005860 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005828:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800582c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800583c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6899      	ldr	r1, [r3, #8]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	68da      	ldr	r2, [r3, #12]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	431a      	orrs	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 fb9b 	bl	8005f92 <RTC_ExitInitMode>
 800585c:	4603      	mov	r3, r0
 800585e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005860:	7cfb      	ldrb	r3, [r7, #19]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d102      	bne.n	800586c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2201      	movs	r2, #1
 800586a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	22ff      	movs	r2, #255	@ 0xff
 8005872:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	771a      	strb	r2, [r3, #28]

  return status;
 800587a:	7cfb      	ldrb	r3, [r7, #19]
}
 800587c:	4618      	mov	r0, r3
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	bd90      	pop	{r4, r7, pc}

08005884 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005884:	b590      	push	{r4, r7, lr}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	7f1b      	ldrb	r3, [r3, #28]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d101      	bne.n	80058a0 <HAL_RTC_SetDate+0x1c>
 800589c:	2302      	movs	r3, #2
 800589e:	e071      	b.n	8005984 <HAL_RTC_SetDate+0x100>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2201      	movs	r2, #1
 80058a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2202      	movs	r2, #2
 80058aa:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10e      	bne.n	80058d0 <HAL_RTC_SetDate+0x4c>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	785b      	ldrb	r3, [r3, #1]
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d008      	beq.n	80058d0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	785b      	ldrb	r3, [r3, #1]
 80058c2:	f023 0310 	bic.w	r3, r3, #16
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	330a      	adds	r3, #10
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d11c      	bne.n	8005910 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	78db      	ldrb	r3, [r3, #3]
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fb7e 	bl	8005fdc <RTC_ByteToBcd2>
 80058e0:	4603      	mov	r3, r0
 80058e2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	785b      	ldrb	r3, [r3, #1]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fb77 	bl	8005fdc <RTC_ByteToBcd2>
 80058ee:	4603      	mov	r3, r0
 80058f0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80058f2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	789b      	ldrb	r3, [r3, #2]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 fb6f 	bl	8005fdc <RTC_ByteToBcd2>
 80058fe:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005900:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]
 800590e:	e00e      	b.n	800592e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	78db      	ldrb	r3, [r3, #3]
 8005914:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	785b      	ldrb	r3, [r3, #1]
 800591a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800591c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005922:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800592a:	4313      	orrs	r3, r2
 800592c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	22ca      	movs	r2, #202	@ 0xca
 8005934:	625a      	str	r2, [r3, #36]	@ 0x24
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2253      	movs	r2, #83	@ 0x53
 800593c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f000 faf0 	bl	8005f24 <RTC_EnterInitMode>
 8005944:	4603      	mov	r3, r0
 8005946:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005948:	7cfb      	ldrb	r3, [r7, #19]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10c      	bne.n	8005968 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005958:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800595c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 fb17 	bl	8005f92 <RTC_ExitInitMode>
 8005964:	4603      	mov	r3, r0
 8005966:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005968:	7cfb      	ldrb	r3, [r7, #19]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d102      	bne.n	8005974 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2201      	movs	r2, #1
 8005972:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	22ff      	movs	r2, #255	@ 0xff
 800597a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	771a      	strb	r2, [r3, #28]

  return status;
 8005982:	7cfb      	ldrb	r3, [r7, #19]
}
 8005984:	4618      	mov	r0, r3
 8005986:	371c      	adds	r7, #28
 8005988:	46bd      	mov	sp, r7
 800598a:	bd90      	pop	{r4, r7, pc}

0800598c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800598c:	b590      	push	{r4, r7, lr}
 800598e:	b089      	sub	sp, #36	@ 0x24
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005998:	4b9a      	ldr	r3, [pc, #616]	@ (8005c04 <HAL_RTC_SetAlarm_IT+0x278>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a9a      	ldr	r2, [pc, #616]	@ (8005c08 <HAL_RTC_SetAlarm_IT+0x27c>)
 800599e:	fba2 2303 	umull	r2, r3, r2, r3
 80059a2:	0adb      	lsrs	r3, r3, #11
 80059a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80059a8:	fb02 f303 	mul.w	r3, r2, r3
 80059ac:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	7f1b      	ldrb	r3, [r3, #28]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d101      	bne.n	80059c2 <HAL_RTC_SetAlarm_IT+0x36>
 80059be:	2302      	movs	r3, #2
 80059c0:	e11c      	b.n	8005bfc <HAL_RTC_SetAlarm_IT+0x270>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2202      	movs	r2, #2
 80059cc:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d137      	bne.n	8005a44 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d102      	bne.n	80059e8 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2200      	movs	r2, #0
 80059e6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 faf5 	bl	8005fdc <RTC_ByteToBcd2>
 80059f2:	4603      	mov	r3, r0
 80059f4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	785b      	ldrb	r3, [r3, #1]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 faee 	bl	8005fdc <RTC_ByteToBcd2>
 8005a00:	4603      	mov	r3, r0
 8005a02:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005a04:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	789b      	ldrb	r3, [r3, #2]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 fae6 	bl	8005fdc <RTC_ByteToBcd2>
 8005a10:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005a12:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	78db      	ldrb	r3, [r3, #3]
 8005a1a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005a1c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 fad8 	bl	8005fdc <RTC_ByteToBcd2>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005a30:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005a38:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	61fb      	str	r3, [r7, #28]
 8005a42:	e023      	b.n	8005a8c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d102      	bne.n	8005a58 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2200      	movs	r2, #0
 8005a56:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	785b      	ldrb	r3, [r3, #1]
 8005a62:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005a64:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005a6a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	78db      	ldrb	r3, [r3, #3]
 8005a70:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005a72:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a7a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005a7c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005a82:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005a94:	4313      	orrs	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	22ca      	movs	r2, #202	@ 0xca
 8005a9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2253      	movs	r2, #83	@ 0x53
 8005aa6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ab0:	d141      	bne.n	8005b36 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ac0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8005ad2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	1e5a      	subs	r2, r3, #1
 8005ad8:	617a      	str	r2, [r7, #20]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10b      	bne.n	8005af6 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	22ff      	movs	r2, #255	@ 0xff
 8005ae4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2203      	movs	r2, #3
 8005aea:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e082      	b.n	8005bfc <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0e7      	beq.n	8005ad4 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	69fa      	ldr	r2, [r7, #28]
 8005b0a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b22:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005b32:	609a      	str	r2, [r3, #8]
 8005b34:	e04b      	b.n	8005bce <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005b44:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8005b56:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005b58:	4b2a      	ldr	r3, [pc, #168]	@ (8005c04 <HAL_RTC_SetAlarm_IT+0x278>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a2a      	ldr	r2, [pc, #168]	@ (8005c08 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b62:	0adb      	lsrs	r3, r3, #11
 8005b64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005b68:	fb02 f303 	mul.w	r3, r2, r3
 8005b6c:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	1e5a      	subs	r2, r3, #1
 8005b72:	617a      	str	r2, [r7, #20]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10b      	bne.n	8005b90 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	22ff      	movs	r2, #255	@ 0xff
 8005b7e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2203      	movs	r2, #3
 8005b84:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e035      	b.n	8005bfc <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0e7      	beq.n	8005b6e <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689a      	ldr	r2, [r3, #8]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bbc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005bcc:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005bce:	4b0f      	ldr	r3, [pc, #60]	@ (8005c0c <HAL_RTC_SetAlarm_IT+0x280>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8005c0c <HAL_RTC_SetAlarm_IT+0x280>)
 8005bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bd8:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005bda:	4b0c      	ldr	r3, [pc, #48]	@ (8005c0c <HAL_RTC_SetAlarm_IT+0x280>)
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	4a0b      	ldr	r2, [pc, #44]	@ (8005c0c <HAL_RTC_SetAlarm_IT+0x280>)
 8005be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005be4:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	22ff      	movs	r2, #255	@ 0xff
 8005bec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3724      	adds	r7, #36	@ 0x24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd90      	pop	{r4, r7, pc}
 8005c04:	2000000c 	.word	0x2000000c
 8005c08:	10624dd3 	.word	0x10624dd3
 8005c0c:	40013c00 	.word	0x40013c00

08005c10 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A: Alarm A
  *            @arg RTC_ALARM_B: Alarm B
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	7f1b      	ldrb	r3, [r3, #28]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d101      	bne.n	8005c2a <HAL_RTC_DeactivateAlarm+0x1a>
 8005c26:	2302      	movs	r3, #2
 8005c28:	e07b      	b.n	8005d22 <HAL_RTC_DeactivateAlarm+0x112>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	22ca      	movs	r2, #202	@ 0xca
 8005c3c:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2253      	movs	r2, #83	@ 0x53
 8005c44:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c4c:	d12f      	bne.n	8005cae <HAL_RTC_DeactivateAlarm+0x9e>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c5c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689a      	ldr	r2, [r3, #8]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005c6c:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c6e:	f7fd ffc7 	bl	8003c00 <HAL_GetTick>
 8005c72:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005c74:	e013      	b.n	8005c9e <HAL_RTC_DeactivateAlarm+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c76:	f7fd ffc3 	bl	8003c00 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c84:	d90b      	bls.n	8005c9e <HAL_RTC_DeactivateAlarm+0x8e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	22ff      	movs	r2, #255	@ 0xff
 8005c8c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2203      	movs	r2, #3
 8005c92:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e041      	b.n	8005d22 <HAL_RTC_DeactivateAlarm+0x112>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0e4      	beq.n	8005c76 <HAL_RTC_DeactivateAlarm+0x66>
 8005cac:	e02e      	b.n	8005d0c <HAL_RTC_DeactivateAlarm+0xfc>
    }
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005cbc:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ccc:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005cce:	f7fd ff97 	bl	8003c00 <HAL_GetTick>
 8005cd2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005cd4:	e013      	b.n	8005cfe <HAL_RTC_DeactivateAlarm+0xee>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005cd6:	f7fd ff93 	bl	8003c00 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ce4:	d90b      	bls.n	8005cfe <HAL_RTC_DeactivateAlarm+0xee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	22ff      	movs	r2, #255	@ 0xff
 8005cec:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2203      	movs	r2, #3
 8005cf2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e011      	b.n	8005d22 <HAL_RTC_DeactivateAlarm+0x112>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0e4      	beq.n	8005cd6 <HAL_RTC_DeactivateAlarm+0xc6>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	22ff      	movs	r2, #255	@ 0xff
 8005d12:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b086      	sub	sp, #24
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	607a      	str	r2, [r7, #4]
 8005d36:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	617b      	str	r3, [r7, #20]
  uint32_t subsecondtmpreg = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d46:	d10e      	bne.n	8005d66 <HAL_RTC_GetAlarm+0x3c>
  {
    sAlarm->Alarm = RTC_ALARM_A;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d4e:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d5e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005d62:	613b      	str	r3, [r7, #16]
 8005d64:	e00d      	b.n	8005d82 <HAL_RTC_GetAlarm+0x58>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d6c:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d7c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005d80:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours      = (uint8_t) ((tmpreg & (RTC_ALRMAR_HT  | RTC_ALRMAR_HU))  >> RTC_ALRMAR_HU_Pos);
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	0c1b      	lsrs	r3, r3, #16
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes    = (uint8_t) ((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	0a1b      	lsrs	r3, r3, #8
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds    = (uint8_t) ( tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU));
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint8_t) ((tmpreg & RTC_ALRMAR_PM)                     >> RTC_TR_PM_Pos);
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	0d9b      	lsrs	r3, r3, #22
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay     = (uint8_t) ((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_ALRMAR_DU_Pos);
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	0e1b      	lsrs	r3, r3, #24
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel  = (uint32_t) (tmpreg & RTC_ALRMAR_WDSEL);
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask            = (uint32_t) (tmpreg & RTC_ALARMMASK_ALL);
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f003 3280 	and.w	r2, r3, #2155905152	@ 0x80808080
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d125      	bne.n	8005e3e <HAL_RTC_GetAlarm+0x114>
  {
    sAlarm->AlarmTime.Hours   = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 f90d 	bl	8006016 <RTC_Bcd2ToByte>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	461a      	mov	r2, r3
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	785b      	ldrb	r3, [r3, #1]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 f904 	bl	8006016 <RTC_Bcd2ToByte>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	461a      	mov	r2, r3
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	789b      	ldrb	r3, [r3, #2]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 f8fb 	bl	8006016 <RTC_Bcd2ToByte>
 8005e20:	4603      	mov	r3, r0
 8005e22:	461a      	mov	r2, r3
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay  = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 f8f1 	bl	8006016 <RTC_Bcd2ToByte>
 8005e34:	4603      	mov	r3, r0
 8005e36:	461a      	mov	r2, r3
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d012      	beq.n	8005e84 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00b      	beq.n	8005e84 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7fb ffd3 	bl	8001e18 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8005e82:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d012      	beq.n	8005eb8 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00b      	beq.n	8005eb8 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f8d4 	bl	800604e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8005eb6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005eb8:	4b05      	ldr	r3, [pc, #20]	@ (8005ed0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005eba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005ebe:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	775a      	strb	r2, [r3, #29]
}
 8005ec6:	bf00      	nop
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	40013c00 	.word	0x40013c00

08005ed4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005eee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ef0:	f7fd fe86 	bl	8003c00 <HAL_GetTick>
 8005ef4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ef6:	e009      	b.n	8005f0c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ef8:	f7fd fe82 	bl	8003c00 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f06:	d901      	bls.n	8005f0c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e007      	b.n	8005f1c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f003 0320 	and.w	r3, r3, #32
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d0ee      	beq.n	8005ef8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d122      	bne.n	8005f88 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68da      	ldr	r2, [r3, #12]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005f50:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f52:	f7fd fe55 	bl	8003c00 <HAL_GetTick>
 8005f56:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005f58:	e00c      	b.n	8005f74 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f5a:	f7fd fe51 	bl	8003c00 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f68:	d904      	bls.n	8005f74 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2204      	movs	r2, #4
 8005f6e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d102      	bne.n	8005f88 <RTC_EnterInitMode+0x64>
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d1e8      	bne.n	8005f5a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b084      	sub	sp, #16
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005fac:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f003 0320 	and.w	r3, r3, #32
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10a      	bne.n	8005fd2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff ff89 	bl	8005ed4 <HAL_RTC_WaitForSynchro>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d004      	beq.n	8005fd2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2204      	movs	r2, #4
 8005fcc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005fea:	e005      	b.n	8005ff8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	3b0a      	subs	r3, #10
 8005ff6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005ff8:	79fb      	ldrb	r3, [r7, #7]
 8005ffa:	2b09      	cmp	r3, #9
 8005ffc:	d8f6      	bhi.n	8005fec <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	b2da      	uxtb	r2, r3
 8006004:	79fb      	ldrb	r3, [r7, #7]
 8006006:	4313      	orrs	r3, r2
 8006008:	b2db      	uxtb	r3, r3
}
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006016:	b480      	push	{r7}
 8006018:	b085      	sub	sp, #20
 800601a:	af00      	add	r7, sp, #0
 800601c:	4603      	mov	r3, r0
 800601e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006024:	79fb      	ldrb	r3, [r7, #7]
 8006026:	091b      	lsrs	r3, r3, #4
 8006028:	b2db      	uxtb	r3, r3
 800602a:	461a      	mov	r2, r3
 800602c:	0092      	lsls	r2, r2, #2
 800602e:	4413      	add	r3, r2
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006034:	79fb      	ldrb	r3, [r7, #7]
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	b2da      	uxtb	r2, r3
 800603c:	7bfb      	ldrb	r3, [r7, #15]
 800603e:	4413      	add	r3, r2
 8006040:	b2db      	uxtb	r3, r3
}
 8006042:	4618      	mov	r0, r3
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800604e:	b480      	push	{r7}
 8006050:	b083      	sub	sp, #12
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b082      	sub	sp, #8
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e041      	b.n	80060f8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d106      	bne.n	800608e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f839 	bl	8006100 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2202      	movs	r2, #2
 8006092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3304      	adds	r3, #4
 800609e:	4619      	mov	r1, r3
 80060a0:	4610      	mov	r0, r2
 80060a2:	f000 f9c9 	bl	8006438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b01      	cmp	r3, #1
 8006126:	d001      	beq.n	800612c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e044      	b.n	80061b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0201 	orr.w	r2, r2, #1
 8006142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a1e      	ldr	r2, [pc, #120]	@ (80061c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d018      	beq.n	8006180 <HAL_TIM_Base_Start_IT+0x6c>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006156:	d013      	beq.n	8006180 <HAL_TIM_Base_Start_IT+0x6c>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a1a      	ldr	r2, [pc, #104]	@ (80061c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00e      	beq.n	8006180 <HAL_TIM_Base_Start_IT+0x6c>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a19      	ldr	r2, [pc, #100]	@ (80061cc <HAL_TIM_Base_Start_IT+0xb8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d009      	beq.n	8006180 <HAL_TIM_Base_Start_IT+0x6c>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a17      	ldr	r2, [pc, #92]	@ (80061d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d004      	beq.n	8006180 <HAL_TIM_Base_Start_IT+0x6c>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a16      	ldr	r2, [pc, #88]	@ (80061d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d111      	bne.n	80061a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2b06      	cmp	r3, #6
 8006190:	d010      	beq.n	80061b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f042 0201 	orr.w	r2, r2, #1
 80061a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a2:	e007      	b.n	80061b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f042 0201 	orr.w	r2, r2, #1
 80061b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	40010000 	.word	0x40010000
 80061c8:	40000400 	.word	0x40000400
 80061cc:	40000800 	.word	0x40000800
 80061d0:	40000c00 	.word	0x40000c00
 80061d4:	40014000 	.word	0x40014000

080061d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d122      	bne.n	8006234 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d11b      	bne.n	8006234 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0202 	mvn.w	r2, #2
 8006204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f8ee 	bl	80063fc <HAL_TIM_IC_CaptureCallback>
 8006220:	e005      	b.n	800622e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f8e0 	bl	80063e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f8f1 	bl	8006410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0304 	and.w	r3, r3, #4
 800623e:	2b04      	cmp	r3, #4
 8006240:	d122      	bne.n	8006288 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b04      	cmp	r3, #4
 800624e:	d11b      	bne.n	8006288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f06f 0204 	mvn.w	r2, #4
 8006258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2202      	movs	r2, #2
 800625e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f8c4 	bl	80063fc <HAL_TIM_IC_CaptureCallback>
 8006274:	e005      	b.n	8006282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f8b6 	bl	80063e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 f8c7 	bl	8006410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	f003 0308 	and.w	r3, r3, #8
 8006292:	2b08      	cmp	r3, #8
 8006294:	d122      	bne.n	80062dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f003 0308 	and.w	r3, r3, #8
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d11b      	bne.n	80062dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f06f 0208 	mvn.w	r2, #8
 80062ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2204      	movs	r2, #4
 80062b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	f003 0303 	and.w	r3, r3, #3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f89a 	bl	80063fc <HAL_TIM_IC_CaptureCallback>
 80062c8:	e005      	b.n	80062d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f88c 	bl	80063e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f89d 	bl	8006410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	f003 0310 	and.w	r3, r3, #16
 80062e6:	2b10      	cmp	r3, #16
 80062e8:	d122      	bne.n	8006330 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f003 0310 	and.w	r3, r3, #16
 80062f4:	2b10      	cmp	r3, #16
 80062f6:	d11b      	bne.n	8006330 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f06f 0210 	mvn.w	r2, #16
 8006300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2208      	movs	r2, #8
 8006306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f870 	bl	80063fc <HAL_TIM_IC_CaptureCallback>
 800631c:	e005      	b.n	800632a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f862 	bl	80063e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f873 	bl	8006410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b01      	cmp	r3, #1
 800633c:	d10e      	bne.n	800635c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	2b01      	cmp	r3, #1
 800634a:	d107      	bne.n	800635c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f06f 0201 	mvn.w	r2, #1
 8006354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7fb fdda 	bl	8001f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006366:	2b80      	cmp	r3, #128	@ 0x80
 8006368:	d10e      	bne.n	8006388 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006374:	2b80      	cmp	r3, #128	@ 0x80
 8006376:	d107      	bne.n	8006388 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f8e2 	bl	800654c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006392:	2b40      	cmp	r3, #64	@ 0x40
 8006394:	d10e      	bne.n	80063b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a0:	2b40      	cmp	r3, #64	@ 0x40
 80063a2:	d107      	bne.n	80063b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80063ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f838 	bl	8006424 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f003 0320 	and.w	r3, r3, #32
 80063be:	2b20      	cmp	r3, #32
 80063c0:	d10e      	bne.n	80063e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f003 0320 	and.w	r3, r3, #32
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	d107      	bne.n	80063e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f06f 0220 	mvn.w	r2, #32
 80063d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f8ac 	bl	8006538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063e0:	bf00      	nop
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a34      	ldr	r2, [pc, #208]	@ (800651c <TIM_Base_SetConfig+0xe4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d00f      	beq.n	8006470 <TIM_Base_SetConfig+0x38>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006456:	d00b      	beq.n	8006470 <TIM_Base_SetConfig+0x38>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a31      	ldr	r2, [pc, #196]	@ (8006520 <TIM_Base_SetConfig+0xe8>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d007      	beq.n	8006470 <TIM_Base_SetConfig+0x38>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a30      	ldr	r2, [pc, #192]	@ (8006524 <TIM_Base_SetConfig+0xec>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d003      	beq.n	8006470 <TIM_Base_SetConfig+0x38>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a2f      	ldr	r2, [pc, #188]	@ (8006528 <TIM_Base_SetConfig+0xf0>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d108      	bne.n	8006482 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a25      	ldr	r2, [pc, #148]	@ (800651c <TIM_Base_SetConfig+0xe4>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d01b      	beq.n	80064c2 <TIM_Base_SetConfig+0x8a>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006490:	d017      	beq.n	80064c2 <TIM_Base_SetConfig+0x8a>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a22      	ldr	r2, [pc, #136]	@ (8006520 <TIM_Base_SetConfig+0xe8>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d013      	beq.n	80064c2 <TIM_Base_SetConfig+0x8a>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a21      	ldr	r2, [pc, #132]	@ (8006524 <TIM_Base_SetConfig+0xec>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d00f      	beq.n	80064c2 <TIM_Base_SetConfig+0x8a>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a20      	ldr	r2, [pc, #128]	@ (8006528 <TIM_Base_SetConfig+0xf0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d00b      	beq.n	80064c2 <TIM_Base_SetConfig+0x8a>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a1f      	ldr	r2, [pc, #124]	@ (800652c <TIM_Base_SetConfig+0xf4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d007      	beq.n	80064c2 <TIM_Base_SetConfig+0x8a>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006530 <TIM_Base_SetConfig+0xf8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d003      	beq.n	80064c2 <TIM_Base_SetConfig+0x8a>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006534 <TIM_Base_SetConfig+0xfc>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d108      	bne.n	80064d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a08      	ldr	r2, [pc, #32]	@ (800651c <TIM_Base_SetConfig+0xe4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d103      	bne.n	8006508 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	691a      	ldr	r2, [r3, #16]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	615a      	str	r2, [r3, #20]
}
 800650e:	bf00      	nop
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	40010000 	.word	0x40010000
 8006520:	40000400 	.word	0x40000400
 8006524:	40000800 	.word	0x40000800
 8006528:	40000c00 	.word	0x40000c00
 800652c:	40014000 	.word	0x40014000
 8006530:	40014400 	.word	0x40014400
 8006534:	40014800 	.word	0x40014800

08006538 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e03f      	b.n	80065f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d106      	bne.n	800658c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7fd f86e 	bl	8003668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2224      	movs	r2, #36	@ 0x24
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68da      	ldr	r2, [r3, #12]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fd23 	bl	8006ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	691a      	ldr	r2, [r3, #16]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	695a      	ldr	r2, [r3, #20]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80065c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68da      	ldr	r2, [r3, #12]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2220      	movs	r2, #32
 80065ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b085      	sub	sp, #20
 80065fe:	af00      	add	r7, sp, #0
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	60b9      	str	r1, [r7, #8]
 8006604:	4613      	mov	r3, r2
 8006606:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b20      	cmp	r3, #32
 8006612:	d130      	bne.n	8006676 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <HAL_UART_Transmit_IT+0x26>
 800661a:	88fb      	ldrh	r3, [r7, #6]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e029      	b.n	8006678 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800662a:	2b01      	cmp	r3, #1
 800662c:	d101      	bne.n	8006632 <HAL_UART_Transmit_IT+0x38>
 800662e:	2302      	movs	r3, #2
 8006630:	e022      	b.n	8006678 <HAL_UART_Transmit_IT+0x7e>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	88fa      	ldrh	r2, [r7, #6]
 8006644:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	88fa      	ldrh	r2, [r7, #6]
 800664a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2221      	movs	r2, #33	@ 0x21
 8006656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006670:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	e000      	b.n	8006678 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006676:	2302      	movs	r3, #2
  }
}
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	4613      	mov	r3, r2
 8006690:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b20      	cmp	r3, #32
 800669c:	d11d      	bne.n	80066da <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <HAL_UART_Receive_IT+0x26>
 80066a4:	88fb      	ldrh	r3, [r7, #6]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e016      	b.n	80066dc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d101      	bne.n	80066bc <HAL_UART_Receive_IT+0x38>
 80066b8:	2302      	movs	r3, #2
 80066ba:	e00f      	b.n	80066dc <HAL_UART_Receive_IT+0x58>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066ca:	88fb      	ldrh	r3, [r7, #6]
 80066cc:	461a      	mov	r2, r3
 80066ce:	68b9      	ldr	r1, [r7, #8]
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f000 fab5 	bl	8006c40 <UART_Start_Receive_IT>
 80066d6:	4603      	mov	r3, r0
 80066d8:	e000      	b.n	80066dc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80066da:	2302      	movs	r3, #2
  }
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b0ba      	sub	sp, #232	@ 0xe8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800670a:	2300      	movs	r3, #0
 800670c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006710:	2300      	movs	r3, #0
 8006712:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800671a:	f003 030f 	and.w	r3, r3, #15
 800671e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006722:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10f      	bne.n	800674a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800672a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800672e:	f003 0320 	and.w	r3, r3, #32
 8006732:	2b00      	cmp	r3, #0
 8006734:	d009      	beq.n	800674a <HAL_UART_IRQHandler+0x66>
 8006736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800673a:	f003 0320 	and.w	r3, r3, #32
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fb99 	bl	8006e7a <UART_Receive_IT>
      return;
 8006748:	e256      	b.n	8006bf8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800674a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 80de 	beq.w	8006910 <HAL_UART_IRQHandler+0x22c>
 8006754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b00      	cmp	r3, #0
 800675e:	d106      	bne.n	800676e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006764:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 80d1 	beq.w	8006910 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800676e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00b      	beq.n	8006792 <HAL_UART_IRQHandler+0xae>
 800677a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800677e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006782:	2b00      	cmp	r3, #0
 8006784:	d005      	beq.n	8006792 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800678a:	f043 0201 	orr.w	r2, r3, #1
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006796:	f003 0304 	and.w	r3, r3, #4
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00b      	beq.n	80067b6 <HAL_UART_IRQHandler+0xd2>
 800679e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d005      	beq.n	80067b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ae:	f043 0202 	orr.w	r2, r3, #2
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00b      	beq.n	80067da <HAL_UART_IRQHandler+0xf6>
 80067c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d005      	beq.n	80067da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d2:	f043 0204 	orr.w	r2, r3, #4
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80067da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067de:	f003 0308 	and.w	r3, r3, #8
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d011      	beq.n	800680a <HAL_UART_IRQHandler+0x126>
 80067e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d105      	bne.n	80067fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80067f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d005      	beq.n	800680a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006802:	f043 0208 	orr.w	r2, r3, #8
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 81ed 	beq.w	8006bee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006818:	f003 0320 	and.w	r3, r3, #32
 800681c:	2b00      	cmp	r3, #0
 800681e:	d008      	beq.n	8006832 <HAL_UART_IRQHandler+0x14e>
 8006820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006824:	f003 0320 	and.w	r3, r3, #32
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fb24 	bl	8006e7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800683c:	2b40      	cmp	r3, #64	@ 0x40
 800683e:	bf0c      	ite	eq
 8006840:	2301      	moveq	r3, #1
 8006842:	2300      	movne	r3, #0
 8006844:	b2db      	uxtb	r3, r3
 8006846:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800684e:	f003 0308 	and.w	r3, r3, #8
 8006852:	2b00      	cmp	r3, #0
 8006854:	d103      	bne.n	800685e <HAL_UART_IRQHandler+0x17a>
 8006856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800685a:	2b00      	cmp	r3, #0
 800685c:	d04f      	beq.n	80068fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fa2c 	bl	8006cbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800686e:	2b40      	cmp	r3, #64	@ 0x40
 8006870:	d141      	bne.n	80068f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3314      	adds	r3, #20
 8006878:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006888:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800688c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006890:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3314      	adds	r3, #20
 800689a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800689e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80068a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80068aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80068ae:	e841 2300 	strex	r3, r2, [r1]
 80068b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80068b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1d9      	bne.n	8006872 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d013      	beq.n	80068ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ca:	4a7d      	ldr	r2, [pc, #500]	@ (8006ac0 <HAL_UART_IRQHandler+0x3dc>)
 80068cc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fd ff72 	bl	80047bc <HAL_DMA_Abort_IT>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d016      	beq.n	800690c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80068e8:	4610      	mov	r0, r2
 80068ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ec:	e00e      	b.n	800690c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f990 	bl	8006c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f4:	e00a      	b.n	800690c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f98c 	bl	8006c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068fc:	e006      	b.n	800690c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f988 	bl	8006c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800690a:	e170      	b.n	8006bee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800690c:	bf00      	nop
    return;
 800690e:	e16e      	b.n	8006bee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006914:	2b01      	cmp	r3, #1
 8006916:	f040 814a 	bne.w	8006bae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800691a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800691e:	f003 0310 	and.w	r3, r3, #16
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 8143 	beq.w	8006bae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800692c:	f003 0310 	and.w	r3, r3, #16
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 813c 	beq.w	8006bae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006936:	2300      	movs	r3, #0
 8006938:	60bb      	str	r3, [r7, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	60bb      	str	r3, [r7, #8]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	60bb      	str	r3, [r7, #8]
 800694a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006956:	2b40      	cmp	r3, #64	@ 0x40
 8006958:	f040 80b4 	bne.w	8006ac4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006968:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 8140 	beq.w	8006bf2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006976:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800697a:	429a      	cmp	r2, r3
 800697c:	f080 8139 	bcs.w	8006bf2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006986:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800698c:	69db      	ldr	r3, [r3, #28]
 800698e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006992:	f000 8088 	beq.w	8006aa6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	330c      	adds	r3, #12
 800699c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80069a4:	e853 3f00 	ldrex	r3, [r3]
 80069a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80069ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	330c      	adds	r3, #12
 80069be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80069c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80069c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80069ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80069d2:	e841 2300 	strex	r3, r2, [r1]
 80069d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80069da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1d9      	bne.n	8006996 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3314      	adds	r3, #20
 80069e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069ec:	e853 3f00 	ldrex	r3, [r3]
 80069f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80069f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069f4:	f023 0301 	bic.w	r3, r3, #1
 80069f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3314      	adds	r3, #20
 8006a02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006a0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006a0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a12:	e841 2300 	strex	r3, r2, [r1]
 8006a16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006a18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1e1      	bne.n	80069e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3314      	adds	r3, #20
 8006a24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a28:	e853 3f00 	ldrex	r3, [r3]
 8006a2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3314      	adds	r3, #20
 8006a3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006a42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006a48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e3      	bne.n	8006a1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	330c      	adds	r3, #12
 8006a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a6e:	e853 3f00 	ldrex	r3, [r3]
 8006a72:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a76:	f023 0310 	bic.w	r3, r3, #16
 8006a7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	330c      	adds	r3, #12
 8006a84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006a88:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006a8a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a90:	e841 2300 	strex	r3, r2, [r1]
 8006a94:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1e3      	bne.n	8006a64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7fd fe1b 	bl	80046dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f8b6 	bl	8006c28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006abc:	e099      	b.n	8006bf2 <HAL_UART_IRQHandler+0x50e>
 8006abe:	bf00      	nop
 8006ac0:	08006d83 	.word	0x08006d83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 808b 	beq.w	8006bf6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006ae0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 8086 	beq.w	8006bf6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	330c      	adds	r3, #12
 8006af0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af4:	e853 3f00 	ldrex	r3, [r3]
 8006af8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006afc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	330c      	adds	r3, #12
 8006b0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006b0e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e3      	bne.n	8006aea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3314      	adds	r3, #20
 8006b28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	623b      	str	r3, [r7, #32]
   return(result);
 8006b32:	6a3b      	ldr	r3, [r7, #32]
 8006b34:	f023 0301 	bic.w	r3, r3, #1
 8006b38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3314      	adds	r3, #20
 8006b42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006b46:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b4e:	e841 2300 	strex	r3, r2, [r1]
 8006b52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1e3      	bne.n	8006b22 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	330c      	adds	r3, #12
 8006b6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	e853 3f00 	ldrex	r3, [r3]
 8006b76:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0310 	bic.w	r3, r3, #16
 8006b7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	330c      	adds	r3, #12
 8006b88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006b8c:	61fa      	str	r2, [r7, #28]
 8006b8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b90:	69b9      	ldr	r1, [r7, #24]
 8006b92:	69fa      	ldr	r2, [r7, #28]
 8006b94:	e841 2300 	strex	r3, r2, [r1]
 8006b98:	617b      	str	r3, [r7, #20]
   return(result);
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e3      	bne.n	8006b68 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ba0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f83e 	bl	8006c28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bac:	e023      	b.n	8006bf6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d009      	beq.n	8006bce <HAL_UART_IRQHandler+0x4ea>
 8006bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f8ef 	bl	8006daa <UART_Transmit_IT>
    return;
 8006bcc:	e014      	b.n	8006bf8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00e      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x514>
 8006bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d008      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f92f 	bl	8006e4a <UART_EndTransmit_IT>
    return;
 8006bec:	e004      	b.n	8006bf8 <HAL_UART_IRQHandler+0x514>
    return;
 8006bee:	bf00      	nop
 8006bf0:	e002      	b.n	8006bf8 <HAL_UART_IRQHandler+0x514>
      return;
 8006bf2:	bf00      	nop
 8006bf4:	e000      	b.n	8006bf8 <HAL_UART_IRQHandler+0x514>
      return;
 8006bf6:	bf00      	nop
  }
}
 8006bf8:	37e8      	adds	r7, #232	@ 0xe8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop

08006c00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	460b      	mov	r3, r1
 8006c32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	88fa      	ldrh	r2, [r7, #6]
 8006c58:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	88fa      	ldrh	r2, [r7, #6]
 8006c5e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2222      	movs	r2, #34	@ 0x22
 8006c6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d007      	beq.n	8006c8e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68da      	ldr	r2, [r3, #12]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c8c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	695a      	ldr	r2, [r3, #20]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f042 0201 	orr.w	r2, r2, #1
 8006c9c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68da      	ldr	r2, [r3, #12]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f042 0220 	orr.w	r2, r2, #32
 8006cac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3714      	adds	r7, #20
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b095      	sub	sp, #84	@ 0x54
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	330c      	adds	r3, #12
 8006cca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cce:	e853 3f00 	ldrex	r3, [r3]
 8006cd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	330c      	adds	r3, #12
 8006ce2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ce4:	643a      	str	r2, [r7, #64]	@ 0x40
 8006ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e5      	bne.n	8006cc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3314      	adds	r3, #20
 8006cfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	f023 0301 	bic.w	r3, r3, #1
 8006d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3314      	adds	r3, #20
 8006d16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d20:	e841 2300 	strex	r3, r2, [r1]
 8006d24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1e5      	bne.n	8006cf8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d119      	bne.n	8006d68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	330c      	adds	r3, #12
 8006d3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	e853 3f00 	ldrex	r3, [r3]
 8006d42:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f023 0310 	bic.w	r3, r3, #16
 8006d4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	330c      	adds	r3, #12
 8006d52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d54:	61ba      	str	r2, [r7, #24]
 8006d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d58:	6979      	ldr	r1, [r7, #20]
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	e841 2300 	strex	r3, r2, [r1]
 8006d60:	613b      	str	r3, [r7, #16]
   return(result);
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1e5      	bne.n	8006d34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006d76:	bf00      	nop
 8006d78:	3754      	adds	r7, #84	@ 0x54
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f7ff ff39 	bl	8006c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006da2:	bf00      	nop
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b085      	sub	sp, #20
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b21      	cmp	r3, #33	@ 0x21
 8006dbc:	d13e      	bne.n	8006e3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dc6:	d114      	bne.n	8006df2 <UART_Transmit_IT+0x48>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d110      	bne.n	8006df2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006de4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	1c9a      	adds	r2, r3, #2
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	621a      	str	r2, [r3, #32]
 8006df0:	e008      	b.n	8006e04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	1c59      	adds	r1, r3, #1
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	6211      	str	r1, [r2, #32]
 8006dfc:	781a      	ldrb	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	4619      	mov	r1, r3
 8006e12:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10f      	bne.n	8006e38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68da      	ldr	r2, [r3, #12]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68da      	ldr	r2, [r3, #12]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	e000      	b.n	8006e3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e3c:	2302      	movs	r3, #2
  }
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b082      	sub	sp, #8
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2220      	movs	r2, #32
 8006e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff fec8 	bl	8006c00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b08c      	sub	sp, #48	@ 0x30
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b22      	cmp	r3, #34	@ 0x22
 8006e8c:	f040 80ab 	bne.w	8006fe6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e98:	d117      	bne.n	8006eca <UART_Receive_IT+0x50>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d113      	bne.n	8006eca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ebc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec2:	1c9a      	adds	r2, r3, #2
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ec8:	e026      	b.n	8006f18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006edc:	d007      	beq.n	8006eee <UART_Receive_IT+0x74>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10a      	bne.n	8006efc <UART_Receive_IT+0x82>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d106      	bne.n	8006efc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ef8:	701a      	strb	r2, [r3, #0]
 8006efa:	e008      	b.n	8006f0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	4619      	mov	r1, r3
 8006f26:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d15a      	bne.n	8006fe2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68da      	ldr	r2, [r3, #12]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f022 0220 	bic.w	r2, r2, #32
 8006f3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68da      	ldr	r2, [r3, #12]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	695a      	ldr	r2, [r3, #20]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f022 0201 	bic.w	r2, r2, #1
 8006f5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d135      	bne.n	8006fd8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	330c      	adds	r3, #12
 8006f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	e853 3f00 	ldrex	r3, [r3]
 8006f80:	613b      	str	r3, [r7, #16]
   return(result);
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f023 0310 	bic.w	r3, r3, #16
 8006f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	330c      	adds	r3, #12
 8006f90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f92:	623a      	str	r2, [r7, #32]
 8006f94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f96:	69f9      	ldr	r1, [r7, #28]
 8006f98:	6a3a      	ldr	r2, [r7, #32]
 8006f9a:	e841 2300 	strex	r3, r2, [r1]
 8006f9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1e5      	bne.n	8006f72 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0310 	and.w	r3, r3, #16
 8006fb0:	2b10      	cmp	r3, #16
 8006fb2:	d10a      	bne.n	8006fca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	60fb      	str	r3, [r7, #12]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f7ff fe29 	bl	8006c28 <HAL_UARTEx_RxEventCallback>
 8006fd6:	e002      	b.n	8006fde <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7fa fe09 	bl	8001bf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	e002      	b.n	8006fe8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	e000      	b.n	8006fe8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006fe6:	2302      	movs	r3, #2
  }
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3730      	adds	r7, #48	@ 0x30
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ff4:	b0c0      	sub	sp, #256	@ 0x100
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800700c:	68d9      	ldr	r1, [r3, #12]
 800700e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	ea40 0301 	orr.w	r3, r0, r1
 8007018:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800701a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800701e:	689a      	ldr	r2, [r3, #8]
 8007020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	431a      	orrs	r2, r3
 8007028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	431a      	orrs	r2, r3
 8007030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007034:	69db      	ldr	r3, [r3, #28]
 8007036:	4313      	orrs	r3, r2
 8007038:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800703c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007048:	f021 010c 	bic.w	r1, r1, #12
 800704c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007056:	430b      	orrs	r3, r1
 8007058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800705a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800706a:	6999      	ldr	r1, [r3, #24]
 800706c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	ea40 0301 	orr.w	r3, r0, r1
 8007076:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	4b8f      	ldr	r3, [pc, #572]	@ (80072bc <UART_SetConfig+0x2cc>)
 8007080:	429a      	cmp	r2, r3
 8007082:	d005      	beq.n	8007090 <UART_SetConfig+0xa0>
 8007084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	4b8d      	ldr	r3, [pc, #564]	@ (80072c0 <UART_SetConfig+0x2d0>)
 800708c:	429a      	cmp	r2, r3
 800708e:	d104      	bne.n	800709a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007090:	f7fe f9b4 	bl	80053fc <HAL_RCC_GetPCLK2Freq>
 8007094:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007098:	e003      	b.n	80070a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800709a:	f7fe f99b 	bl	80053d4 <HAL_RCC_GetPCLK1Freq>
 800709e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070ac:	f040 810c 	bne.w	80072c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070b4:	2200      	movs	r2, #0
 80070b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80070ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80070be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80070c2:	4622      	mov	r2, r4
 80070c4:	462b      	mov	r3, r5
 80070c6:	1891      	adds	r1, r2, r2
 80070c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80070ca:	415b      	adcs	r3, r3
 80070cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80070d2:	4621      	mov	r1, r4
 80070d4:	eb12 0801 	adds.w	r8, r2, r1
 80070d8:	4629      	mov	r1, r5
 80070da:	eb43 0901 	adc.w	r9, r3, r1
 80070de:	f04f 0200 	mov.w	r2, #0
 80070e2:	f04f 0300 	mov.w	r3, #0
 80070e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070f2:	4690      	mov	r8, r2
 80070f4:	4699      	mov	r9, r3
 80070f6:	4623      	mov	r3, r4
 80070f8:	eb18 0303 	adds.w	r3, r8, r3
 80070fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007100:	462b      	mov	r3, r5
 8007102:	eb49 0303 	adc.w	r3, r9, r3
 8007106:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800710a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007116:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800711a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800711e:	460b      	mov	r3, r1
 8007120:	18db      	adds	r3, r3, r3
 8007122:	653b      	str	r3, [r7, #80]	@ 0x50
 8007124:	4613      	mov	r3, r2
 8007126:	eb42 0303 	adc.w	r3, r2, r3
 800712a:	657b      	str	r3, [r7, #84]	@ 0x54
 800712c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007130:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007134:	f7f9 fdb0 	bl	8000c98 <__aeabi_uldivmod>
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	4b61      	ldr	r3, [pc, #388]	@ (80072c4 <UART_SetConfig+0x2d4>)
 800713e:	fba3 2302 	umull	r2, r3, r3, r2
 8007142:	095b      	lsrs	r3, r3, #5
 8007144:	011c      	lsls	r4, r3, #4
 8007146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800714a:	2200      	movs	r2, #0
 800714c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007150:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007154:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007158:	4642      	mov	r2, r8
 800715a:	464b      	mov	r3, r9
 800715c:	1891      	adds	r1, r2, r2
 800715e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007160:	415b      	adcs	r3, r3
 8007162:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007164:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007168:	4641      	mov	r1, r8
 800716a:	eb12 0a01 	adds.w	sl, r2, r1
 800716e:	4649      	mov	r1, r9
 8007170:	eb43 0b01 	adc.w	fp, r3, r1
 8007174:	f04f 0200 	mov.w	r2, #0
 8007178:	f04f 0300 	mov.w	r3, #0
 800717c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007180:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007188:	4692      	mov	sl, r2
 800718a:	469b      	mov	fp, r3
 800718c:	4643      	mov	r3, r8
 800718e:	eb1a 0303 	adds.w	r3, sl, r3
 8007192:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007196:	464b      	mov	r3, r9
 8007198:	eb4b 0303 	adc.w	r3, fp, r3
 800719c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80071a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80071ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80071b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80071b4:	460b      	mov	r3, r1
 80071b6:	18db      	adds	r3, r3, r3
 80071b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80071ba:	4613      	mov	r3, r2
 80071bc:	eb42 0303 	adc.w	r3, r2, r3
 80071c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80071c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80071c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80071ca:	f7f9 fd65 	bl	8000c98 <__aeabi_uldivmod>
 80071ce:	4602      	mov	r2, r0
 80071d0:	460b      	mov	r3, r1
 80071d2:	4611      	mov	r1, r2
 80071d4:	4b3b      	ldr	r3, [pc, #236]	@ (80072c4 <UART_SetConfig+0x2d4>)
 80071d6:	fba3 2301 	umull	r2, r3, r3, r1
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	2264      	movs	r2, #100	@ 0x64
 80071de:	fb02 f303 	mul.w	r3, r2, r3
 80071e2:	1acb      	subs	r3, r1, r3
 80071e4:	00db      	lsls	r3, r3, #3
 80071e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80071ea:	4b36      	ldr	r3, [pc, #216]	@ (80072c4 <UART_SetConfig+0x2d4>)
 80071ec:	fba3 2302 	umull	r2, r3, r3, r2
 80071f0:	095b      	lsrs	r3, r3, #5
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80071f8:	441c      	add	r4, r3
 80071fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071fe:	2200      	movs	r2, #0
 8007200:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007204:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007208:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800720c:	4642      	mov	r2, r8
 800720e:	464b      	mov	r3, r9
 8007210:	1891      	adds	r1, r2, r2
 8007212:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007214:	415b      	adcs	r3, r3
 8007216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007218:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800721c:	4641      	mov	r1, r8
 800721e:	1851      	adds	r1, r2, r1
 8007220:	6339      	str	r1, [r7, #48]	@ 0x30
 8007222:	4649      	mov	r1, r9
 8007224:	414b      	adcs	r3, r1
 8007226:	637b      	str	r3, [r7, #52]	@ 0x34
 8007228:	f04f 0200 	mov.w	r2, #0
 800722c:	f04f 0300 	mov.w	r3, #0
 8007230:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007234:	4659      	mov	r1, fp
 8007236:	00cb      	lsls	r3, r1, #3
 8007238:	4651      	mov	r1, sl
 800723a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800723e:	4651      	mov	r1, sl
 8007240:	00ca      	lsls	r2, r1, #3
 8007242:	4610      	mov	r0, r2
 8007244:	4619      	mov	r1, r3
 8007246:	4603      	mov	r3, r0
 8007248:	4642      	mov	r2, r8
 800724a:	189b      	adds	r3, r3, r2
 800724c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007250:	464b      	mov	r3, r9
 8007252:	460a      	mov	r2, r1
 8007254:	eb42 0303 	adc.w	r3, r2, r3
 8007258:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800725c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007268:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800726c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007270:	460b      	mov	r3, r1
 8007272:	18db      	adds	r3, r3, r3
 8007274:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007276:	4613      	mov	r3, r2
 8007278:	eb42 0303 	adc.w	r3, r2, r3
 800727c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800727e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007282:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007286:	f7f9 fd07 	bl	8000c98 <__aeabi_uldivmod>
 800728a:	4602      	mov	r2, r0
 800728c:	460b      	mov	r3, r1
 800728e:	4b0d      	ldr	r3, [pc, #52]	@ (80072c4 <UART_SetConfig+0x2d4>)
 8007290:	fba3 1302 	umull	r1, r3, r3, r2
 8007294:	095b      	lsrs	r3, r3, #5
 8007296:	2164      	movs	r1, #100	@ 0x64
 8007298:	fb01 f303 	mul.w	r3, r1, r3
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	00db      	lsls	r3, r3, #3
 80072a0:	3332      	adds	r3, #50	@ 0x32
 80072a2:	4a08      	ldr	r2, [pc, #32]	@ (80072c4 <UART_SetConfig+0x2d4>)
 80072a4:	fba2 2303 	umull	r2, r3, r2, r3
 80072a8:	095b      	lsrs	r3, r3, #5
 80072aa:	f003 0207 	and.w	r2, r3, #7
 80072ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4422      	add	r2, r4
 80072b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072b8:	e106      	b.n	80074c8 <UART_SetConfig+0x4d8>
 80072ba:	bf00      	nop
 80072bc:	40011000 	.word	0x40011000
 80072c0:	40011400 	.word	0x40011400
 80072c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072cc:	2200      	movs	r2, #0
 80072ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80072d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80072d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80072da:	4642      	mov	r2, r8
 80072dc:	464b      	mov	r3, r9
 80072de:	1891      	adds	r1, r2, r2
 80072e0:	6239      	str	r1, [r7, #32]
 80072e2:	415b      	adcs	r3, r3
 80072e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80072e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072ea:	4641      	mov	r1, r8
 80072ec:	1854      	adds	r4, r2, r1
 80072ee:	4649      	mov	r1, r9
 80072f0:	eb43 0501 	adc.w	r5, r3, r1
 80072f4:	f04f 0200 	mov.w	r2, #0
 80072f8:	f04f 0300 	mov.w	r3, #0
 80072fc:	00eb      	lsls	r3, r5, #3
 80072fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007302:	00e2      	lsls	r2, r4, #3
 8007304:	4614      	mov	r4, r2
 8007306:	461d      	mov	r5, r3
 8007308:	4643      	mov	r3, r8
 800730a:	18e3      	adds	r3, r4, r3
 800730c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007310:	464b      	mov	r3, r9
 8007312:	eb45 0303 	adc.w	r3, r5, r3
 8007316:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800731a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007326:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800732a:	f04f 0200 	mov.w	r2, #0
 800732e:	f04f 0300 	mov.w	r3, #0
 8007332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007336:	4629      	mov	r1, r5
 8007338:	008b      	lsls	r3, r1, #2
 800733a:	4621      	mov	r1, r4
 800733c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007340:	4621      	mov	r1, r4
 8007342:	008a      	lsls	r2, r1, #2
 8007344:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007348:	f7f9 fca6 	bl	8000c98 <__aeabi_uldivmod>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4b60      	ldr	r3, [pc, #384]	@ (80074d4 <UART_SetConfig+0x4e4>)
 8007352:	fba3 2302 	umull	r2, r3, r3, r2
 8007356:	095b      	lsrs	r3, r3, #5
 8007358:	011c      	lsls	r4, r3, #4
 800735a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800735e:	2200      	movs	r2, #0
 8007360:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007364:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007368:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800736c:	4642      	mov	r2, r8
 800736e:	464b      	mov	r3, r9
 8007370:	1891      	adds	r1, r2, r2
 8007372:	61b9      	str	r1, [r7, #24]
 8007374:	415b      	adcs	r3, r3
 8007376:	61fb      	str	r3, [r7, #28]
 8007378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800737c:	4641      	mov	r1, r8
 800737e:	1851      	adds	r1, r2, r1
 8007380:	6139      	str	r1, [r7, #16]
 8007382:	4649      	mov	r1, r9
 8007384:	414b      	adcs	r3, r1
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	f04f 0200 	mov.w	r2, #0
 800738c:	f04f 0300 	mov.w	r3, #0
 8007390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007394:	4659      	mov	r1, fp
 8007396:	00cb      	lsls	r3, r1, #3
 8007398:	4651      	mov	r1, sl
 800739a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800739e:	4651      	mov	r1, sl
 80073a0:	00ca      	lsls	r2, r1, #3
 80073a2:	4610      	mov	r0, r2
 80073a4:	4619      	mov	r1, r3
 80073a6:	4603      	mov	r3, r0
 80073a8:	4642      	mov	r2, r8
 80073aa:	189b      	adds	r3, r3, r2
 80073ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80073b0:	464b      	mov	r3, r9
 80073b2:	460a      	mov	r2, r1
 80073b4:	eb42 0303 	adc.w	r3, r2, r3
 80073b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80073bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80073c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80073c8:	f04f 0200 	mov.w	r2, #0
 80073cc:	f04f 0300 	mov.w	r3, #0
 80073d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80073d4:	4649      	mov	r1, r9
 80073d6:	008b      	lsls	r3, r1, #2
 80073d8:	4641      	mov	r1, r8
 80073da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073de:	4641      	mov	r1, r8
 80073e0:	008a      	lsls	r2, r1, #2
 80073e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80073e6:	f7f9 fc57 	bl	8000c98 <__aeabi_uldivmod>
 80073ea:	4602      	mov	r2, r0
 80073ec:	460b      	mov	r3, r1
 80073ee:	4611      	mov	r1, r2
 80073f0:	4b38      	ldr	r3, [pc, #224]	@ (80074d4 <UART_SetConfig+0x4e4>)
 80073f2:	fba3 2301 	umull	r2, r3, r3, r1
 80073f6:	095b      	lsrs	r3, r3, #5
 80073f8:	2264      	movs	r2, #100	@ 0x64
 80073fa:	fb02 f303 	mul.w	r3, r2, r3
 80073fe:	1acb      	subs	r3, r1, r3
 8007400:	011b      	lsls	r3, r3, #4
 8007402:	3332      	adds	r3, #50	@ 0x32
 8007404:	4a33      	ldr	r2, [pc, #204]	@ (80074d4 <UART_SetConfig+0x4e4>)
 8007406:	fba2 2303 	umull	r2, r3, r2, r3
 800740a:	095b      	lsrs	r3, r3, #5
 800740c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007410:	441c      	add	r4, r3
 8007412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007416:	2200      	movs	r2, #0
 8007418:	673b      	str	r3, [r7, #112]	@ 0x70
 800741a:	677a      	str	r2, [r7, #116]	@ 0x74
 800741c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007420:	4642      	mov	r2, r8
 8007422:	464b      	mov	r3, r9
 8007424:	1891      	adds	r1, r2, r2
 8007426:	60b9      	str	r1, [r7, #8]
 8007428:	415b      	adcs	r3, r3
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007430:	4641      	mov	r1, r8
 8007432:	1851      	adds	r1, r2, r1
 8007434:	6039      	str	r1, [r7, #0]
 8007436:	4649      	mov	r1, r9
 8007438:	414b      	adcs	r3, r1
 800743a:	607b      	str	r3, [r7, #4]
 800743c:	f04f 0200 	mov.w	r2, #0
 8007440:	f04f 0300 	mov.w	r3, #0
 8007444:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007448:	4659      	mov	r1, fp
 800744a:	00cb      	lsls	r3, r1, #3
 800744c:	4651      	mov	r1, sl
 800744e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007452:	4651      	mov	r1, sl
 8007454:	00ca      	lsls	r2, r1, #3
 8007456:	4610      	mov	r0, r2
 8007458:	4619      	mov	r1, r3
 800745a:	4603      	mov	r3, r0
 800745c:	4642      	mov	r2, r8
 800745e:	189b      	adds	r3, r3, r2
 8007460:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007462:	464b      	mov	r3, r9
 8007464:	460a      	mov	r2, r1
 8007466:	eb42 0303 	adc.w	r3, r2, r3
 800746a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800746c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	663b      	str	r3, [r7, #96]	@ 0x60
 8007476:	667a      	str	r2, [r7, #100]	@ 0x64
 8007478:	f04f 0200 	mov.w	r2, #0
 800747c:	f04f 0300 	mov.w	r3, #0
 8007480:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007484:	4649      	mov	r1, r9
 8007486:	008b      	lsls	r3, r1, #2
 8007488:	4641      	mov	r1, r8
 800748a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800748e:	4641      	mov	r1, r8
 8007490:	008a      	lsls	r2, r1, #2
 8007492:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007496:	f7f9 fbff 	bl	8000c98 <__aeabi_uldivmod>
 800749a:	4602      	mov	r2, r0
 800749c:	460b      	mov	r3, r1
 800749e:	4b0d      	ldr	r3, [pc, #52]	@ (80074d4 <UART_SetConfig+0x4e4>)
 80074a0:	fba3 1302 	umull	r1, r3, r3, r2
 80074a4:	095b      	lsrs	r3, r3, #5
 80074a6:	2164      	movs	r1, #100	@ 0x64
 80074a8:	fb01 f303 	mul.w	r3, r1, r3
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	011b      	lsls	r3, r3, #4
 80074b0:	3332      	adds	r3, #50	@ 0x32
 80074b2:	4a08      	ldr	r2, [pc, #32]	@ (80074d4 <UART_SetConfig+0x4e4>)
 80074b4:	fba2 2303 	umull	r2, r3, r2, r3
 80074b8:	095b      	lsrs	r3, r3, #5
 80074ba:	f003 020f 	and.w	r2, r3, #15
 80074be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4422      	add	r2, r4
 80074c6:	609a      	str	r2, [r3, #8]
}
 80074c8:	bf00      	nop
 80074ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80074ce:	46bd      	mov	sp, r7
 80074d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074d4:	51eb851f 	.word	0x51eb851f

080074d8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b08a      	sub	sp, #40	@ 0x28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80074e0:	2300      	movs	r3, #0
 80074e2:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80074e4:	f001 f88e 	bl	8008604 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80074e8:	4b54      	ldr	r3, [pc, #336]	@ (800763c <pvPortMalloc+0x164>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80074f0:	f000 f90c 	bl	800770c <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d012      	beq.n	8007520 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80074fa:	2208      	movs	r2, #8
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f003 0307 	and.w	r3, r3, #7
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	3308      	adds	r3, #8
 8007506:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	43db      	mvns	r3, r3
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	429a      	cmp	r2, r3
 8007510:	d804      	bhi.n	800751c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	4413      	add	r3, r2
 8007518:	607b      	str	r3, [r7, #4]
 800751a:	e001      	b.n	8007520 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800751c:	2300      	movs	r3, #0
 800751e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	db71      	blt.n	800760a <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d06e      	beq.n	800760a <pvPortMalloc+0x132>
 800752c:	4b44      	ldr	r3, [pc, #272]	@ (8007640 <pvPortMalloc+0x168>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	429a      	cmp	r2, r3
 8007534:	d869      	bhi.n	800760a <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007536:	4b43      	ldr	r3, [pc, #268]	@ (8007644 <pvPortMalloc+0x16c>)
 8007538:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800753a:	4b42      	ldr	r3, [pc, #264]	@ (8007644 <pvPortMalloc+0x16c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007540:	e004      	b.n	800754c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8007542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007544:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800754c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	429a      	cmp	r2, r3
 8007554:	d903      	bls.n	800755e <pvPortMalloc+0x86>
 8007556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1f1      	bne.n	8007542 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800755e:	4b37      	ldr	r3, [pc, #220]	@ (800763c <pvPortMalloc+0x164>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007564:	429a      	cmp	r2, r3
 8007566:	d050      	beq.n	800760a <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2208      	movs	r2, #8
 800756e:	4413      	add	r3, r2
 8007570:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800757a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757c:	685a      	ldr	r2, [r3, #4]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	1ad2      	subs	r2, r2, r3
 8007582:	2308      	movs	r3, #8
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	429a      	cmp	r2, r3
 8007588:	d920      	bls.n	80075cc <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800758a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4413      	add	r3, r2
 8007590:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f003 0307 	and.w	r3, r3, #7
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00b      	beq.n	80075b4 <pvPortMalloc+0xdc>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800759c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a0:	f383 8811 	msr	BASEPRI, r3
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80075ae:	bf00      	nop
 80075b0:	bf00      	nop
 80075b2:	e7fd      	b.n	80075b0 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	1ad2      	subs	r2, r2, r3
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80075c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075c6:	6978      	ldr	r0, [r7, #20]
 80075c8:	f000 f8fc 	bl	80077c4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075cc:	4b1c      	ldr	r3, [pc, #112]	@ (8007640 <pvPortMalloc+0x168>)
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	4a1a      	ldr	r2, [pc, #104]	@ (8007640 <pvPortMalloc+0x168>)
 80075d8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075da:	4b19      	ldr	r3, [pc, #100]	@ (8007640 <pvPortMalloc+0x168>)
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	4b1a      	ldr	r3, [pc, #104]	@ (8007648 <pvPortMalloc+0x170>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d203      	bcs.n	80075ee <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075e6:	4b16      	ldr	r3, [pc, #88]	@ (8007640 <pvPortMalloc+0x168>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a17      	ldr	r2, [pc, #92]	@ (8007648 <pvPortMalloc+0x170>)
 80075ec:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80075ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80075f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f8:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80075fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fc:	2200      	movs	r2, #0
 80075fe:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007600:	4b12      	ldr	r3, [pc, #72]	@ (800764c <pvPortMalloc+0x174>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3301      	adds	r3, #1
 8007606:	4a11      	ldr	r2, [pc, #68]	@ (800764c <pvPortMalloc+0x174>)
 8007608:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800760a:	f001 f809 	bl	8008620 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	f003 0307 	and.w	r3, r3, #7
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00b      	beq.n	8007630 <pvPortMalloc+0x158>
        __asm volatile
 8007618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761c:	f383 8811 	msr	BASEPRI, r3
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	60fb      	str	r3, [r7, #12]
    }
 800762a:	bf00      	nop
 800762c:	bf00      	nop
 800762e:	e7fd      	b.n	800762c <pvPortMalloc+0x154>
    return pvReturn;
 8007630:	69fb      	ldr	r3, [r7, #28]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3728      	adds	r7, #40	@ 0x28
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	20004760 	.word	0x20004760
 8007640:	20004764 	.word	0x20004764
 8007644:	20004758 	.word	0x20004758
 8007648:	20004768 	.word	0x20004768
 800764c:	2000476c 	.word	0x2000476c

08007650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d04b      	beq.n	80076fa <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007662:	2308      	movs	r3, #8
 8007664:	425b      	negs	r3, r3
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	4413      	add	r3, r2
 800766a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	db0b      	blt.n	8007690 <vPortFree+0x40>
        __asm volatile
 8007678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	60fb      	str	r3, [r7, #12]
    }
 800768a:	bf00      	nop
 800768c:	bf00      	nop
 800768e:	e7fd      	b.n	800768c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00b      	beq.n	80076b0 <vPortFree+0x60>
        __asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	60bb      	str	r3, [r7, #8]
    }
 80076aa:	bf00      	nop
 80076ac:	bf00      	nop
 80076ae:	e7fd      	b.n	80076ac <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	0fdb      	lsrs	r3, r3, #31
 80076b6:	f003 0301 	and.w	r3, r3, #1
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d01c      	beq.n	80076fa <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d118      	bne.n	80076fa <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80076d4:	f000 ff96 	bl	8008604 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	4b09      	ldr	r3, [pc, #36]	@ (8007704 <vPortFree+0xb4>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4413      	add	r3, r2
 80076e2:	4a08      	ldr	r2, [pc, #32]	@ (8007704 <vPortFree+0xb4>)
 80076e4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076e6:	6938      	ldr	r0, [r7, #16]
 80076e8:	f000 f86c 	bl	80077c4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80076ec:	4b06      	ldr	r3, [pc, #24]	@ (8007708 <vPortFree+0xb8>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	3301      	adds	r3, #1
 80076f2:	4a05      	ldr	r2, [pc, #20]	@ (8007708 <vPortFree+0xb8>)
 80076f4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80076f6:	f000 ff93 	bl	8008620 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80076fa:	bf00      	nop
 80076fc:	3718      	adds	r7, #24
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	20004764 	.word	0x20004764
 8007708:	20004770 	.word	0x20004770

0800770c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007712:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007716:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007718:	4b25      	ldr	r3, [pc, #148]	@ (80077b0 <prvHeapInit+0xa4>)
 800771a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f003 0307 	and.w	r3, r3, #7
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00c      	beq.n	8007740 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3307      	adds	r3, #7
 800772a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f023 0307 	bic.w	r3, r3, #7
 8007732:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	4a1d      	ldr	r2, [pc, #116]	@ (80077b0 <prvHeapInit+0xa4>)
 800773c:	4413      	add	r3, r2
 800773e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007744:	4a1b      	ldr	r2, [pc, #108]	@ (80077b4 <prvHeapInit+0xa8>)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800774a:	4b1a      	ldr	r3, [pc, #104]	@ (80077b4 <prvHeapInit+0xa8>)
 800774c:	2200      	movs	r2, #0
 800774e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	4413      	add	r3, r2
 8007756:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007758:	2208      	movs	r2, #8
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	1a9b      	subs	r3, r3, r2
 800775e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f023 0307 	bic.w	r3, r3, #7
 8007766:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	4a13      	ldr	r2, [pc, #76]	@ (80077b8 <prvHeapInit+0xac>)
 800776c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800776e:	4b12      	ldr	r3, [pc, #72]	@ (80077b8 <prvHeapInit+0xac>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2200      	movs	r2, #0
 8007774:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007776:	4b10      	ldr	r3, [pc, #64]	@ (80077b8 <prvHeapInit+0xac>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2200      	movs	r2, #0
 800777c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	1ad2      	subs	r2, r2, r3
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800778c:	4b0a      	ldr	r3, [pc, #40]	@ (80077b8 <prvHeapInit+0xac>)
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	4a08      	ldr	r2, [pc, #32]	@ (80077bc <prvHeapInit+0xb0>)
 800779a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	4a07      	ldr	r2, [pc, #28]	@ (80077c0 <prvHeapInit+0xb4>)
 80077a2:	6013      	str	r3, [r2, #0]
}
 80077a4:	bf00      	nop
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	20000b58 	.word	0x20000b58
 80077b4:	20004758 	.word	0x20004758
 80077b8:	20004760 	.word	0x20004760
 80077bc:	20004768 	.word	0x20004768
 80077c0:	20004764 	.word	0x20004764

080077c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077cc:	4b28      	ldr	r3, [pc, #160]	@ (8007870 <prvInsertBlockIntoFreeList+0xac>)
 80077ce:	60fb      	str	r3, [r7, #12]
 80077d0:	e002      	b.n	80077d8 <prvInsertBlockIntoFreeList+0x14>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d8f7      	bhi.n	80077d2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	4413      	add	r3, r2
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d108      	bne.n	8007806 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	441a      	add	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	441a      	add	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	429a      	cmp	r2, r3
 8007818:	d118      	bne.n	800784c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	4b15      	ldr	r3, [pc, #84]	@ (8007874 <prvInsertBlockIntoFreeList+0xb0>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	429a      	cmp	r2, r3
 8007824:	d00d      	beq.n	8007842 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	441a      	add	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	e008      	b.n	8007854 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007842:	4b0c      	ldr	r3, [pc, #48]	@ (8007874 <prvInsertBlockIntoFreeList+0xb0>)
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	e003      	b.n	8007854 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	429a      	cmp	r2, r3
 800785a:	d002      	beq.n	8007862 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007862:	bf00      	nop
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	20004758 	.word	0x20004758
 8007874:	20004760 	.word	0x20004760

08007878 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f103 0208 	add.w	r2, r3, #8
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f04f 32ff 	mov.w	r2, #4294967295
 8007890:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f103 0208 	add.w	r2, r3, #8
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f103 0208 	add.w	r2, r3, #8
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80078c6:	bf00      	nop
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80078d2:	b480      	push	{r7}
 80078d4:	b085      	sub	sp, #20
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e8:	d103      	bne.n	80078f2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	60fb      	str	r3, [r7, #12]
 80078f0:	e00c      	b.n	800790c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	3308      	adds	r3, #8
 80078f6:	60fb      	str	r3, [r7, #12]
 80078f8:	e002      	b.n	8007900 <vListInsert+0x2e>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	429a      	cmp	r2, r3
 800790a:	d2f6      	bcs.n	80078fa <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	685a      	ldr	r2, [r3, #4]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	683a      	ldr	r2, [r7, #0]
 8007926:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	601a      	str	r2, [r3, #0]
}
 8007938:	bf00      	nop
 800793a:	3714      	adds	r7, #20
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	6892      	ldr	r2, [r2, #8]
 800795a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	6852      	ldr	r2, [r2, #4]
 8007964:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	429a      	cmp	r2, r3
 800796e:	d103      	bne.n	8007978 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	689a      	ldr	r2, [r3, #8]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	1e5a      	subs	r2, r3, #1
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b086      	sub	sp, #24
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80079a2:	2301      	movs	r3, #1
 80079a4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10b      	bne.n	80079c8 <xQueueGenericReset+0x30>
        __asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	60fb      	str	r3, [r7, #12]
    }
 80079c2:	bf00      	nop
 80079c4:	bf00      	nop
 80079c6:	e7fd      	b.n	80079c4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d05d      	beq.n	8007a8a <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d059      	beq.n	8007a8a <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079de:	2100      	movs	r1, #0
 80079e0:	fba3 2302 	umull	r2, r3, r3, r2
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d000      	beq.n	80079ea <xQueueGenericReset+0x52>
 80079e8:	2101      	movs	r1, #1
 80079ea:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d14c      	bne.n	8007a8a <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80079f0:	f001 fec4 	bl	800977c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079fc:	6939      	ldr	r1, [r7, #16]
 80079fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007a00:	fb01 f303 	mul.w	r3, r1, r3
 8007a04:	441a      	add	r2, r3
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a20:	3b01      	subs	r3, #1
 8007a22:	6939      	ldr	r1, [r7, #16]
 8007a24:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007a26:	fb01 f303 	mul.w	r3, r1, r3
 8007a2a:	441a      	add	r2, r3
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	22ff      	movs	r2, #255	@ 0xff
 8007a34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	22ff      	movs	r2, #255	@ 0xff
 8007a3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d114      	bne.n	8007a70 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d01a      	beq.n	8007a84 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	3310      	adds	r3, #16
 8007a52:	4618      	mov	r0, r3
 8007a54:	f001 f896 	bl	8008b84 <xTaskRemoveFromEventList>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d012      	beq.n	8007a84 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007a5e:	4b16      	ldr	r3, [pc, #88]	@ (8007ab8 <xQueueGenericReset+0x120>)
 8007a60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	e009      	b.n	8007a84 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	3310      	adds	r3, #16
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7ff feff 	bl	8007878 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	3324      	adds	r3, #36	@ 0x24
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7ff fefa 	bl	8007878 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8007a84:	f001 feac 	bl	80097e0 <vPortExitCritical>
 8007a88:	e001      	b.n	8007a8e <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10b      	bne.n	8007aac <xQueueGenericReset+0x114>
        __asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	60bb      	str	r3, [r7, #8]
    }
 8007aa6:	bf00      	nop
 8007aa8:	bf00      	nop
 8007aaa:	e7fd      	b.n	8007aa8 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8007aac:	697b      	ldr	r3, [r7, #20]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	e000ed04 	.word	0xe000ed04

08007abc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08a      	sub	sp, #40	@ 0x28
 8007ac0:	af02      	add	r7, sp, #8
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8007aca:	2300      	movs	r3, #0
 8007acc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d02e      	beq.n	8007b32 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	fba3 2302 	umull	r2, r3, r3, r2
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d000      	beq.n	8007ae4 <xQueueGenericCreate+0x28>
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d123      	bne.n	8007b32 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8007af2:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8007af6:	d81c      	bhi.n	8007b32 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	fb02 f303 	mul.w	r3, r2, r3
 8007b00:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	3350      	adds	r3, #80	@ 0x50
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7ff fce6 	bl	80074d8 <pvPortMalloc>
 8007b0c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d01d      	beq.n	8007b50 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	3350      	adds	r3, #80	@ 0x50
 8007b1c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b1e:	79fa      	ldrb	r2, [r7, #7]
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	4613      	mov	r3, r2
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	68b9      	ldr	r1, [r7, #8]
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f000 f815 	bl	8007b5a <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8007b30:	e00e      	b.n	8007b50 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10b      	bne.n	8007b50 <xQueueGenericCreate+0x94>
        __asm volatile
 8007b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	613b      	str	r3, [r7, #16]
    }
 8007b4a:	bf00      	nop
 8007b4c:	bf00      	nop
 8007b4e:	e7fd      	b.n	8007b4c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8007b50:	69fb      	ldr	r3, [r7, #28]
    }
 8007b52:	4618      	mov	r0, r3
 8007b54:	3720      	adds	r7, #32
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b084      	sub	sp, #16
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	60f8      	str	r0, [r7, #12]
 8007b62:	60b9      	str	r1, [r7, #8]
 8007b64:	607a      	str	r2, [r7, #4]
 8007b66:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d103      	bne.n	8007b76 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	e002      	b.n	8007b7c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b88:	2101      	movs	r1, #1
 8007b8a:	69b8      	ldr	r0, [r7, #24]
 8007b8c:	f7ff ff04 	bl	8007998 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	78fa      	ldrb	r2, [r7, #3]
 8007b94:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8007b98:	bf00      	nop
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b08c      	sub	sp, #48	@ 0x30
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
 8007bac:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	62bb      	str	r3, [r7, #40]	@ 0x28

    configASSERT( pxQueue );
 8007bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10b      	bne.n	8007bd4 <xQueueGenericSend+0x34>
        __asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	623b      	str	r3, [r7, #32]
    }
 8007bce:	bf00      	nop
 8007bd0:	bf00      	nop
 8007bd2:	e7fd      	b.n	8007bd0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d103      	bne.n	8007be2 <xQueueGenericSend+0x42>
 8007bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <xQueueGenericSend+0x46>
 8007be2:	2301      	movs	r3, #1
 8007be4:	e000      	b.n	8007be8 <xQueueGenericSend+0x48>
 8007be6:	2300      	movs	r3, #0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d10b      	bne.n	8007c04 <xQueueGenericSend+0x64>
        __asm volatile
 8007bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	61fb      	str	r3, [r7, #28]
    }
 8007bfe:	bf00      	nop
 8007c00:	bf00      	nop
 8007c02:	e7fd      	b.n	8007c00 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d103      	bne.n	8007c12 <xQueueGenericSend+0x72>
 8007c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d101      	bne.n	8007c16 <xQueueGenericSend+0x76>
 8007c12:	2301      	movs	r3, #1
 8007c14:	e000      	b.n	8007c18 <xQueueGenericSend+0x78>
 8007c16:	2300      	movs	r3, #0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10b      	bne.n	8007c34 <xQueueGenericSend+0x94>
        __asm volatile
 8007c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	61bb      	str	r3, [r7, #24]
    }
 8007c2e:	bf00      	nop
 8007c30:	bf00      	nop
 8007c32:	e7fd      	b.n	8007c30 <xQueueGenericSend+0x90>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8007c34:	f001 fda2 	bl	800977c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d302      	bcc.n	8007c4a <xQueueGenericSend+0xaa>
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d129      	bne.n	8007c9e <xQueueGenericSend+0xfe>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	68b9      	ldr	r1, [r7, #8]
 8007c4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c50:	f000 fa10 	bl	8008074 <prvCopyDataToQueue>
 8007c54:	6278      	str	r0, [r7, #36]	@ 0x24

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d010      	beq.n	8007c80 <xQueueGenericSend+0xe0>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c60:	3324      	adds	r3, #36	@ 0x24
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 ff8e 	bl	8008b84 <xTaskRemoveFromEventList>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d013      	beq.n	8007c96 <xQueueGenericSend+0xf6>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8007c6e:	4b40      	ldr	r3, [pc, #256]	@ (8007d70 <xQueueGenericSend+0x1d0>)
 8007c70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c74:	601a      	str	r2, [r3, #0]
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	e00a      	b.n	8007c96 <xQueueGenericSend+0xf6>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8007c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d007      	beq.n	8007c96 <xQueueGenericSend+0xf6>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8007c86:	4b3a      	ldr	r3, [pc, #232]	@ (8007d70 <xQueueGenericSend+0x1d0>)
 8007c88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8007c96:	f001 fda3 	bl	80097e0 <vPortExitCritical>
                return pdPASS;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e063      	b.n	8007d66 <xQueueGenericSend+0x1c6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d103      	bne.n	8007cac <xQueueGenericSend+0x10c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8007ca4:	f001 fd9c 	bl	80097e0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	e05c      	b.n	8007d66 <xQueueGenericSend+0x1c6>
                }
                else if( xEntryTimeSet == pdFALSE )
 8007cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d106      	bne.n	8007cc0 <xQueueGenericSend+0x120>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007cb2:	f107 0310 	add.w	r3, r7, #16
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f001 f83c 	bl	8008d34 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8007cc0:	f001 fd8e 	bl	80097e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8007cc4:	f000 fc9e 	bl	8008604 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007cc8:	f001 fd58 	bl	800977c <vPortEnterCritical>
 8007ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007cd2:	b25b      	sxtb	r3, r3
 8007cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd8:	d103      	bne.n	8007ce2 <xQueueGenericSend+0x142>
 8007cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ce8:	b25b      	sxtb	r3, r3
 8007cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cee:	d103      	bne.n	8007cf8 <xQueueGenericSend+0x158>
 8007cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cf8:	f001 fd72 	bl	80097e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cfc:	1d3a      	adds	r2, r7, #4
 8007cfe:	f107 0310 	add.w	r3, r7, #16
 8007d02:	4611      	mov	r1, r2
 8007d04:	4618      	mov	r0, r3
 8007d06:	f001 f82b 	bl	8008d60 <xTaskCheckForTimeOut>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d124      	bne.n	8007d5a <xQueueGenericSend+0x1ba>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007d10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d12:	f000 faa7 	bl	8008264 <prvIsQueueFull>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d018      	beq.n	8007d4e <xQueueGenericSend+0x1ae>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d1e:	3310      	adds	r3, #16
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	4611      	mov	r1, r2
 8007d24:	4618      	mov	r0, r3
 8007d26:	f000 ff07 	bl	8008b38 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8007d2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d2c:	f000 fa32 	bl	8008194 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8007d30:	f000 fc76 	bl	8008620 <xTaskResumeAll>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f47f af7c 	bne.w	8007c34 <xQueueGenericSend+0x94>
                {
                    portYIELD_WITHIN_API();
 8007d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007d70 <xQueueGenericSend+0x1d0>)
 8007d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	e772      	b.n	8007c34 <xQueueGenericSend+0x94>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8007d4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d50:	f000 fa20 	bl	8008194 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8007d54:	f000 fc64 	bl	8008620 <xTaskResumeAll>
 8007d58:	e76c      	b.n	8007c34 <xQueueGenericSend+0x94>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8007d5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d5c:	f000 fa1a 	bl	8008194 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8007d60:	f000 fc5e 	bl	8008620 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8007d64:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3730      	adds	r7, #48	@ 0x30
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	e000ed04 	.word	0xe000ed04

08007d74 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b092      	sub	sp, #72	@ 0x48
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
 8007d80:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	643b      	str	r3, [r7, #64]	@ 0x40

    configASSERT( pxQueue );
 8007d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10b      	bne.n	8007da4 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8007d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d90:	f383 8811 	msr	BASEPRI, r3
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8007d9e:	bf00      	nop
 8007da0:	bf00      	nop
 8007da2:	e7fd      	b.n	8007da0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d103      	bne.n	8007db2 <xQueueGenericSendFromISR+0x3e>
 8007daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <xQueueGenericSendFromISR+0x42>
 8007db2:	2301      	movs	r3, #1
 8007db4:	e000      	b.n	8007db8 <xQueueGenericSendFromISR+0x44>
 8007db6:	2300      	movs	r3, #0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10b      	bne.n	8007dd4 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8007dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8007dce:	bf00      	nop
 8007dd0:	bf00      	nop
 8007dd2:	e7fd      	b.n	8007dd0 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d103      	bne.n	8007de2 <xQueueGenericSendFromISR+0x6e>
 8007dda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d101      	bne.n	8007de6 <xQueueGenericSendFromISR+0x72>
 8007de2:	2301      	movs	r3, #1
 8007de4:	e000      	b.n	8007de8 <xQueueGenericSendFromISR+0x74>
 8007de6:	2300      	movs	r3, #0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10b      	bne.n	8007e04 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8007dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8007dfe:	bf00      	nop
 8007e00:	bf00      	nop
 8007e02:	e7fd      	b.n	8007e00 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e04:	f001 fda2 	bl	800994c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8007e08:	f3ef 8211 	mrs	r2, BASEPRI
 8007e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	623a      	str	r2, [r7, #32]
 8007e1e:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8007e20:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d302      	bcc.n	8007e36 <xQueueGenericSendFromISR+0xc2>
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d147      	bne.n	8007ec6 <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8007e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e3c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e44:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	68b9      	ldr	r1, [r7, #8]
 8007e4a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8007e4c:	f000 f912 	bl	8008074 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8007e50:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8007e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e58:	d112      	bne.n	8007e80 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d02e      	beq.n	8007ec0 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e64:	3324      	adds	r3, #36	@ 0x24
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 fe8c 	bl	8008b84 <xTaskRemoveFromEventList>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d026      	beq.n	8007ec0 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d023      	beq.n	8007ec0 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	601a      	str	r2, [r3, #0]
 8007e7e:	e01f      	b.n	8007ec0 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8007e80:	f000 fcca 	bl	8008818 <uxTaskGetNumberOfTasks>
 8007e84:	6338      	str	r0, [r7, #48]	@ 0x30
 8007e86:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8007e8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d917      	bls.n	8007ec0 <xQueueGenericSendFromISR+0x14c>
 8007e90:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8007e94:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e96:	d10b      	bne.n	8007eb0 <xQueueGenericSendFromISR+0x13c>
        __asm volatile
 8007e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	61bb      	str	r3, [r7, #24]
    }
 8007eaa:	bf00      	nop
 8007eac:	bf00      	nop
 8007eae:	e7fd      	b.n	8007eac <xQueueGenericSendFromISR+0x138>
 8007eb0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	b25a      	sxtb	r2, r3
 8007eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ebc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8007ec4:	e001      	b.n	8007eca <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ecc:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8007ed4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8007ed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3748      	adds	r7, #72	@ 0x48
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b08c      	sub	sp, #48	@ 0x30
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8007eec:	2300      	movs	r3, #0
 8007eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8007ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10b      	bne.n	8007f12 <xQueueReceive+0x32>
        __asm volatile
 8007efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	623b      	str	r3, [r7, #32]
    }
 8007f0c:	bf00      	nop
 8007f0e:	bf00      	nop
 8007f10:	e7fd      	b.n	8007f0e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d103      	bne.n	8007f20 <xQueueReceive+0x40>
 8007f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d101      	bne.n	8007f24 <xQueueReceive+0x44>
 8007f20:	2301      	movs	r3, #1
 8007f22:	e000      	b.n	8007f26 <xQueueReceive+0x46>
 8007f24:	2300      	movs	r3, #0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10b      	bne.n	8007f42 <xQueueReceive+0x62>
        __asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	61fb      	str	r3, [r7, #28]
    }
 8007f3c:	bf00      	nop
 8007f3e:	bf00      	nop
 8007f40:	e7fd      	b.n	8007f3e <xQueueReceive+0x5e>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8007f42:	f001 fc1b 	bl	800977c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f4a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d01f      	beq.n	8007f92 <xQueueReceive+0xb2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f52:	68b9      	ldr	r1, [r7, #8]
 8007f54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f56:	f000 f8f7 	bl	8008148 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5c:	1e5a      	subs	r2, r3, #1
 8007f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f60:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00f      	beq.n	8007f8a <xQueueReceive+0xaa>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f6c:	3310      	adds	r3, #16
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 fe08 	bl	8008b84 <xTaskRemoveFromEventList>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d007      	beq.n	8007f8a <xQueueReceive+0xaa>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007f7a:	4b3d      	ldr	r3, [pc, #244]	@ (8008070 <xQueueReceive+0x190>)
 8007f7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8007f8a:	f001 fc29 	bl	80097e0 <vPortExitCritical>
                return pdPASS;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e069      	b.n	8008066 <xQueueReceive+0x186>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d103      	bne.n	8007fa0 <xQueueReceive+0xc0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8007f98:	f001 fc22 	bl	80097e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	e062      	b.n	8008066 <xQueueReceive+0x186>
                }
                else if( xEntryTimeSet == pdFALSE )
 8007fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d106      	bne.n	8007fb4 <xQueueReceive+0xd4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007fa6:	f107 0314 	add.w	r3, r7, #20
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 fec2 	bl	8008d34 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8007fb4:	f001 fc14 	bl	80097e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8007fb8:	f000 fb24 	bl	8008604 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007fbc:	f001 fbde 	bl	800977c <vPortEnterCritical>
 8007fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007fc6:	b25b      	sxtb	r3, r3
 8007fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fcc:	d103      	bne.n	8007fd6 <xQueueReceive+0xf6>
 8007fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007fdc:	b25b      	sxtb	r3, r3
 8007fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe2:	d103      	bne.n	8007fec <xQueueReceive+0x10c>
 8007fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007fec:	f001 fbf8 	bl	80097e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ff0:	1d3a      	adds	r2, r7, #4
 8007ff2:	f107 0314 	add.w	r3, r7, #20
 8007ff6:	4611      	mov	r1, r2
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 feb1 	bl	8008d60 <xTaskCheckForTimeOut>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d123      	bne.n	800804c <xQueueReceive+0x16c>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008004:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008006:	f000 f917 	bl	8008238 <prvIsQueueEmpty>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d017      	beq.n	8008040 <xQueueReceive+0x160>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008012:	3324      	adds	r3, #36	@ 0x24
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	4611      	mov	r1, r2
 8008018:	4618      	mov	r0, r3
 800801a:	f000 fd8d 	bl	8008b38 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800801e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008020:	f000 f8b8 	bl	8008194 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8008024:	f000 fafc 	bl	8008620 <xTaskResumeAll>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d189      	bne.n	8007f42 <xQueueReceive+0x62>
                {
                    portYIELD_WITHIN_API();
 800802e:	4b10      	ldr	r3, [pc, #64]	@ (8008070 <xQueueReceive+0x190>)
 8008030:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008034:	601a      	str	r2, [r3, #0]
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	e780      	b.n	8007f42 <xQueueReceive+0x62>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8008040:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008042:	f000 f8a7 	bl	8008194 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008046:	f000 faeb 	bl	8008620 <xTaskResumeAll>
 800804a:	e77a      	b.n	8007f42 <xQueueReceive+0x62>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800804c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800804e:	f000 f8a1 	bl	8008194 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008052:	f000 fae5 	bl	8008620 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008056:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008058:	f000 f8ee 	bl	8008238 <prvIsQueueEmpty>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	f43f af6f 	beq.w	8007f42 <xQueueReceive+0x62>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8008064:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8008066:	4618      	mov	r0, r3
 8008068:	3730      	adds	r7, #48	@ 0x30
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	e000ed04 	.word	0xe000ed04

08008074 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8008080:	2300      	movs	r3, #0
 8008082:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008088:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10d      	bne.n	80080ae <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d14d      	bne.n	8008136 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 ff86 	bl	8008fb0 <xTaskPriorityDisinherit>
 80080a4:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	609a      	str	r2, [r3, #8]
 80080ac:	e043      	b.n	8008136 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d119      	bne.n	80080e8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6858      	ldr	r0, [r3, #4]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080bc:	461a      	mov	r2, r3
 80080be:	68b9      	ldr	r1, [r7, #8]
 80080c0:	f003 fc4b 	bl	800b95a <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	685a      	ldr	r2, [r3, #4]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080cc:	441a      	add	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	685a      	ldr	r2, [r3, #4]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d32b      	bcc.n	8008136 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	605a      	str	r2, [r3, #4]
 80080e6:	e026      	b.n	8008136 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	68d8      	ldr	r0, [r3, #12]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080f0:	461a      	mov	r2, r3
 80080f2:	68b9      	ldr	r1, [r7, #8]
 80080f4:	f003 fc31 	bl	800b95a <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	68da      	ldr	r2, [r3, #12]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008100:	425b      	negs	r3, r3
 8008102:	441a      	add	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	68da      	ldr	r2, [r3, #12]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	429a      	cmp	r2, r3
 8008112:	d207      	bcs.n	8008124 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	689a      	ldr	r2, [r3, #8]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800811c:	425b      	negs	r3, r3
 800811e:	441a      	add	r2, r3
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b02      	cmp	r3, #2
 8008128:	d105      	bne.n	8008136 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d002      	beq.n	8008136 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	3b01      	subs	r3, #1
 8008134:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800813e:	697b      	ldr	r3, [r7, #20]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3718      	adds	r7, #24
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008156:	2b00      	cmp	r3, #0
 8008158:	d018      	beq.n	800818c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68da      	ldr	r2, [r3, #12]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008162:	441a      	add	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	68da      	ldr	r2, [r3, #12]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	429a      	cmp	r2, r3
 8008172:	d303      	bcc.n	800817c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68d9      	ldr	r1, [r3, #12]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008184:	461a      	mov	r2, r3
 8008186:	6838      	ldr	r0, [r7, #0]
 8008188:	f003 fbe7 	bl	800b95a <memcpy>
    }
}
 800818c:	bf00      	nop
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800819c:	f001 faee 	bl	800977c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081a6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80081a8:	e011      	b.n	80081ce <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d012      	beq.n	80081d8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	3324      	adds	r3, #36	@ 0x24
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 fce4 	bl	8008b84 <xTaskRemoveFromEventList>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80081c2:	f000 fe35 	bl	8008e30 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80081c6:	7bfb      	ldrb	r3, [r7, #15]
 80081c8:	3b01      	subs	r3, #1
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80081ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	dce9      	bgt.n	80081aa <prvUnlockQueue+0x16>
 80081d6:	e000      	b.n	80081da <prvUnlockQueue+0x46>
                    break;
 80081d8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	22ff      	movs	r2, #255	@ 0xff
 80081de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80081e2:	f001 fafd 	bl	80097e0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80081e6:	f001 fac9 	bl	800977c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081f0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80081f2:	e011      	b.n	8008218 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d012      	beq.n	8008222 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	3310      	adds	r3, #16
 8008200:	4618      	mov	r0, r3
 8008202:	f000 fcbf 	bl	8008b84 <xTaskRemoveFromEventList>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d001      	beq.n	8008210 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800820c:	f000 fe10 	bl	8008e30 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8008210:	7bbb      	ldrb	r3, [r7, #14]
 8008212:	3b01      	subs	r3, #1
 8008214:	b2db      	uxtb	r3, r3
 8008216:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800821c:	2b00      	cmp	r3, #0
 800821e:	dce9      	bgt.n	80081f4 <prvUnlockQueue+0x60>
 8008220:	e000      	b.n	8008224 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8008222:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	22ff      	movs	r2, #255	@ 0xff
 8008228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800822c:	f001 fad8 	bl	80097e0 <vPortExitCritical>
}
 8008230:	bf00      	nop
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8008240:	f001 fa9c 	bl	800977c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008248:	2b00      	cmp	r3, #0
 800824a:	d102      	bne.n	8008252 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800824c:	2301      	movs	r3, #1
 800824e:	60fb      	str	r3, [r7, #12]
 8008250:	e001      	b.n	8008256 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8008252:	2300      	movs	r3, #0
 8008254:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8008256:	f001 fac3 	bl	80097e0 <vPortExitCritical>

    return xReturn;
 800825a:	68fb      	ldr	r3, [r7, #12]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800826c:	f001 fa86 	bl	800977c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008278:	429a      	cmp	r2, r3
 800827a:	d102      	bne.n	8008282 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800827c:	2301      	movs	r3, #1
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	e001      	b.n	8008286 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8008286:	f001 faab 	bl	80097e0 <vPortExitCritical>

    return xReturn;
 800828a:	68fb      	ldr	r3, [r7, #12]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8008294:	b580      	push	{r7, lr}
 8008296:	b08c      	sub	sp, #48	@ 0x30
 8008298:	af04      	add	r7, sp, #16
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	603b      	str	r3, [r7, #0]
 80082a0:	4613      	mov	r3, r2
 80082a2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80082a4:	88fb      	ldrh	r3, [r7, #6]
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7ff f915 	bl	80074d8 <pvPortMalloc>
 80082ae:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d013      	beq.n	80082de <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80082b6:	2080      	movs	r0, #128	@ 0x80
 80082b8:	f7ff f90e 	bl	80074d8 <pvPortMalloc>
 80082bc:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d008      	beq.n	80082d6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80082c4:	2280      	movs	r2, #128	@ 0x80
 80082c6:	2100      	movs	r1, #0
 80082c8:	69f8      	ldr	r0, [r7, #28]
 80082ca:	f003 fa08 	bl	800b6de <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80082d4:	e005      	b.n	80082e2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80082d6:	6978      	ldr	r0, [r7, #20]
 80082d8:	f7ff f9ba 	bl	8007650 <vPortFree>
 80082dc:	e001      	b.n	80082e2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80082de:	2300      	movs	r3, #0
 80082e0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d013      	beq.n	8008310 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082e8:	88fa      	ldrh	r2, [r7, #6]
 80082ea:	2300      	movs	r3, #0
 80082ec:	9303      	str	r3, [sp, #12]
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	9302      	str	r3, [sp, #8]
 80082f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f4:	9301      	str	r3, [sp, #4]
 80082f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	68b9      	ldr	r1, [r7, #8]
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f000 f80e 	bl	8008320 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8008304:	69f8      	ldr	r0, [r7, #28]
 8008306:	f000 f89b 	bl	8008440 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800830a:	2301      	movs	r3, #1
 800830c:	61bb      	str	r3, [r7, #24]
 800830e:	e002      	b.n	8008316 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008310:	f04f 33ff 	mov.w	r3, #4294967295
 8008314:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8008316:	69bb      	ldr	r3, [r7, #24]
    }
 8008318:	4618      	mov	r0, r3
 800831a:	3720      	adds	r7, #32
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b088      	sub	sp, #32
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800832e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008330:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	461a      	mov	r2, r3
 8008338:	21a5      	movs	r1, #165	@ 0xa5
 800833a:	f003 f9d0 	bl	800b6de <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800833e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008340:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008348:	3b01      	subs	r3, #1
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4413      	add	r3, r2
 800834e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	f023 0307 	bic.w	r3, r3, #7
 8008356:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	f003 0307 	and.w	r3, r3, #7
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00b      	beq.n	800837a <prvInitialiseNewTask+0x5a>
        __asm volatile
 8008362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008366:	f383 8811 	msr	BASEPRI, r3
 800836a:	f3bf 8f6f 	isb	sy
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	617b      	str	r3, [r7, #20]
    }
 8008374:	bf00      	nop
 8008376:	bf00      	nop
 8008378:	e7fd      	b.n	8008376 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d01e      	beq.n	80083be <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008380:	2300      	movs	r3, #0
 8008382:	61fb      	str	r3, [r7, #28]
 8008384:	e012      	b.n	80083ac <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	4413      	add	r3, r2
 800838c:	7819      	ldrb	r1, [r3, #0]
 800838e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	4413      	add	r3, r2
 8008394:	3334      	adds	r3, #52	@ 0x34
 8008396:	460a      	mov	r2, r1
 8008398:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	4413      	add	r3, r2
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d006      	beq.n	80083b4 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	3301      	adds	r3, #1
 80083aa:	61fb      	str	r3, [r7, #28]
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	2b31      	cmp	r3, #49	@ 0x31
 80083b0:	d9e9      	bls.n	8008386 <prvInitialiseNewTask+0x66>
 80083b2:	e000      	b.n	80083b6 <prvInitialiseNewTask+0x96>
            {
                break;
 80083b4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80083b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80083be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c0:	2b04      	cmp	r3, #4
 80083c2:	d90b      	bls.n	80083dc <prvInitialiseNewTask+0xbc>
        __asm volatile
 80083c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	613b      	str	r3, [r7, #16]
    }
 80083d6:	bf00      	nop
 80083d8:	bf00      	nop
 80083da:	e7fd      	b.n	80083d8 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083de:	2b04      	cmp	r3, #4
 80083e0:	d901      	bls.n	80083e6 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80083e2:	2304      	movs	r3, #4
 80083e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80083e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80083ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083f0:	671a      	str	r2, [r3, #112]	@ 0x70
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f4:	3304      	adds	r3, #4
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7ff fa5e 	bl	80078b8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80083fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fe:	3318      	adds	r3, #24
 8008400:	4618      	mov	r0, r3
 8008402:	f7ff fa59 	bl	80078b8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800840a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800840c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840e:	f1c3 0205 	rsb	r2, r3, #5
 8008412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008414:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800841a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800841c:	683a      	ldr	r2, [r7, #0]
 800841e:	68f9      	ldr	r1, [r7, #12]
 8008420:	69b8      	ldr	r0, [r7, #24]
 8008422:	f001 f879 	bl	8009518 <pxPortInitialiseStack>
 8008426:	4602      	mov	r2, r0
 8008428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800842c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800842e:	2b00      	cmp	r3, #0
 8008430:	d002      	beq.n	8008438 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008436:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008438:	bf00      	nop
 800843a:	3720      	adds	r7, #32
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8008448:	f001 f998 	bl	800977c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800844c:	4b40      	ldr	r3, [pc, #256]	@ (8008550 <prvAddNewTaskToReadyList+0x110>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	3301      	adds	r3, #1
 8008452:	4a3f      	ldr	r2, [pc, #252]	@ (8008550 <prvAddNewTaskToReadyList+0x110>)
 8008454:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8008456:	4b3f      	ldr	r3, [pc, #252]	@ (8008554 <prvAddNewTaskToReadyList+0x114>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d109      	bne.n	8008472 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800845e:	4a3d      	ldr	r2, [pc, #244]	@ (8008554 <prvAddNewTaskToReadyList+0x114>)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008464:	4b3a      	ldr	r3, [pc, #232]	@ (8008550 <prvAddNewTaskToReadyList+0x110>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d110      	bne.n	800848e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800846c:	f000 fd06 	bl	8008e7c <prvInitialiseTaskLists>
 8008470:	e00d      	b.n	800848e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8008472:	4b39      	ldr	r3, [pc, #228]	@ (8008558 <prvAddNewTaskToReadyList+0x118>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d109      	bne.n	800848e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800847a:	4b36      	ldr	r3, [pc, #216]	@ (8008554 <prvAddNewTaskToReadyList+0x114>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008484:	429a      	cmp	r2, r3
 8008486:	d802      	bhi.n	800848e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8008488:	4a32      	ldr	r2, [pc, #200]	@ (8008554 <prvAddNewTaskToReadyList+0x114>)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800848e:	4b33      	ldr	r3, [pc, #204]	@ (800855c <prvAddNewTaskToReadyList+0x11c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3301      	adds	r3, #1
 8008494:	4a31      	ldr	r2, [pc, #196]	@ (800855c <prvAddNewTaskToReadyList+0x11c>)
 8008496:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008498:	4b30      	ldr	r3, [pc, #192]	@ (800855c <prvAddNewTaskToReadyList+0x11c>)
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	669a      	str	r2, [r3, #104]	@ 0x68
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a4:	2201      	movs	r2, #1
 80084a6:	409a      	lsls	r2, r3
 80084a8:	4b2d      	ldr	r3, [pc, #180]	@ (8008560 <prvAddNewTaskToReadyList+0x120>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	4a2c      	ldr	r2, [pc, #176]	@ (8008560 <prvAddNewTaskToReadyList+0x120>)
 80084b0:	6013      	str	r3, [r2, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084b6:	492b      	ldr	r1, [pc, #172]	@ (8008564 <prvAddNewTaskToReadyList+0x124>)
 80084b8:	4613      	mov	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	440b      	add	r3, r1
 80084c2:	3304      	adds	r3, #4
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	60fb      	str	r3, [r7, #12]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	609a      	str	r2, [r3, #8]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	689a      	ldr	r2, [r3, #8]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	60da      	str	r2, [r3, #12]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	3204      	adds	r2, #4
 80084de:	605a      	str	r2, [r3, #4]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	1d1a      	adds	r2, r3, #4
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	609a      	str	r2, [r3, #8]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ec:	4613      	mov	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4413      	add	r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4a1b      	ldr	r2, [pc, #108]	@ (8008564 <prvAddNewTaskToReadyList+0x124>)
 80084f6:	441a      	add	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	615a      	str	r2, [r3, #20]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008500:	4918      	ldr	r1, [pc, #96]	@ (8008564 <prvAddNewTaskToReadyList+0x124>)
 8008502:	4613      	mov	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4413      	add	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	440b      	add	r3, r1
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	1c59      	adds	r1, r3, #1
 8008510:	4814      	ldr	r0, [pc, #80]	@ (8008564 <prvAddNewTaskToReadyList+0x124>)
 8008512:	4613      	mov	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4413      	add	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4403      	add	r3, r0
 800851c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800851e:	f001 f95f 	bl	80097e0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8008522:	4b0d      	ldr	r3, [pc, #52]	@ (8008558 <prvAddNewTaskToReadyList+0x118>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00e      	beq.n	8008548 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800852a:	4b0a      	ldr	r3, [pc, #40]	@ (8008554 <prvAddNewTaskToReadyList+0x114>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008534:	429a      	cmp	r2, r3
 8008536:	d207      	bcs.n	8008548 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8008538:	4b0b      	ldr	r3, [pc, #44]	@ (8008568 <prvAddNewTaskToReadyList+0x128>)
 800853a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008548:	bf00      	nop
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	2000484c 	.word	0x2000484c
 8008554:	20004774 	.word	0x20004774
 8008558:	20004858 	.word	0x20004858
 800855c:	20004868 	.word	0x20004868
 8008560:	20004854 	.word	0x20004854
 8008564:	20004778 	.word	0x20004778
 8008568:	e000ed04 	.word	0xe000ed04

0800856c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8008572:	4b1d      	ldr	r3, [pc, #116]	@ (80085e8 <vTaskStartScheduler+0x7c>)
 8008574:	9301      	str	r3, [sp, #4]
 8008576:	2300      	movs	r3, #0
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	2300      	movs	r3, #0
 800857c:	2282      	movs	r2, #130	@ 0x82
 800857e:	491b      	ldr	r1, [pc, #108]	@ (80085ec <vTaskStartScheduler+0x80>)
 8008580:	481b      	ldr	r0, [pc, #108]	@ (80085f0 <vTaskStartScheduler+0x84>)
 8008582:	f7ff fe87 	bl	8008294 <xTaskCreate>
 8008586:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d116      	bne.n	80085bc <vTaskStartScheduler+0x50>
        __asm volatile
 800858e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	60bb      	str	r3, [r7, #8]
    }
 80085a0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80085a2:	4b14      	ldr	r3, [pc, #80]	@ (80085f4 <vTaskStartScheduler+0x88>)
 80085a4:	f04f 32ff 	mov.w	r2, #4294967295
 80085a8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80085aa:	4b13      	ldr	r3, [pc, #76]	@ (80085f8 <vTaskStartScheduler+0x8c>)
 80085ac:	2201      	movs	r2, #1
 80085ae:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80085b0:	4b12      	ldr	r3, [pc, #72]	@ (80085fc <vTaskStartScheduler+0x90>)
 80085b2:	2200      	movs	r2, #0
 80085b4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80085b6:	f001 f83d 	bl	8009634 <xPortStartScheduler>
 80085ba:	e00f      	b.n	80085dc <vTaskStartScheduler+0x70>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c2:	d10b      	bne.n	80085dc <vTaskStartScheduler+0x70>
        __asm volatile
 80085c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	607b      	str	r3, [r7, #4]
    }
 80085d6:	bf00      	nop
 80085d8:	bf00      	nop
 80085da:	e7fd      	b.n	80085d8 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80085dc:	4b08      	ldr	r3, [pc, #32]	@ (8008600 <vTaskStartScheduler+0x94>)
 80085de:	681b      	ldr	r3, [r3, #0]
}
 80085e0:	bf00      	nop
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	20004870 	.word	0x20004870
 80085ec:	0800e4e4 	.word	0x0800e4e4
 80085f0:	08008e49 	.word	0x08008e49
 80085f4:	2000486c 	.word	0x2000486c
 80085f8:	20004858 	.word	0x20004858
 80085fc:	20004850 	.word	0x20004850
 8008600:	20000018 	.word	0x20000018

08008604 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008604:	b480      	push	{r7}
 8008606:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8008608:	4b04      	ldr	r3, [pc, #16]	@ (800861c <vTaskSuspendAll+0x18>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3301      	adds	r3, #1
 800860e:	4a03      	ldr	r2, [pc, #12]	@ (800861c <vTaskSuspendAll+0x18>)
 8008610:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8008612:	bf00      	nop
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	20004874 	.word	0x20004874

08008620 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b088      	sub	sp, #32
 8008624:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8008626:	2300      	movs	r3, #0
 8008628:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800862a:	2300      	movs	r3, #0
 800862c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800862e:	4b71      	ldr	r3, [pc, #452]	@ (80087f4 <xTaskResumeAll+0x1d4>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d10b      	bne.n	800864e <xTaskResumeAll+0x2e>
        __asm volatile
 8008636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800863a:	f383 8811 	msr	BASEPRI, r3
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	607b      	str	r3, [r7, #4]
    }
 8008648:	bf00      	nop
 800864a:	bf00      	nop
 800864c:	e7fd      	b.n	800864a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800864e:	f001 f895 	bl	800977c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8008652:	4b68      	ldr	r3, [pc, #416]	@ (80087f4 <xTaskResumeAll+0x1d4>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	3b01      	subs	r3, #1
 8008658:	4a66      	ldr	r2, [pc, #408]	@ (80087f4 <xTaskResumeAll+0x1d4>)
 800865a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800865c:	4b65      	ldr	r3, [pc, #404]	@ (80087f4 <xTaskResumeAll+0x1d4>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	f040 80c0 	bne.w	80087e6 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008666:	4b64      	ldr	r3, [pc, #400]	@ (80087f8 <xTaskResumeAll+0x1d8>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	f000 80bb 	beq.w	80087e6 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008670:	e08a      	b.n	8008788 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008672:	4b62      	ldr	r3, [pc, #392]	@ (80087fc <xTaskResumeAll+0x1dc>)
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800867e:	613b      	str	r3, [r7, #16]
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	69db      	ldr	r3, [r3, #28]
 8008684:	69fa      	ldr	r2, [r7, #28]
 8008686:	6a12      	ldr	r2, [r2, #32]
 8008688:	609a      	str	r2, [r3, #8]
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	69fa      	ldr	r2, [r7, #28]
 8008690:	69d2      	ldr	r2, [r2, #28]
 8008692:	605a      	str	r2, [r3, #4]
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	3318      	adds	r3, #24
 800869c:	429a      	cmp	r2, r3
 800869e:	d103      	bne.n	80086a8 <xTaskResumeAll+0x88>
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	6a1a      	ldr	r2, [r3, #32]
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	605a      	str	r2, [r3, #4]
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	2200      	movs	r2, #0
 80086ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	1e5a      	subs	r2, r3, #1
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	695b      	ldr	r3, [r3, #20]
 80086bc:	60fb      	str	r3, [r7, #12]
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	69fa      	ldr	r2, [r7, #28]
 80086c4:	68d2      	ldr	r2, [r2, #12]
 80086c6:	609a      	str	r2, [r3, #8]
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	69fa      	ldr	r2, [r7, #28]
 80086ce:	6892      	ldr	r2, [r2, #8]
 80086d0:	605a      	str	r2, [r3, #4]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	685a      	ldr	r2, [r3, #4]
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	3304      	adds	r3, #4
 80086da:	429a      	cmp	r2, r3
 80086dc:	d103      	bne.n	80086e6 <xTaskResumeAll+0xc6>
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	68da      	ldr	r2, [r3, #12]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	605a      	str	r2, [r3, #4]
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	2200      	movs	r2, #0
 80086ea:	615a      	str	r2, [r3, #20]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	1e5a      	subs	r2, r3, #1
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086fa:	2201      	movs	r2, #1
 80086fc:	409a      	lsls	r2, r3
 80086fe:	4b40      	ldr	r3, [pc, #256]	@ (8008800 <xTaskResumeAll+0x1e0>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4313      	orrs	r3, r2
 8008704:	4a3e      	ldr	r2, [pc, #248]	@ (8008800 <xTaskResumeAll+0x1e0>)
 8008706:	6013      	str	r3, [r2, #0]
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800870c:	493d      	ldr	r1, [pc, #244]	@ (8008804 <xTaskResumeAll+0x1e4>)
 800870e:	4613      	mov	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	440b      	add	r3, r1
 8008718:	3304      	adds	r3, #4
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	60bb      	str	r3, [r7, #8]
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	609a      	str	r2, [r3, #8]
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	689a      	ldr	r2, [r3, #8]
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	60da      	str	r2, [r3, #12]
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	69fa      	ldr	r2, [r7, #28]
 8008732:	3204      	adds	r2, #4
 8008734:	605a      	str	r2, [r3, #4]
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	1d1a      	adds	r2, r3, #4
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	609a      	str	r2, [r3, #8]
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008742:	4613      	mov	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4a2e      	ldr	r2, [pc, #184]	@ (8008804 <xTaskResumeAll+0x1e4>)
 800874c:	441a      	add	r2, r3
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	615a      	str	r2, [r3, #20]
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008756:	492b      	ldr	r1, [pc, #172]	@ (8008804 <xTaskResumeAll+0x1e4>)
 8008758:	4613      	mov	r3, r2
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4413      	add	r3, r2
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	440b      	add	r3, r1
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	1c59      	adds	r1, r3, #1
 8008766:	4827      	ldr	r0, [pc, #156]	@ (8008804 <xTaskResumeAll+0x1e4>)
 8008768:	4613      	mov	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4403      	add	r3, r0
 8008772:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008778:	4b23      	ldr	r3, [pc, #140]	@ (8008808 <xTaskResumeAll+0x1e8>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800877e:	429a      	cmp	r2, r3
 8008780:	d302      	bcc.n	8008788 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8008782:	4b22      	ldr	r3, [pc, #136]	@ (800880c <xTaskResumeAll+0x1ec>)
 8008784:	2201      	movs	r2, #1
 8008786:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008788:	4b1c      	ldr	r3, [pc, #112]	@ (80087fc <xTaskResumeAll+0x1dc>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	f47f af70 	bne.w	8008672 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8008798:	f000 fbee 	bl	8008f78 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800879c:	4b1c      	ldr	r3, [pc, #112]	@ (8008810 <xTaskResumeAll+0x1f0>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d010      	beq.n	80087ca <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80087a8:	f000 f842 	bl	8008830 <xTaskIncrementTick>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d002      	beq.n	80087b8 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 80087b2:	4b16      	ldr	r3, [pc, #88]	@ (800880c <xTaskResumeAll+0x1ec>)
 80087b4:	2201      	movs	r2, #1
 80087b6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	3b01      	subs	r3, #1
 80087bc:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d1f1      	bne.n	80087a8 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 80087c4:	4b12      	ldr	r3, [pc, #72]	@ (8008810 <xTaskResumeAll+0x1f0>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80087ca:	4b10      	ldr	r3, [pc, #64]	@ (800880c <xTaskResumeAll+0x1ec>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d009      	beq.n	80087e6 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80087d2:	2301      	movs	r3, #1
 80087d4:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80087d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008814 <xTaskResumeAll+0x1f4>)
 80087d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087dc:	601a      	str	r2, [r3, #0]
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80087e6:	f000 fffb 	bl	80097e0 <vPortExitCritical>

    return xAlreadyYielded;
 80087ea:	69bb      	ldr	r3, [r7, #24]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3720      	adds	r7, #32
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	20004874 	.word	0x20004874
 80087f8:	2000484c 	.word	0x2000484c
 80087fc:	2000480c 	.word	0x2000480c
 8008800:	20004854 	.word	0x20004854
 8008804:	20004778 	.word	0x20004778
 8008808:	20004774 	.word	0x20004774
 800880c:	20004860 	.word	0x20004860
 8008810:	2000485c 	.word	0x2000485c
 8008814:	e000ed04 	.word	0xe000ed04

08008818 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8008818:	b480      	push	{r7}
 800881a:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 800881c:	4b03      	ldr	r3, [pc, #12]	@ (800882c <uxTaskGetNumberOfTasks+0x14>)
 800881e:	681b      	ldr	r3, [r3, #0]
}
 8008820:	4618      	mov	r0, r3
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	2000484c 	.word	0x2000484c

08008830 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b08a      	sub	sp, #40	@ 0x28
 8008834:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8008836:	2300      	movs	r3, #0
 8008838:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800883a:	4b7e      	ldr	r3, [pc, #504]	@ (8008a34 <xTaskIncrementTick+0x204>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	f040 80ed 	bne.w	8008a1e <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008844:	4b7c      	ldr	r3, [pc, #496]	@ (8008a38 <xTaskIncrementTick+0x208>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3301      	adds	r3, #1
 800884a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800884c:	4a7a      	ldr	r2, [pc, #488]	@ (8008a38 <xTaskIncrementTick+0x208>)
 800884e:	6a3b      	ldr	r3, [r7, #32]
 8008850:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008852:	6a3b      	ldr	r3, [r7, #32]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d121      	bne.n	800889c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8008858:	4b78      	ldr	r3, [pc, #480]	@ (8008a3c <xTaskIncrementTick+0x20c>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00b      	beq.n	800887a <xTaskIncrementTick+0x4a>
        __asm volatile
 8008862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008866:	f383 8811 	msr	BASEPRI, r3
 800886a:	f3bf 8f6f 	isb	sy
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	607b      	str	r3, [r7, #4]
    }
 8008874:	bf00      	nop
 8008876:	bf00      	nop
 8008878:	e7fd      	b.n	8008876 <xTaskIncrementTick+0x46>
 800887a:	4b70      	ldr	r3, [pc, #448]	@ (8008a3c <xTaskIncrementTick+0x20c>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	61fb      	str	r3, [r7, #28]
 8008880:	4b6f      	ldr	r3, [pc, #444]	@ (8008a40 <xTaskIncrementTick+0x210>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a6d      	ldr	r2, [pc, #436]	@ (8008a3c <xTaskIncrementTick+0x20c>)
 8008886:	6013      	str	r3, [r2, #0]
 8008888:	4a6d      	ldr	r2, [pc, #436]	@ (8008a40 <xTaskIncrementTick+0x210>)
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	6013      	str	r3, [r2, #0]
 800888e:	4b6d      	ldr	r3, [pc, #436]	@ (8008a44 <xTaskIncrementTick+0x214>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3301      	adds	r3, #1
 8008894:	4a6b      	ldr	r2, [pc, #428]	@ (8008a44 <xTaskIncrementTick+0x214>)
 8008896:	6013      	str	r3, [r2, #0]
 8008898:	f000 fb6e 	bl	8008f78 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800889c:	4b6a      	ldr	r3, [pc, #424]	@ (8008a48 <xTaskIncrementTick+0x218>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6a3a      	ldr	r2, [r7, #32]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	f0c0 80a6 	bcc.w	80089f4 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088a8:	4b64      	ldr	r3, [pc, #400]	@ (8008a3c <xTaskIncrementTick+0x20c>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d104      	bne.n	80088bc <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088b2:	4b65      	ldr	r3, [pc, #404]	@ (8008a48 <xTaskIncrementTick+0x218>)
 80088b4:	f04f 32ff 	mov.w	r2, #4294967295
 80088b8:	601a      	str	r2, [r3, #0]
                    break;
 80088ba:	e09b      	b.n	80089f4 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088bc:	4b5f      	ldr	r3, [pc, #380]	@ (8008a3c <xTaskIncrementTick+0x20c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80088cc:	6a3a      	ldr	r2, [r7, #32]
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d203      	bcs.n	80088dc <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80088d4:	4a5c      	ldr	r2, [pc, #368]	@ (8008a48 <xTaskIncrementTick+0x218>)
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80088da:	e08b      	b.n	80089f4 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	695b      	ldr	r3, [r3, #20]
 80088e0:	613b      	str	r3, [r7, #16]
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	68d2      	ldr	r2, [r2, #12]
 80088ea:	609a      	str	r2, [r3, #8]
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	69ba      	ldr	r2, [r7, #24]
 80088f2:	6892      	ldr	r2, [r2, #8]
 80088f4:	605a      	str	r2, [r3, #4]
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	3304      	adds	r3, #4
 80088fe:	429a      	cmp	r2, r3
 8008900:	d103      	bne.n	800890a <xTaskIncrementTick+0xda>
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	68da      	ldr	r2, [r3, #12]
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	605a      	str	r2, [r3, #4]
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	2200      	movs	r2, #0
 800890e:	615a      	str	r2, [r3, #20]
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	1e5a      	subs	r2, r3, #1
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891e:	2b00      	cmp	r3, #0
 8008920:	d01e      	beq.n	8008960 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008926:	60fb      	str	r3, [r7, #12]
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	69db      	ldr	r3, [r3, #28]
 800892c:	69ba      	ldr	r2, [r7, #24]
 800892e:	6a12      	ldr	r2, [r2, #32]
 8008930:	609a      	str	r2, [r3, #8]
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	69ba      	ldr	r2, [r7, #24]
 8008938:	69d2      	ldr	r2, [r2, #28]
 800893a:	605a      	str	r2, [r3, #4]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	3318      	adds	r3, #24
 8008944:	429a      	cmp	r2, r3
 8008946:	d103      	bne.n	8008950 <xTaskIncrementTick+0x120>
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	6a1a      	ldr	r2, [r3, #32]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	605a      	str	r2, [r3, #4]
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	2200      	movs	r2, #0
 8008954:	629a      	str	r2, [r3, #40]	@ 0x28
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	1e5a      	subs	r2, r3, #1
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008964:	2201      	movs	r2, #1
 8008966:	409a      	lsls	r2, r3
 8008968:	4b38      	ldr	r3, [pc, #224]	@ (8008a4c <xTaskIncrementTick+0x21c>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4313      	orrs	r3, r2
 800896e:	4a37      	ldr	r2, [pc, #220]	@ (8008a4c <xTaskIncrementTick+0x21c>)
 8008970:	6013      	str	r3, [r2, #0]
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008976:	4936      	ldr	r1, [pc, #216]	@ (8008a50 <xTaskIncrementTick+0x220>)
 8008978:	4613      	mov	r3, r2
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	4413      	add	r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	440b      	add	r3, r1
 8008982:	3304      	adds	r3, #4
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	60bb      	str	r3, [r7, #8]
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	609a      	str	r2, [r3, #8]
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	689a      	ldr	r2, [r3, #8]
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	60da      	str	r2, [r3, #12]
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	69ba      	ldr	r2, [r7, #24]
 800899c:	3204      	adds	r2, #4
 800899e:	605a      	str	r2, [r3, #4]
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	1d1a      	adds	r2, r3, #4
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	609a      	str	r2, [r3, #8]
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ac:	4613      	mov	r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	4413      	add	r3, r2
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4a26      	ldr	r2, [pc, #152]	@ (8008a50 <xTaskIncrementTick+0x220>)
 80089b6:	441a      	add	r2, r3
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	615a      	str	r2, [r3, #20]
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089c0:	4923      	ldr	r1, [pc, #140]	@ (8008a50 <xTaskIncrementTick+0x220>)
 80089c2:	4613      	mov	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	4413      	add	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	440b      	add	r3, r1
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	1c59      	adds	r1, r3, #1
 80089d0:	481f      	ldr	r0, [pc, #124]	@ (8008a50 <xTaskIncrementTick+0x220>)
 80089d2:	4613      	mov	r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	4413      	add	r3, r2
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	4403      	add	r3, r0
 80089dc:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089e2:	4b1c      	ldr	r3, [pc, #112]	@ (8008a54 <xTaskIncrementTick+0x224>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e8:	429a      	cmp	r2, r3
 80089ea:	f67f af5d 	bls.w	80088a8 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 80089ee:	2301      	movs	r3, #1
 80089f0:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089f2:	e759      	b.n	80088a8 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80089f4:	4b17      	ldr	r3, [pc, #92]	@ (8008a54 <xTaskIncrementTick+0x224>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089fa:	4915      	ldr	r1, [pc, #84]	@ (8008a50 <xTaskIncrementTick+0x220>)
 80089fc:	4613      	mov	r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	4413      	add	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	440b      	add	r3, r1
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d901      	bls.n	8008a10 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8008a10:	4b11      	ldr	r3, [pc, #68]	@ (8008a58 <xTaskIncrementTick+0x228>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d007      	beq.n	8008a28 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a1c:	e004      	b.n	8008a28 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8008a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8008a5c <xTaskIncrementTick+0x22c>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	3301      	adds	r3, #1
 8008a24:	4a0d      	ldr	r2, [pc, #52]	@ (8008a5c <xTaskIncrementTick+0x22c>)
 8008a26:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8008a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3728      	adds	r7, #40	@ 0x28
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	20004874 	.word	0x20004874
 8008a38:	20004850 	.word	0x20004850
 8008a3c:	20004804 	.word	0x20004804
 8008a40:	20004808 	.word	0x20004808
 8008a44:	20004864 	.word	0x20004864
 8008a48:	2000486c 	.word	0x2000486c
 8008a4c:	20004854 	.word	0x20004854
 8008a50:	20004778 	.word	0x20004778
 8008a54:	20004774 	.word	0x20004774
 8008a58:	20004860 	.word	0x20004860
 8008a5c:	2000485c 	.word	0x2000485c

08008a60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a66:	4b2f      	ldr	r3, [pc, #188]	@ (8008b24 <vTaskSwitchContext+0xc4>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d003      	beq.n	8008a76 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8008a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8008b28 <vTaskSwitchContext+0xc8>)
 8008a70:	2201      	movs	r2, #1
 8008a72:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8008a74:	e051      	b.n	8008b1a <vTaskSwitchContext+0xba>
        xYieldPending = pdFALSE;
 8008a76:	4b2c      	ldr	r3, [pc, #176]	@ (8008b28 <vTaskSwitchContext+0xc8>)
 8008a78:	2200      	movs	r2, #0
 8008a7a:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 8008a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8008b2c <vTaskSwitchContext+0xcc>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	4b2a      	ldr	r3, [pc, #168]	@ (8008b2c <vTaskSwitchContext+0xcc>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d808      	bhi.n	8008a9e <vTaskSwitchContext+0x3e>
 8008a8c:	4b27      	ldr	r3, [pc, #156]	@ (8008b2c <vTaskSwitchContext+0xcc>)
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	4b26      	ldr	r3, [pc, #152]	@ (8008b2c <vTaskSwitchContext+0xcc>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3334      	adds	r3, #52	@ 0x34
 8008a96:	4619      	mov	r1, r3
 8008a98:	4610      	mov	r0, r2
 8008a9a:	f7f8 fe0f 	bl	80016bc <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a9e:	4b24      	ldr	r3, [pc, #144]	@ (8008b30 <vTaskSwitchContext+0xd0>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	fab3 f383 	clz	r3, r3
 8008aaa:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8008aac:	7afb      	ldrb	r3, [r7, #11]
 8008aae:	f1c3 031f 	rsb	r3, r3, #31
 8008ab2:	617b      	str	r3, [r7, #20]
 8008ab4:	491f      	ldr	r1, [pc, #124]	@ (8008b34 <vTaskSwitchContext+0xd4>)
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	440b      	add	r3, r1
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10b      	bne.n	8008ae0 <vTaskSwitchContext+0x80>
        __asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	607b      	str	r3, [r7, #4]
    }
 8008ada:	bf00      	nop
 8008adc:	bf00      	nop
 8008ade:	e7fd      	b.n	8008adc <vTaskSwitchContext+0x7c>
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4a12      	ldr	r2, [pc, #72]	@ (8008b34 <vTaskSwitchContext+0xd4>)
 8008aec:	4413      	add	r3, r2
 8008aee:	613b      	str	r3, [r7, #16]
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	605a      	str	r2, [r3, #4]
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	685a      	ldr	r2, [r3, #4]
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	3308      	adds	r3, #8
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d104      	bne.n	8008b10 <vTaskSwitchContext+0xb0>
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	685a      	ldr	r2, [r3, #4]
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	605a      	str	r2, [r3, #4]
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	4a05      	ldr	r2, [pc, #20]	@ (8008b2c <vTaskSwitchContext+0xcc>)
 8008b18:	6013      	str	r3, [r2, #0]
}
 8008b1a:	bf00      	nop
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	20004874 	.word	0x20004874
 8008b28:	20004860 	.word	0x20004860
 8008b2c:	20004774 	.word	0x20004774
 8008b30:	20004854 	.word	0x20004854
 8008b34:	20004778 	.word	0x20004778

08008b38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10b      	bne.n	8008b60 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	60fb      	str	r3, [r7, #12]
    }
 8008b5a:	bf00      	nop
 8008b5c:	bf00      	nop
 8008b5e:	e7fd      	b.n	8008b5c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b60:	4b07      	ldr	r3, [pc, #28]	@ (8008b80 <vTaskPlaceOnEventList+0x48>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	3318      	adds	r3, #24
 8008b66:	4619      	mov	r1, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f7fe feb2 	bl	80078d2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b6e:	2101      	movs	r1, #1
 8008b70:	6838      	ldr	r0, [r7, #0]
 8008b72:	f000 fc51 	bl	8009418 <prvAddCurrentTaskToDelayedList>
}
 8008b76:	bf00      	nop
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	20004774 	.word	0x20004774

08008b84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b84:	b480      	push	{r7}
 8008b86:	b08b      	sub	sp, #44	@ 0x2c
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8008b94:	6a3b      	ldr	r3, [r7, #32]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10b      	bne.n	8008bb2 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8008b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	60fb      	str	r3, [r7, #12]
    }
 8008bac:	bf00      	nop
 8008bae:	bf00      	nop
 8008bb0:	e7fd      	b.n	8008bae <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8008bb2:	6a3b      	ldr	r3, [r7, #32]
 8008bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb6:	61fb      	str	r3, [r7, #28]
 8008bb8:	6a3b      	ldr	r3, [r7, #32]
 8008bba:	69db      	ldr	r3, [r3, #28]
 8008bbc:	6a3a      	ldr	r2, [r7, #32]
 8008bbe:	6a12      	ldr	r2, [r2, #32]
 8008bc0:	609a      	str	r2, [r3, #8]
 8008bc2:	6a3b      	ldr	r3, [r7, #32]
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	6a3a      	ldr	r2, [r7, #32]
 8008bc8:	69d2      	ldr	r2, [r2, #28]
 8008bca:	605a      	str	r2, [r3, #4]
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	6a3b      	ldr	r3, [r7, #32]
 8008bd2:	3318      	adds	r3, #24
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d103      	bne.n	8008be0 <xTaskRemoveFromEventList+0x5c>
 8008bd8:	6a3b      	ldr	r3, [r7, #32]
 8008bda:	6a1a      	ldr	r2, [r3, #32]
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	605a      	str	r2, [r3, #4]
 8008be0:	6a3b      	ldr	r3, [r7, #32]
 8008be2:	2200      	movs	r2, #0
 8008be4:	629a      	str	r2, [r3, #40]	@ 0x28
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	1e5a      	subs	r2, r3, #1
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bf0:	4b4a      	ldr	r3, [pc, #296]	@ (8008d1c <xTaskRemoveFromEventList+0x198>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d15e      	bne.n	8008cb6 <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8008bf8:	6a3b      	ldr	r3, [r7, #32]
 8008bfa:	695b      	ldr	r3, [r3, #20]
 8008bfc:	617b      	str	r3, [r7, #20]
 8008bfe:	6a3b      	ldr	r3, [r7, #32]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	6a3a      	ldr	r2, [r7, #32]
 8008c04:	68d2      	ldr	r2, [r2, #12]
 8008c06:	609a      	str	r2, [r3, #8]
 8008c08:	6a3b      	ldr	r3, [r7, #32]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	6a3a      	ldr	r2, [r7, #32]
 8008c0e:	6892      	ldr	r2, [r2, #8]
 8008c10:	605a      	str	r2, [r3, #4]
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	685a      	ldr	r2, [r3, #4]
 8008c16:	6a3b      	ldr	r3, [r7, #32]
 8008c18:	3304      	adds	r3, #4
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d103      	bne.n	8008c26 <xTaskRemoveFromEventList+0xa2>
 8008c1e:	6a3b      	ldr	r3, [r7, #32]
 8008c20:	68da      	ldr	r2, [r3, #12]
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	605a      	str	r2, [r3, #4]
 8008c26:	6a3b      	ldr	r3, [r7, #32]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	615a      	str	r2, [r3, #20]
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	1e5a      	subs	r2, r3, #1
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8008c36:	6a3b      	ldr	r3, [r7, #32]
 8008c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	409a      	lsls	r2, r3
 8008c3e:	4b38      	ldr	r3, [pc, #224]	@ (8008d20 <xTaskRemoveFromEventList+0x19c>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	4a36      	ldr	r2, [pc, #216]	@ (8008d20 <xTaskRemoveFromEventList+0x19c>)
 8008c46:	6013      	str	r3, [r2, #0]
 8008c48:	6a3b      	ldr	r3, [r7, #32]
 8008c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c4c:	4935      	ldr	r1, [pc, #212]	@ (8008d24 <xTaskRemoveFromEventList+0x1a0>)
 8008c4e:	4613      	mov	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4413      	add	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	440b      	add	r3, r1
 8008c58:	3304      	adds	r3, #4
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	613b      	str	r3, [r7, #16]
 8008c5e:	6a3b      	ldr	r3, [r7, #32]
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	609a      	str	r2, [r3, #8]
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	689a      	ldr	r2, [r3, #8]
 8008c68:	6a3b      	ldr	r3, [r7, #32]
 8008c6a:	60da      	str	r2, [r3, #12]
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	6a3a      	ldr	r2, [r7, #32]
 8008c72:	3204      	adds	r2, #4
 8008c74:	605a      	str	r2, [r3, #4]
 8008c76:	6a3b      	ldr	r3, [r7, #32]
 8008c78:	1d1a      	adds	r2, r3, #4
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	609a      	str	r2, [r3, #8]
 8008c7e:	6a3b      	ldr	r3, [r7, #32]
 8008c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c82:	4613      	mov	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	4a26      	ldr	r2, [pc, #152]	@ (8008d24 <xTaskRemoveFromEventList+0x1a0>)
 8008c8c:	441a      	add	r2, r3
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	615a      	str	r2, [r3, #20]
 8008c92:	6a3b      	ldr	r3, [r7, #32]
 8008c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c96:	4923      	ldr	r1, [pc, #140]	@ (8008d24 <xTaskRemoveFromEventList+0x1a0>)
 8008c98:	4613      	mov	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	440b      	add	r3, r1
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	1c59      	adds	r1, r3, #1
 8008ca6:	481f      	ldr	r0, [pc, #124]	@ (8008d24 <xTaskRemoveFromEventList+0x1a0>)
 8008ca8:	4613      	mov	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4413      	add	r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4403      	add	r3, r0
 8008cb2:	6019      	str	r1, [r3, #0]
 8008cb4:	e01b      	b.n	8008cee <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8008d28 <xTaskRemoveFromEventList+0x1a4>)
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	61bb      	str	r3, [r7, #24]
 8008cbc:	6a3b      	ldr	r3, [r7, #32]
 8008cbe:	69ba      	ldr	r2, [r7, #24]
 8008cc0:	61da      	str	r2, [r3, #28]
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	689a      	ldr	r2, [r3, #8]
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	621a      	str	r2, [r3, #32]
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	6a3a      	ldr	r2, [r7, #32]
 8008cd0:	3218      	adds	r2, #24
 8008cd2:	605a      	str	r2, [r3, #4]
 8008cd4:	6a3b      	ldr	r3, [r7, #32]
 8008cd6:	f103 0218 	add.w	r2, r3, #24
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	609a      	str	r2, [r3, #8]
 8008cde:	6a3b      	ldr	r3, [r7, #32]
 8008ce0:	4a11      	ldr	r2, [pc, #68]	@ (8008d28 <xTaskRemoveFromEventList+0x1a4>)
 8008ce2:	629a      	str	r2, [r3, #40]	@ 0x28
 8008ce4:	4b10      	ldr	r3, [pc, #64]	@ (8008d28 <xTaskRemoveFromEventList+0x1a4>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	4a0f      	ldr	r2, [pc, #60]	@ (8008d28 <xTaskRemoveFromEventList+0x1a4>)
 8008cec:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008cee:	6a3b      	ldr	r3, [r7, #32]
 8008cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8008d2c <xTaskRemoveFromEventList+0x1a8>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d905      	bls.n	8008d08 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8008d00:	4b0b      	ldr	r3, [pc, #44]	@ (8008d30 <xTaskRemoveFromEventList+0x1ac>)
 8008d02:	2201      	movs	r2, #1
 8008d04:	601a      	str	r2, [r3, #0]
 8008d06:	e001      	b.n	8008d0c <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	372c      	adds	r7, #44	@ 0x2c
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	20004874 	.word	0x20004874
 8008d20:	20004854 	.word	0x20004854
 8008d24:	20004778 	.word	0x20004778
 8008d28:	2000480c 	.word	0x2000480c
 8008d2c:	20004774 	.word	0x20004774
 8008d30:	20004860 	.word	0x20004860

08008d34 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d3c:	4b06      	ldr	r3, [pc, #24]	@ (8008d58 <vTaskInternalSetTimeOutState+0x24>)
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8008d44:	4b05      	ldr	r3, [pc, #20]	@ (8008d5c <vTaskInternalSetTimeOutState+0x28>)
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	605a      	str	r2, [r3, #4]
}
 8008d4c:	bf00      	nop
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr
 8008d58:	20004864 	.word	0x20004864
 8008d5c:	20004850 	.word	0x20004850

08008d60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b088      	sub	sp, #32
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10b      	bne.n	8008d88 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	613b      	str	r3, [r7, #16]
    }
 8008d82:	bf00      	nop
 8008d84:	bf00      	nop
 8008d86:	e7fd      	b.n	8008d84 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d10b      	bne.n	8008da6 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	60fb      	str	r3, [r7, #12]
    }
 8008da0:	bf00      	nop
 8008da2:	bf00      	nop
 8008da4:	e7fd      	b.n	8008da2 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8008da6:	f000 fce9 	bl	800977c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8008daa:	4b1f      	ldr	r3, [pc, #124]	@ (8008e28 <xTaskCheckForTimeOut+0xc8>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	69ba      	ldr	r2, [r7, #24]
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc2:	d102      	bne.n	8008dca <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	61fb      	str	r3, [r7, #28]
 8008dc8:	e026      	b.n	8008e18 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	4b17      	ldr	r3, [pc, #92]	@ (8008e2c <xTaskCheckForTimeOut+0xcc>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d00a      	beq.n	8008dec <xTaskCheckForTimeOut+0x8c>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	69ba      	ldr	r2, [r7, #24]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d305      	bcc.n	8008dec <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8008de0:	2301      	movs	r3, #1
 8008de2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	2200      	movs	r2, #0
 8008de8:	601a      	str	r2, [r3, #0]
 8008dea:	e015      	b.n	8008e18 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	697a      	ldr	r2, [r7, #20]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d20b      	bcs.n	8008e0e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	1ad2      	subs	r2, r2, r3
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7ff ff96 	bl	8008d34 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	61fb      	str	r3, [r7, #28]
 8008e0c:	e004      	b.n	8008e18 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8008e14:	2301      	movs	r3, #1
 8008e16:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8008e18:	f000 fce2 	bl	80097e0 <vPortExitCritical>

    return xReturn;
 8008e1c:	69fb      	ldr	r3, [r7, #28]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3720      	adds	r7, #32
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	20004850 	.word	0x20004850
 8008e2c:	20004864 	.word	0x20004864

08008e30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e30:	b480      	push	{r7}
 8008e32:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8008e34:	4b03      	ldr	r3, [pc, #12]	@ (8008e44 <vTaskMissedYield+0x14>)
 8008e36:	2201      	movs	r2, #1
 8008e38:	601a      	str	r2, [r3, #0]
}
 8008e3a:	bf00      	nop
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	20004860 	.word	0x20004860

08008e48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8008e50:	f000 f854 	bl	8008efc <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e54:	4b07      	ldr	r3, [pc, #28]	@ (8008e74 <prvIdleTask+0x2c>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d907      	bls.n	8008e6c <prvIdleTask+0x24>
            {
                taskYIELD();
 8008e5c:	4b06      	ldr	r3, [pc, #24]	@ (8008e78 <prvIdleTask+0x30>)
 8008e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e62:	601a      	str	r2, [r3, #0]
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 8008e6c:	f7f8 fb64 	bl	8001538 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8008e70:	e7ee      	b.n	8008e50 <prvIdleTask+0x8>
 8008e72:	bf00      	nop
 8008e74:	20004778 	.word	0x20004778
 8008e78:	e000ed04 	.word	0xe000ed04

08008e7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e82:	2300      	movs	r3, #0
 8008e84:	607b      	str	r3, [r7, #4]
 8008e86:	e00c      	b.n	8008ea2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	4a12      	ldr	r2, [pc, #72]	@ (8008edc <prvInitialiseTaskLists+0x60>)
 8008e94:	4413      	add	r3, r2
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fe fcee 	bl	8007878 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	607b      	str	r3, [r7, #4]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2b04      	cmp	r3, #4
 8008ea6:	d9ef      	bls.n	8008e88 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8008ea8:	480d      	ldr	r0, [pc, #52]	@ (8008ee0 <prvInitialiseTaskLists+0x64>)
 8008eaa:	f7fe fce5 	bl	8007878 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8008eae:	480d      	ldr	r0, [pc, #52]	@ (8008ee4 <prvInitialiseTaskLists+0x68>)
 8008eb0:	f7fe fce2 	bl	8007878 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8008eb4:	480c      	ldr	r0, [pc, #48]	@ (8008ee8 <prvInitialiseTaskLists+0x6c>)
 8008eb6:	f7fe fcdf 	bl	8007878 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8008eba:	480c      	ldr	r0, [pc, #48]	@ (8008eec <prvInitialiseTaskLists+0x70>)
 8008ebc:	f7fe fcdc 	bl	8007878 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8008ec0:	480b      	ldr	r0, [pc, #44]	@ (8008ef0 <prvInitialiseTaskLists+0x74>)
 8008ec2:	f7fe fcd9 	bl	8007878 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8008ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ef4 <prvInitialiseTaskLists+0x78>)
 8008ec8:	4a05      	ldr	r2, [pc, #20]	@ (8008ee0 <prvInitialiseTaskLists+0x64>)
 8008eca:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8008ef8 <prvInitialiseTaskLists+0x7c>)
 8008ece:	4a05      	ldr	r2, [pc, #20]	@ (8008ee4 <prvInitialiseTaskLists+0x68>)
 8008ed0:	601a      	str	r2, [r3, #0]
}
 8008ed2:	bf00      	nop
 8008ed4:	3708      	adds	r7, #8
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	20004778 	.word	0x20004778
 8008ee0:	200047dc 	.word	0x200047dc
 8008ee4:	200047f0 	.word	0x200047f0
 8008ee8:	2000480c 	.word	0x2000480c
 8008eec:	20004820 	.word	0x20004820
 8008ef0:	20004838 	.word	0x20004838
 8008ef4:	20004804 	.word	0x20004804
 8008ef8:	20004808 	.word	0x20004808

08008efc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f02:	e019      	b.n	8008f38 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8008f04:	f000 fc3a 	bl	800977c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f08:	4b10      	ldr	r3, [pc, #64]	@ (8008f4c <prvCheckTasksWaitingTermination+0x50>)
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3304      	adds	r3, #4
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fe fd15 	bl	8007944 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8008f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008f50 <prvCheckTasksWaitingTermination+0x54>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	4a0b      	ldr	r2, [pc, #44]	@ (8008f50 <prvCheckTasksWaitingTermination+0x54>)
 8008f22:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8008f24:	4b0b      	ldr	r3, [pc, #44]	@ (8008f54 <prvCheckTasksWaitingTermination+0x58>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8008f54 <prvCheckTasksWaitingTermination+0x58>)
 8008f2c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8008f2e:	f000 fc57 	bl	80097e0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f810 	bl	8008f58 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f38:	4b06      	ldr	r3, [pc, #24]	@ (8008f54 <prvCheckTasksWaitingTermination+0x58>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1e1      	bne.n	8008f04 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8008f40:	bf00      	nop
 8008f42:	bf00      	nop
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	20004820 	.word	0x20004820
 8008f50:	2000484c 	.word	0x2000484c
 8008f54:	20004834 	.word	0x20004834

08008f58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7fe fb73 	bl	8007650 <vPortFree>
            vPortFree( pxTCB );
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7fe fb70 	bl	8007650 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8008f70:	bf00      	nop
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f78:	b480      	push	{r7}
 8008f7a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008fa8 <prvResetNextTaskUnblockTime+0x30>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d104      	bne.n	8008f90 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8008f86:	4b09      	ldr	r3, [pc, #36]	@ (8008fac <prvResetNextTaskUnblockTime+0x34>)
 8008f88:	f04f 32ff 	mov.w	r2, #4294967295
 8008f8c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8008f8e:	e005      	b.n	8008f9c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008f90:	4b05      	ldr	r3, [pc, #20]	@ (8008fa8 <prvResetNextTaskUnblockTime+0x30>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a04      	ldr	r2, [pc, #16]	@ (8008fac <prvResetNextTaskUnblockTime+0x34>)
 8008f9a:	6013      	str	r3, [r2, #0]
}
 8008f9c:	bf00      	nop
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	20004804 	.word	0x20004804
 8008fac:	2000486c 	.word	0x2000486c

08008fb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b088      	sub	sp, #32
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f000 808e 	beq.w	80090e4 <xTaskPriorityDisinherit+0x134>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8008fc8:	4b49      	ldr	r3, [pc, #292]	@ (80090f0 <xTaskPriorityDisinherit+0x140>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	69ba      	ldr	r2, [r7, #24]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d00b      	beq.n	8008fea <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 8008fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	613b      	str	r3, [r7, #16]
    }
 8008fe4:	bf00      	nop
 8008fe6:	bf00      	nop
 8008fe8:	e7fd      	b.n	8008fe6 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d10b      	bne.n	800900a <xTaskPriorityDisinherit+0x5a>
        __asm volatile
 8008ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff6:	f383 8811 	msr	BASEPRI, r3
 8008ffa:	f3bf 8f6f 	isb	sy
 8008ffe:	f3bf 8f4f 	dsb	sy
 8009002:	60fb      	str	r3, [r7, #12]
    }
 8009004:	bf00      	nop
 8009006:	bf00      	nop
 8009008:	e7fd      	b.n	8009006 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800900e:	1e5a      	subs	r2, r3, #1
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	675a      	str	r2, [r3, #116]	@ 0x74

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800901c:	429a      	cmp	r2, r3
 800901e:	d061      	beq.n	80090e4 <xTaskPriorityDisinherit+0x134>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009024:	2b00      	cmp	r3, #0
 8009026:	d15d      	bne.n	80090e4 <xTaskPriorityDisinherit+0x134>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	3304      	adds	r3, #4
 800902c:	4618      	mov	r0, r3
 800902e:	f7fe fc89 	bl	8007944 <uxListRemove>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d10a      	bne.n	800904e <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800903c:	2201      	movs	r2, #1
 800903e:	fa02 f303 	lsl.w	r3, r2, r3
 8009042:	43da      	mvns	r2, r3
 8009044:	4b2b      	ldr	r3, [pc, #172]	@ (80090f4 <xTaskPriorityDisinherit+0x144>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4013      	ands	r3, r2
 800904a:	4a2a      	ldr	r2, [pc, #168]	@ (80090f4 <xTaskPriorityDisinherit+0x144>)
 800904c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800905a:	f1c3 0205 	rsb	r2, r3, #5
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009066:	2201      	movs	r2, #1
 8009068:	409a      	lsls	r2, r3
 800906a:	4b22      	ldr	r3, [pc, #136]	@ (80090f4 <xTaskPriorityDisinherit+0x144>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4313      	orrs	r3, r2
 8009070:	4a20      	ldr	r2, [pc, #128]	@ (80090f4 <xTaskPriorityDisinherit+0x144>)
 8009072:	6013      	str	r3, [r2, #0]
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009078:	491f      	ldr	r1, [pc, #124]	@ (80090f8 <xTaskPriorityDisinherit+0x148>)
 800907a:	4613      	mov	r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	4413      	add	r3, r2
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	440b      	add	r3, r1
 8009084:	3304      	adds	r3, #4
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	617b      	str	r3, [r7, #20]
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	697a      	ldr	r2, [r7, #20]
 800908e:	609a      	str	r2, [r3, #8]
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	689a      	ldr	r2, [r3, #8]
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	60da      	str	r2, [r3, #12]
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	69ba      	ldr	r2, [r7, #24]
 800909e:	3204      	adds	r2, #4
 80090a0:	605a      	str	r2, [r3, #4]
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	1d1a      	adds	r2, r3, #4
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	609a      	str	r2, [r3, #8]
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ae:	4613      	mov	r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4413      	add	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4a10      	ldr	r2, [pc, #64]	@ (80090f8 <xTaskPriorityDisinherit+0x148>)
 80090b8:	441a      	add	r2, r3
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	615a      	str	r2, [r3, #20]
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090c2:	490d      	ldr	r1, [pc, #52]	@ (80090f8 <xTaskPriorityDisinherit+0x148>)
 80090c4:	4613      	mov	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	440b      	add	r3, r1
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	1c59      	adds	r1, r3, #1
 80090d2:	4809      	ldr	r0, [pc, #36]	@ (80090f8 <xTaskPriorityDisinherit+0x148>)
 80090d4:	4613      	mov	r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	4413      	add	r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4403      	add	r3, r0
 80090de:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80090e0:	2301      	movs	r3, #1
 80090e2:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80090e4:	69fb      	ldr	r3, [r7, #28]
    }
 80090e6:	4618      	mov	r0, r3
 80090e8:	3720      	adds	r7, #32
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	20004774 	.word	0x20004774
 80090f4:	20004854 	.word	0x20004854
 80090f8:	20004778 	.word	0x20004778

080090fc <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00b      	beq.n	8009126 <ulTaskGenericNotifyTake+0x2a>
        __asm volatile
 800910e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009112:	f383 8811 	msr	BASEPRI, r3
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	613b      	str	r3, [r7, #16]
    }
 8009120:	bf00      	nop
 8009122:	bf00      	nop
 8009124:	e7fd      	b.n	8009122 <ulTaskGenericNotifyTake+0x26>

        taskENTER_CRITICAL();
 8009126:	f000 fb29 	bl	800977c <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 800912a:	4b26      	ldr	r3, [pc, #152]	@ (80091c4 <ulTaskGenericNotifyTake+0xc8>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	321e      	adds	r2, #30
 8009132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d115      	bne.n	8009166 <ulTaskGenericNotifyTake+0x6a>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800913a:	4b22      	ldr	r3, [pc, #136]	@ (80091c4 <ulTaskGenericNotifyTake+0xc8>)
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	4413      	add	r3, r2
 8009142:	337c      	adds	r3, #124	@ 0x7c
 8009144:	2201      	movs	r2, #1
 8009146:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00b      	beq.n	8009166 <ulTaskGenericNotifyTake+0x6a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800914e:	2101      	movs	r1, #1
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f961 	bl	8009418 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8009156:	4b1c      	ldr	r3, [pc, #112]	@ (80091c8 <ulTaskGenericNotifyTake+0xcc>)
 8009158:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800915c:	601a      	str	r2, [r3, #0]
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8009166:	f000 fb3b 	bl	80097e0 <vPortExitCritical>

        taskENTER_CRITICAL();
 800916a:	f000 fb07 	bl	800977c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800916e:	4b15      	ldr	r3, [pc, #84]	@ (80091c4 <ulTaskGenericNotifyTake+0xc8>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	321e      	adds	r2, #30
 8009176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800917a:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d012      	beq.n	80091a8 <ulTaskGenericNotifyTake+0xac>
            {
                if( xClearCountOnExit != pdFALSE )
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d007      	beq.n	8009198 <ulTaskGenericNotifyTake+0x9c>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 8009188:	4b0e      	ldr	r3, [pc, #56]	@ (80091c4 <ulTaskGenericNotifyTake+0xc8>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	321e      	adds	r2, #30
 8009190:	2100      	movs	r1, #0
 8009192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009196:	e007      	b.n	80091a8 <ulTaskGenericNotifyTake+0xac>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 8009198:	4b0a      	ldr	r3, [pc, #40]	@ (80091c4 <ulTaskGenericNotifyTake+0xc8>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	697a      	ldr	r2, [r7, #20]
 800919e:	1e51      	subs	r1, r2, #1
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	321e      	adds	r2, #30
 80091a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80091a8:	4b06      	ldr	r3, [pc, #24]	@ (80091c4 <ulTaskGenericNotifyTake+0xc8>)
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	4413      	add	r3, r2
 80091b0:	337c      	adds	r3, #124	@ 0x7c
 80091b2:	2200      	movs	r2, #0
 80091b4:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80091b6:	f000 fb13 	bl	80097e0 <vPortExitCritical>

        return ulReturn;
 80091ba:	697b      	ldr	r3, [r7, #20]
    }
 80091bc:	4618      	mov	r0, r3
 80091be:	3718      	adds	r7, #24
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	20004774 	.word	0x20004774
 80091c8:	e000ed04 	.word	0xe000ed04

080091cc <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08e      	sub	sp, #56	@ 0x38
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	607a      	str	r2, [r7, #4]
 80091d8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80091da:	2301      	movs	r3, #1
 80091dc:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00b      	beq.n	80091fc <xTaskGenericNotify+0x30>
        __asm volatile
 80091e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e8:	f383 8811 	msr	BASEPRI, r3
 80091ec:	f3bf 8f6f 	isb	sy
 80091f0:	f3bf 8f4f 	dsb	sy
 80091f4:	623b      	str	r3, [r7, #32]
    }
 80091f6:	bf00      	nop
 80091f8:	bf00      	nop
 80091fa:	e7fd      	b.n	80091f8 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10b      	bne.n	800921a <xTaskGenericNotify+0x4e>
        __asm volatile
 8009202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009206:	f383 8811 	msr	BASEPRI, r3
 800920a:	f3bf 8f6f 	isb	sy
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	61fb      	str	r3, [r7, #28]
    }
 8009214:	bf00      	nop
 8009216:	bf00      	nop
 8009218:	e7fd      	b.n	8009216 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 800921e:	f000 faad 	bl	800977c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8009222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009224:	2b00      	cmp	r3, #0
 8009226:	d006      	beq.n	8009236 <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8009228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	321e      	adds	r2, #30
 800922e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009232:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009234:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8009236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	4413      	add	r3, r2
 800923c:	337c      	adds	r3, #124	@ 0x7c
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8009244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	4413      	add	r3, r2
 800924a:	337c      	adds	r3, #124	@ 0x7c
 800924c:	2202      	movs	r2, #2
 800924e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8009250:	78fb      	ldrb	r3, [r7, #3]
 8009252:	2b04      	cmp	r3, #4
 8009254:	d83b      	bhi.n	80092ce <xTaskGenericNotify+0x102>
 8009256:	a201      	add	r2, pc, #4	@ (adr r2, 800925c <xTaskGenericNotify+0x90>)
 8009258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925c:	080092ef 	.word	0x080092ef
 8009260:	08009271 	.word	0x08009271
 8009264:	0800928d 	.word	0x0800928d
 8009268:	080092a5 	.word	0x080092a5
 800926c:	080092b3 	.word	0x080092b3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8009270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009272:	68ba      	ldr	r2, [r7, #8]
 8009274:	321e      	adds	r2, #30
 8009276:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	ea42 0103 	orr.w	r1, r2, r3
 8009280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	321e      	adds	r2, #30
 8009286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800928a:	e033      	b.n	80092f4 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800928c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800928e:	68ba      	ldr	r2, [r7, #8]
 8009290:	321e      	adds	r2, #30
 8009292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009296:	1c59      	adds	r1, r3, #1
 8009298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	321e      	adds	r2, #30
 800929e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80092a2:	e027      	b.n	80092f4 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80092a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a6:	68ba      	ldr	r2, [r7, #8]
 80092a8:	321e      	adds	r2, #30
 80092aa:	6879      	ldr	r1, [r7, #4]
 80092ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80092b0:	e020      	b.n	80092f4 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80092b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d006      	beq.n	80092c8 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80092ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	321e      	adds	r2, #30
 80092c0:	6879      	ldr	r1, [r7, #4]
 80092c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80092c6:	e015      	b.n	80092f4 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 80092c8:	2300      	movs	r3, #0
 80092ca:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 80092cc:	e012      	b.n	80092f4 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80092ce:	4b4d      	ldr	r3, [pc, #308]	@ (8009404 <xTaskGenericNotify+0x238>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00d      	beq.n	80092f2 <xTaskGenericNotify+0x126>
        __asm volatile
 80092d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092da:	f383 8811 	msr	BASEPRI, r3
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	61bb      	str	r3, [r7, #24]
    }
 80092e8:	bf00      	nop
 80092ea:	bf00      	nop
 80092ec:	e7fd      	b.n	80092ea <xTaskGenericNotify+0x11e>
                    break;
 80092ee:	bf00      	nop
 80092f0:	e000      	b.n	80092f4 <xTaskGenericNotify+0x128>

                    break;
 80092f2:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80092f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d17c      	bne.n	80093f6 <xTaskGenericNotify+0x22a>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80092fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fe:	695b      	ldr	r3, [r3, #20]
 8009300:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009308:	68d2      	ldr	r2, [r2, #12]
 800930a:	609a      	str	r2, [r3, #8]
 800930c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009312:	6892      	ldr	r2, [r2, #8]
 8009314:	605a      	str	r2, [r3, #4]
 8009316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009318:	685a      	ldr	r2, [r3, #4]
 800931a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931c:	3304      	adds	r3, #4
 800931e:	429a      	cmp	r2, r3
 8009320:	d103      	bne.n	800932a <xTaskGenericNotify+0x15e>
 8009322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009324:	68da      	ldr	r2, [r3, #12]
 8009326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009328:	605a      	str	r2, [r3, #4]
 800932a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932c:	2200      	movs	r2, #0
 800932e:	615a      	str	r2, [r3, #20]
 8009330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	1e5a      	subs	r2, r3, #1
 8009336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009338:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800933a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800933e:	2201      	movs	r2, #1
 8009340:	409a      	lsls	r2, r3
 8009342:	4b31      	ldr	r3, [pc, #196]	@ (8009408 <xTaskGenericNotify+0x23c>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4313      	orrs	r3, r2
 8009348:	4a2f      	ldr	r2, [pc, #188]	@ (8009408 <xTaskGenericNotify+0x23c>)
 800934a:	6013      	str	r3, [r2, #0]
 800934c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009350:	492e      	ldr	r1, [pc, #184]	@ (800940c <xTaskGenericNotify+0x240>)
 8009352:	4613      	mov	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	4413      	add	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	440b      	add	r3, r1
 800935c:	3304      	adds	r3, #4
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	627b      	str	r3, [r7, #36]	@ 0x24
 8009362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009366:	609a      	str	r2, [r3, #8]
 8009368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800936a:	689a      	ldr	r2, [r3, #8]
 800936c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936e:	60da      	str	r2, [r3, #12]
 8009370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009376:	3204      	adds	r2, #4
 8009378:	605a      	str	r2, [r3, #4]
 800937a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937c:	1d1a      	adds	r2, r3, #4
 800937e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009380:	609a      	str	r2, [r3, #8]
 8009382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009386:	4613      	mov	r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	4413      	add	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4a1f      	ldr	r2, [pc, #124]	@ (800940c <xTaskGenericNotify+0x240>)
 8009390:	441a      	add	r2, r3
 8009392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009394:	615a      	str	r2, [r3, #20]
 8009396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800939a:	491c      	ldr	r1, [pc, #112]	@ (800940c <xTaskGenericNotify+0x240>)
 800939c:	4613      	mov	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	4413      	add	r3, r2
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	440b      	add	r3, r1
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	1c59      	adds	r1, r3, #1
 80093aa:	4818      	ldr	r0, [pc, #96]	@ (800940c <xTaskGenericNotify+0x240>)
 80093ac:	4613      	mov	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	4403      	add	r3, r0
 80093b6:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80093b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00b      	beq.n	80093d8 <xTaskGenericNotify+0x20c>
        __asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	617b      	str	r3, [r7, #20]
    }
 80093d2:	bf00      	nop
 80093d4:	bf00      	nop
 80093d6:	e7fd      	b.n	80093d4 <xTaskGenericNotify+0x208>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093dc:	4b0c      	ldr	r3, [pc, #48]	@ (8009410 <xTaskGenericNotify+0x244>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d907      	bls.n	80093f6 <xTaskGenericNotify+0x22a>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80093e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009414 <xTaskGenericNotify+0x248>)
 80093e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80093f6:	f000 f9f3 	bl	80097e0 <vPortExitCritical>

        return xReturn;
 80093fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80093fc:	4618      	mov	r0, r3
 80093fe:	3738      	adds	r7, #56	@ 0x38
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	20004850 	.word	0x20004850
 8009408:	20004854 	.word	0x20004854
 800940c:	20004778 	.word	0x20004778
 8009410:	20004774 	.word	0x20004774
 8009414:	e000ed04 	.word	0xe000ed04

08009418 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8009422:	4b36      	ldr	r3, [pc, #216]	@ (80094fc <prvAddCurrentTaskToDelayedList+0xe4>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009428:	4b35      	ldr	r3, [pc, #212]	@ (8009500 <prvAddCurrentTaskToDelayedList+0xe8>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	3304      	adds	r3, #4
 800942e:	4618      	mov	r0, r3
 8009430:	f7fe fa88 	bl	8007944 <uxListRemove>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10b      	bne.n	8009452 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800943a:	4b31      	ldr	r3, [pc, #196]	@ (8009500 <prvAddCurrentTaskToDelayedList+0xe8>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009440:	2201      	movs	r2, #1
 8009442:	fa02 f303 	lsl.w	r3, r2, r3
 8009446:	43da      	mvns	r2, r3
 8009448:	4b2e      	ldr	r3, [pc, #184]	@ (8009504 <prvAddCurrentTaskToDelayedList+0xec>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4013      	ands	r3, r2
 800944e:	4a2d      	ldr	r2, [pc, #180]	@ (8009504 <prvAddCurrentTaskToDelayedList+0xec>)
 8009450:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009458:	d124      	bne.n	80094a4 <prvAddCurrentTaskToDelayedList+0x8c>
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d021      	beq.n	80094a4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009460:	4b29      	ldr	r3, [pc, #164]	@ (8009508 <prvAddCurrentTaskToDelayedList+0xf0>)
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	613b      	str	r3, [r7, #16]
 8009466:	4b26      	ldr	r3, [pc, #152]	@ (8009500 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	693a      	ldr	r2, [r7, #16]
 800946c:	609a      	str	r2, [r3, #8]
 800946e:	4b24      	ldr	r3, [pc, #144]	@ (8009500 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	6892      	ldr	r2, [r2, #8]
 8009476:	60da      	str	r2, [r3, #12]
 8009478:	4b21      	ldr	r3, [pc, #132]	@ (8009500 <prvAddCurrentTaskToDelayedList+0xe8>)
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	3204      	adds	r2, #4
 8009482:	605a      	str	r2, [r3, #4]
 8009484:	4b1e      	ldr	r3, [pc, #120]	@ (8009500 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	1d1a      	adds	r2, r3, #4
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	609a      	str	r2, [r3, #8]
 800948e:	4b1c      	ldr	r3, [pc, #112]	@ (8009500 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a1d      	ldr	r2, [pc, #116]	@ (8009508 <prvAddCurrentTaskToDelayedList+0xf0>)
 8009494:	615a      	str	r2, [r3, #20]
 8009496:	4b1c      	ldr	r3, [pc, #112]	@ (8009508 <prvAddCurrentTaskToDelayedList+0xf0>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	3301      	adds	r3, #1
 800949c:	4a1a      	ldr	r2, [pc, #104]	@ (8009508 <prvAddCurrentTaskToDelayedList+0xf0>)
 800949e:	6013      	str	r3, [r2, #0]
 80094a0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80094a2:	e026      	b.n	80094f2 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80094a4:	697a      	ldr	r2, [r7, #20]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4413      	add	r3, r2
 80094aa:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80094ac:	4b14      	ldr	r3, [pc, #80]	@ (8009500 <prvAddCurrentTaskToDelayedList+0xe8>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d209      	bcs.n	80094d0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094bc:	4b13      	ldr	r3, [pc, #76]	@ (800950c <prvAddCurrentTaskToDelayedList+0xf4>)
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	4b0f      	ldr	r3, [pc, #60]	@ (8009500 <prvAddCurrentTaskToDelayedList+0xe8>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	3304      	adds	r3, #4
 80094c6:	4619      	mov	r1, r3
 80094c8:	4610      	mov	r0, r2
 80094ca:	f7fe fa02 	bl	80078d2 <vListInsert>
}
 80094ce:	e010      	b.n	80094f2 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094d0:	4b0f      	ldr	r3, [pc, #60]	@ (8009510 <prvAddCurrentTaskToDelayedList+0xf8>)
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	4b0a      	ldr	r3, [pc, #40]	@ (8009500 <prvAddCurrentTaskToDelayedList+0xe8>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	3304      	adds	r3, #4
 80094da:	4619      	mov	r1, r3
 80094dc:	4610      	mov	r0, r2
 80094de:	f7fe f9f8 	bl	80078d2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80094e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009514 <prvAddCurrentTaskToDelayedList+0xfc>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d202      	bcs.n	80094f2 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80094ec:	4a09      	ldr	r2, [pc, #36]	@ (8009514 <prvAddCurrentTaskToDelayedList+0xfc>)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6013      	str	r3, [r2, #0]
}
 80094f2:	bf00      	nop
 80094f4:	3718      	adds	r7, #24
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	20004850 	.word	0x20004850
 8009500:	20004774 	.word	0x20004774
 8009504:	20004854 	.word	0x20004854
 8009508:	20004838 	.word	0x20004838
 800950c:	20004808 	.word	0x20004808
 8009510:	20004804 	.word	0x20004804
 8009514:	2000486c 	.word	0x2000486c

08009518 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	3b04      	subs	r3, #4
 8009528:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009530:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	3b04      	subs	r3, #4
 8009536:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	f023 0201 	bic.w	r2, r3, #1
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	3b04      	subs	r3, #4
 8009546:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8009548:	4a0c      	ldr	r2, [pc, #48]	@ (800957c <pxPortInitialiseStack+0x64>)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	3b14      	subs	r3, #20
 8009552:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	3b04      	subs	r3, #4
 800955e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f06f 0202 	mvn.w	r2, #2
 8009566:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	3b20      	subs	r3, #32
 800956c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800956e:	68fb      	ldr	r3, [r7, #12]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3714      	adds	r7, #20
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr
 800957c:	08009581 	.word	0x08009581

08009580 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8009586:	2300      	movs	r3, #0
 8009588:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800958a:	4b13      	ldr	r3, [pc, #76]	@ (80095d8 <prvTaskExitError+0x58>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009592:	d00b      	beq.n	80095ac <prvTaskExitError+0x2c>
        __asm volatile
 8009594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	60fb      	str	r3, [r7, #12]
    }
 80095a6:	bf00      	nop
 80095a8:	bf00      	nop
 80095aa:	e7fd      	b.n	80095a8 <prvTaskExitError+0x28>
        __asm volatile
 80095ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b0:	f383 8811 	msr	BASEPRI, r3
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	60bb      	str	r3, [r7, #8]
    }
 80095be:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80095c0:	bf00      	nop
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d0fc      	beq.n	80095c2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80095c8:	bf00      	nop
 80095ca:	bf00      	nop
 80095cc:	3714      	adds	r7, #20
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	2000001c 	.word	0x2000001c
 80095dc:	00000000 	.word	0x00000000

080095e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80095e0:	4b07      	ldr	r3, [pc, #28]	@ (8009600 <pxCurrentTCBConst2>)
 80095e2:	6819      	ldr	r1, [r3, #0]
 80095e4:	6808      	ldr	r0, [r1, #0]
 80095e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ea:	f380 8809 	msr	PSP, r0
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f04f 0000 	mov.w	r0, #0
 80095f6:	f380 8811 	msr	BASEPRI, r0
 80095fa:	4770      	bx	lr
 80095fc:	f3af 8000 	nop.w

08009600 <pxCurrentTCBConst2>:
 8009600:	20004774 	.word	0x20004774
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8009604:	bf00      	nop
 8009606:	bf00      	nop

08009608 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8009608:	4808      	ldr	r0, [pc, #32]	@ (800962c <prvPortStartFirstTask+0x24>)
 800960a:	6800      	ldr	r0, [r0, #0]
 800960c:	6800      	ldr	r0, [r0, #0]
 800960e:	f380 8808 	msr	MSP, r0
 8009612:	f04f 0000 	mov.w	r0, #0
 8009616:	f380 8814 	msr	CONTROL, r0
 800961a:	b662      	cpsie	i
 800961c:	b661      	cpsie	f
 800961e:	f3bf 8f4f 	dsb	sy
 8009622:	f3bf 8f6f 	isb	sy
 8009626:	df00      	svc	0
 8009628:	bf00      	nop
 800962a:	0000      	.short	0x0000
 800962c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8009630:	bf00      	nop
 8009632:	bf00      	nop

08009634 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800963a:	4b47      	ldr	r3, [pc, #284]	@ (8009758 <xPortStartScheduler+0x124>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a47      	ldr	r2, [pc, #284]	@ (800975c <xPortStartScheduler+0x128>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d10b      	bne.n	800965c <xPortStartScheduler+0x28>
        __asm volatile
 8009644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009648:	f383 8811 	msr	BASEPRI, r3
 800964c:	f3bf 8f6f 	isb	sy
 8009650:	f3bf 8f4f 	dsb	sy
 8009654:	613b      	str	r3, [r7, #16]
    }
 8009656:	bf00      	nop
 8009658:	bf00      	nop
 800965a:	e7fd      	b.n	8009658 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800965c:	4b3e      	ldr	r3, [pc, #248]	@ (8009758 <xPortStartScheduler+0x124>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a3f      	ldr	r2, [pc, #252]	@ (8009760 <xPortStartScheduler+0x12c>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d10b      	bne.n	800967e <xPortStartScheduler+0x4a>
        __asm volatile
 8009666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800966a:	f383 8811 	msr	BASEPRI, r3
 800966e:	f3bf 8f6f 	isb	sy
 8009672:	f3bf 8f4f 	dsb	sy
 8009676:	60fb      	str	r3, [r7, #12]
    }
 8009678:	bf00      	nop
 800967a:	bf00      	nop
 800967c:	e7fd      	b.n	800967a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800967e:	4b39      	ldr	r3, [pc, #228]	@ (8009764 <xPortStartScheduler+0x130>)
 8009680:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	b2db      	uxtb	r3, r3
 8009688:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	22ff      	movs	r2, #255	@ 0xff
 800968e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	b2db      	uxtb	r3, r3
 8009696:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009698:	78fb      	ldrb	r3, [r7, #3]
 800969a:	b2db      	uxtb	r3, r3
 800969c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80096a0:	b2da      	uxtb	r2, r3
 80096a2:	4b31      	ldr	r3, [pc, #196]	@ (8009768 <xPortStartScheduler+0x134>)
 80096a4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80096a6:	4b31      	ldr	r3, [pc, #196]	@ (800976c <xPortStartScheduler+0x138>)
 80096a8:	2207      	movs	r2, #7
 80096aa:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80096ac:	e009      	b.n	80096c2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 80096ae:	4b2f      	ldr	r3, [pc, #188]	@ (800976c <xPortStartScheduler+0x138>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	3b01      	subs	r3, #1
 80096b4:	4a2d      	ldr	r2, [pc, #180]	@ (800976c <xPortStartScheduler+0x138>)
 80096b6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80096b8:	78fb      	ldrb	r3, [r7, #3]
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	005b      	lsls	r3, r3, #1
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80096c2:	78fb      	ldrb	r3, [r7, #3]
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096ca:	2b80      	cmp	r3, #128	@ 0x80
 80096cc:	d0ef      	beq.n	80096ae <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80096ce:	4b27      	ldr	r3, [pc, #156]	@ (800976c <xPortStartScheduler+0x138>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f1c3 0307 	rsb	r3, r3, #7
 80096d6:	2b04      	cmp	r3, #4
 80096d8:	d00b      	beq.n	80096f2 <xPortStartScheduler+0xbe>
        __asm volatile
 80096da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096de:	f383 8811 	msr	BASEPRI, r3
 80096e2:	f3bf 8f6f 	isb	sy
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	60bb      	str	r3, [r7, #8]
    }
 80096ec:	bf00      	nop
 80096ee:	bf00      	nop
 80096f0:	e7fd      	b.n	80096ee <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80096f2:	4b1e      	ldr	r3, [pc, #120]	@ (800976c <xPortStartScheduler+0x138>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	021b      	lsls	r3, r3, #8
 80096f8:	4a1c      	ldr	r2, [pc, #112]	@ (800976c <xPortStartScheduler+0x138>)
 80096fa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80096fc:	4b1b      	ldr	r3, [pc, #108]	@ (800976c <xPortStartScheduler+0x138>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009704:	4a19      	ldr	r2, [pc, #100]	@ (800976c <xPortStartScheduler+0x138>)
 8009706:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	b2da      	uxtb	r2, r3
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8009710:	4b17      	ldr	r3, [pc, #92]	@ (8009770 <xPortStartScheduler+0x13c>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a16      	ldr	r2, [pc, #88]	@ (8009770 <xPortStartScheduler+0x13c>)
 8009716:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800971a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800971c:	4b14      	ldr	r3, [pc, #80]	@ (8009770 <xPortStartScheduler+0x13c>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a13      	ldr	r2, [pc, #76]	@ (8009770 <xPortStartScheduler+0x13c>)
 8009722:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009726:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8009728:	f000 f8e0 	bl	80098ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800972c:	4b11      	ldr	r3, [pc, #68]	@ (8009774 <xPortStartScheduler+0x140>)
 800972e:	2200      	movs	r2, #0
 8009730:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8009732:	f000 f8ff 	bl	8009934 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009736:	4b10      	ldr	r3, [pc, #64]	@ (8009778 <xPortStartScheduler+0x144>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a0f      	ldr	r2, [pc, #60]	@ (8009778 <xPortStartScheduler+0x144>)
 800973c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009740:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8009742:	f7ff ff61 	bl	8009608 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8009746:	f7ff f98b 	bl	8008a60 <vTaskSwitchContext>
    prvTaskExitError();
 800974a:	f7ff ff19 	bl	8009580 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3718      	adds	r7, #24
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	e000ed00 	.word	0xe000ed00
 800975c:	410fc271 	.word	0x410fc271
 8009760:	410fc270 	.word	0x410fc270
 8009764:	e000e400 	.word	0xe000e400
 8009768:	20004878 	.word	0x20004878
 800976c:	2000487c 	.word	0x2000487c
 8009770:	e000ed20 	.word	0xe000ed20
 8009774:	2000001c 	.word	0x2000001c
 8009778:	e000ef34 	.word	0xe000ef34

0800977c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
        __asm volatile
 8009782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009786:	f383 8811 	msr	BASEPRI, r3
 800978a:	f3bf 8f6f 	isb	sy
 800978e:	f3bf 8f4f 	dsb	sy
 8009792:	607b      	str	r3, [r7, #4]
    }
 8009794:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8009796:	4b10      	ldr	r3, [pc, #64]	@ (80097d8 <vPortEnterCritical+0x5c>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	3301      	adds	r3, #1
 800979c:	4a0e      	ldr	r2, [pc, #56]	@ (80097d8 <vPortEnterCritical+0x5c>)
 800979e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80097a0:	4b0d      	ldr	r3, [pc, #52]	@ (80097d8 <vPortEnterCritical+0x5c>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d110      	bne.n	80097ca <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80097a8:	4b0c      	ldr	r3, [pc, #48]	@ (80097dc <vPortEnterCritical+0x60>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00b      	beq.n	80097ca <vPortEnterCritical+0x4e>
        __asm volatile
 80097b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b6:	f383 8811 	msr	BASEPRI, r3
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	603b      	str	r3, [r7, #0]
    }
 80097c4:	bf00      	nop
 80097c6:	bf00      	nop
 80097c8:	e7fd      	b.n	80097c6 <vPortEnterCritical+0x4a>
    }
}
 80097ca:	bf00      	nop
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	2000001c 	.word	0x2000001c
 80097dc:	e000ed04 	.word	0xe000ed04

080097e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80097e6:	4b12      	ldr	r3, [pc, #72]	@ (8009830 <vPortExitCritical+0x50>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10b      	bne.n	8009806 <vPortExitCritical+0x26>
        __asm volatile
 80097ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	607b      	str	r3, [r7, #4]
    }
 8009800:	bf00      	nop
 8009802:	bf00      	nop
 8009804:	e7fd      	b.n	8009802 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8009806:	4b0a      	ldr	r3, [pc, #40]	@ (8009830 <vPortExitCritical+0x50>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3b01      	subs	r3, #1
 800980c:	4a08      	ldr	r2, [pc, #32]	@ (8009830 <vPortExitCritical+0x50>)
 800980e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8009810:	4b07      	ldr	r3, [pc, #28]	@ (8009830 <vPortExitCritical+0x50>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d105      	bne.n	8009824 <vPortExitCritical+0x44>
 8009818:	2300      	movs	r3, #0
 800981a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	f383 8811 	msr	BASEPRI, r3
    }
 8009822:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr
 8009830:	2000001c 	.word	0x2000001c
	...

08009840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8009840:	f3ef 8009 	mrs	r0, PSP
 8009844:	f3bf 8f6f 	isb	sy
 8009848:	4b15      	ldr	r3, [pc, #84]	@ (80098a0 <pxCurrentTCBConst>)
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	f01e 0f10 	tst.w	lr, #16
 8009850:	bf08      	it	eq
 8009852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985a:	6010      	str	r0, [r2, #0]
 800985c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009860:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009864:	f380 8811 	msr	BASEPRI, r0
 8009868:	f3bf 8f4f 	dsb	sy
 800986c:	f3bf 8f6f 	isb	sy
 8009870:	f7ff f8f6 	bl	8008a60 <vTaskSwitchContext>
 8009874:	f04f 0000 	mov.w	r0, #0
 8009878:	f380 8811 	msr	BASEPRI, r0
 800987c:	bc09      	pop	{r0, r3}
 800987e:	6819      	ldr	r1, [r3, #0]
 8009880:	6808      	ldr	r0, [r1, #0]
 8009882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009886:	f01e 0f10 	tst.w	lr, #16
 800988a:	bf08      	it	eq
 800988c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009890:	f380 8809 	msr	PSP, r0
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	4770      	bx	lr
 800989a:	bf00      	nop
 800989c:	f3af 8000 	nop.w

080098a0 <pxCurrentTCBConst>:
 80098a0:	20004774 	.word	0x20004774
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80098a4:	bf00      	nop
 80098a6:	bf00      	nop

080098a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
        __asm volatile
 80098ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b2:	f383 8811 	msr	BASEPRI, r3
 80098b6:	f3bf 8f6f 	isb	sy
 80098ba:	f3bf 8f4f 	dsb	sy
 80098be:	607b      	str	r3, [r7, #4]
    }
 80098c0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80098c2:	f7fe ffb5 	bl	8008830 <xTaskIncrementTick>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d003      	beq.n	80098d4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80098cc:	4b06      	ldr	r3, [pc, #24]	@ (80098e8 <SysTick_Handler+0x40>)
 80098ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098d2:	601a      	str	r2, [r3, #0]
 80098d4:	2300      	movs	r3, #0
 80098d6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	f383 8811 	msr	BASEPRI, r3
    }
 80098de:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80098e0:	bf00      	nop
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	e000ed04 	.word	0xe000ed04

080098ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80098ec:	b480      	push	{r7}
 80098ee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80098f0:	4b0b      	ldr	r3, [pc, #44]	@ (8009920 <vPortSetupTimerInterrupt+0x34>)
 80098f2:	2200      	movs	r2, #0
 80098f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80098f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009924 <vPortSetupTimerInterrupt+0x38>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80098fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009928 <vPortSetupTimerInterrupt+0x3c>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a0a      	ldr	r2, [pc, #40]	@ (800992c <vPortSetupTimerInterrupt+0x40>)
 8009902:	fba2 2303 	umull	r2, r3, r2, r3
 8009906:	099b      	lsrs	r3, r3, #6
 8009908:	4a09      	ldr	r2, [pc, #36]	@ (8009930 <vPortSetupTimerInterrupt+0x44>)
 800990a:	3b01      	subs	r3, #1
 800990c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800990e:	4b04      	ldr	r3, [pc, #16]	@ (8009920 <vPortSetupTimerInterrupt+0x34>)
 8009910:	2207      	movs	r2, #7
 8009912:	601a      	str	r2, [r3, #0]
}
 8009914:	bf00      	nop
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	e000e010 	.word	0xe000e010
 8009924:	e000e018 	.word	0xe000e018
 8009928:	2000000c 	.word	0x2000000c
 800992c:	10624dd3 	.word	0x10624dd3
 8009930:	e000e014 	.word	0xe000e014

08009934 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8009934:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009944 <vPortEnableVFP+0x10>
 8009938:	6801      	ldr	r1, [r0, #0]
 800993a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800993e:	6001      	str	r1, [r0, #0]
 8009940:	4770      	bx	lr
 8009942:	0000      	.short	0x0000
 8009944:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8009948:	bf00      	nop
 800994a:	bf00      	nop

0800994c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8009952:	f3ef 8305 	mrs	r3, IPSR
 8009956:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2b0f      	cmp	r3, #15
 800995c:	d915      	bls.n	800998a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800995e:	4a18      	ldr	r2, [pc, #96]	@ (80099c0 <vPortValidateInterruptPriority+0x74>)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	4413      	add	r3, r2
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009968:	4b16      	ldr	r3, [pc, #88]	@ (80099c4 <vPortValidateInterruptPriority+0x78>)
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	7afa      	ldrb	r2, [r7, #11]
 800996e:	429a      	cmp	r2, r3
 8009970:	d20b      	bcs.n	800998a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8009972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009976:	f383 8811 	msr	BASEPRI, r3
 800997a:	f3bf 8f6f 	isb	sy
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	607b      	str	r3, [r7, #4]
    }
 8009984:	bf00      	nop
 8009986:	bf00      	nop
 8009988:	e7fd      	b.n	8009986 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800998a:	4b0f      	ldr	r3, [pc, #60]	@ (80099c8 <vPortValidateInterruptPriority+0x7c>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009992:	4b0e      	ldr	r3, [pc, #56]	@ (80099cc <vPortValidateInterruptPriority+0x80>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	429a      	cmp	r2, r3
 8009998:	d90b      	bls.n	80099b2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800999a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	603b      	str	r3, [r7, #0]
    }
 80099ac:	bf00      	nop
 80099ae:	bf00      	nop
 80099b0:	e7fd      	b.n	80099ae <vPortValidateInterruptPriority+0x62>
    }
 80099b2:	bf00      	nop
 80099b4:	3714      	adds	r7, #20
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	e000e3f0 	.word	0xe000e3f0
 80099c4:	20004878 	.word	0x20004878
 80099c8:	e000ed0c 	.word	0xe000ed0c
 80099cc:	2000487c 	.word	0x2000487c

080099d0 <__itoa>:
 80099d0:	1e93      	subs	r3, r2, #2
 80099d2:	2b22      	cmp	r3, #34	@ 0x22
 80099d4:	b510      	push	{r4, lr}
 80099d6:	460c      	mov	r4, r1
 80099d8:	d904      	bls.n	80099e4 <__itoa+0x14>
 80099da:	2300      	movs	r3, #0
 80099dc:	700b      	strb	r3, [r1, #0]
 80099de:	461c      	mov	r4, r3
 80099e0:	4620      	mov	r0, r4
 80099e2:	bd10      	pop	{r4, pc}
 80099e4:	2a0a      	cmp	r2, #10
 80099e6:	d109      	bne.n	80099fc <__itoa+0x2c>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	da07      	bge.n	80099fc <__itoa+0x2c>
 80099ec:	232d      	movs	r3, #45	@ 0x2d
 80099ee:	700b      	strb	r3, [r1, #0]
 80099f0:	4240      	negs	r0, r0
 80099f2:	2101      	movs	r1, #1
 80099f4:	4421      	add	r1, r4
 80099f6:	f000 fe9f 	bl	800a738 <__utoa>
 80099fa:	e7f1      	b.n	80099e0 <__itoa+0x10>
 80099fc:	2100      	movs	r1, #0
 80099fe:	e7f9      	b.n	80099f4 <__itoa+0x24>

08009a00 <itoa>:
 8009a00:	f7ff bfe6 	b.w	80099d0 <__itoa>

08009a04 <sulp>:
 8009a04:	b570      	push	{r4, r5, r6, lr}
 8009a06:	4604      	mov	r4, r0
 8009a08:	460d      	mov	r5, r1
 8009a0a:	ec45 4b10 	vmov	d0, r4, r5
 8009a0e:	4616      	mov	r6, r2
 8009a10:	f003 fdea 	bl	800d5e8 <__ulp>
 8009a14:	ec51 0b10 	vmov	r0, r1, d0
 8009a18:	b17e      	cbz	r6, 8009a3a <sulp+0x36>
 8009a1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009a1e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	dd09      	ble.n	8009a3a <sulp+0x36>
 8009a26:	051b      	lsls	r3, r3, #20
 8009a28:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009a2c:	2400      	movs	r4, #0
 8009a2e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009a32:	4622      	mov	r2, r4
 8009a34:	462b      	mov	r3, r5
 8009a36:	f7f6 fde7 	bl	8000608 <__aeabi_dmul>
 8009a3a:	ec41 0b10 	vmov	d0, r0, r1
 8009a3e:	bd70      	pop	{r4, r5, r6, pc}

08009a40 <_strtod_l>:
 8009a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a44:	b09f      	sub	sp, #124	@ 0x7c
 8009a46:	460c      	mov	r4, r1
 8009a48:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	921a      	str	r2, [sp, #104]	@ 0x68
 8009a4e:	9005      	str	r0, [sp, #20]
 8009a50:	f04f 0a00 	mov.w	sl, #0
 8009a54:	f04f 0b00 	mov.w	fp, #0
 8009a58:	460a      	mov	r2, r1
 8009a5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a5c:	7811      	ldrb	r1, [r2, #0]
 8009a5e:	292b      	cmp	r1, #43	@ 0x2b
 8009a60:	d04a      	beq.n	8009af8 <_strtod_l+0xb8>
 8009a62:	d838      	bhi.n	8009ad6 <_strtod_l+0x96>
 8009a64:	290d      	cmp	r1, #13
 8009a66:	d832      	bhi.n	8009ace <_strtod_l+0x8e>
 8009a68:	2908      	cmp	r1, #8
 8009a6a:	d832      	bhi.n	8009ad2 <_strtod_l+0x92>
 8009a6c:	2900      	cmp	r1, #0
 8009a6e:	d03b      	beq.n	8009ae8 <_strtod_l+0xa8>
 8009a70:	2200      	movs	r2, #0
 8009a72:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009a74:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009a76:	782a      	ldrb	r2, [r5, #0]
 8009a78:	2a30      	cmp	r2, #48	@ 0x30
 8009a7a:	f040 80b3 	bne.w	8009be4 <_strtod_l+0x1a4>
 8009a7e:	786a      	ldrb	r2, [r5, #1]
 8009a80:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a84:	2a58      	cmp	r2, #88	@ 0x58
 8009a86:	d16e      	bne.n	8009b66 <_strtod_l+0x126>
 8009a88:	9302      	str	r3, [sp, #8]
 8009a8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a8c:	9301      	str	r3, [sp, #4]
 8009a8e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	4a8e      	ldr	r2, [pc, #568]	@ (8009ccc <_strtod_l+0x28c>)
 8009a94:	9805      	ldr	r0, [sp, #20]
 8009a96:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009a98:	a919      	add	r1, sp, #100	@ 0x64
 8009a9a:	f002 fe97 	bl	800c7cc <__gethex>
 8009a9e:	f010 060f 	ands.w	r6, r0, #15
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	d005      	beq.n	8009ab2 <_strtod_l+0x72>
 8009aa6:	2e06      	cmp	r6, #6
 8009aa8:	d128      	bne.n	8009afc <_strtod_l+0xbc>
 8009aaa:	3501      	adds	r5, #1
 8009aac:	2300      	movs	r3, #0
 8009aae:	9519      	str	r5, [sp, #100]	@ 0x64
 8009ab0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ab2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f040 858e 	bne.w	800a5d6 <_strtod_l+0xb96>
 8009aba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009abc:	b1cb      	cbz	r3, 8009af2 <_strtod_l+0xb2>
 8009abe:	4652      	mov	r2, sl
 8009ac0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009ac4:	ec43 2b10 	vmov	d0, r2, r3
 8009ac8:	b01f      	add	sp, #124	@ 0x7c
 8009aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ace:	2920      	cmp	r1, #32
 8009ad0:	d1ce      	bne.n	8009a70 <_strtod_l+0x30>
 8009ad2:	3201      	adds	r2, #1
 8009ad4:	e7c1      	b.n	8009a5a <_strtod_l+0x1a>
 8009ad6:	292d      	cmp	r1, #45	@ 0x2d
 8009ad8:	d1ca      	bne.n	8009a70 <_strtod_l+0x30>
 8009ada:	2101      	movs	r1, #1
 8009adc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009ade:	1c51      	adds	r1, r2, #1
 8009ae0:	9119      	str	r1, [sp, #100]	@ 0x64
 8009ae2:	7852      	ldrb	r2, [r2, #1]
 8009ae4:	2a00      	cmp	r2, #0
 8009ae6:	d1c5      	bne.n	8009a74 <_strtod_l+0x34>
 8009ae8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009aea:	9419      	str	r4, [sp, #100]	@ 0x64
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f040 8570 	bne.w	800a5d2 <_strtod_l+0xb92>
 8009af2:	4652      	mov	r2, sl
 8009af4:	465b      	mov	r3, fp
 8009af6:	e7e5      	b.n	8009ac4 <_strtod_l+0x84>
 8009af8:	2100      	movs	r1, #0
 8009afa:	e7ef      	b.n	8009adc <_strtod_l+0x9c>
 8009afc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009afe:	b13a      	cbz	r2, 8009b10 <_strtod_l+0xd0>
 8009b00:	2135      	movs	r1, #53	@ 0x35
 8009b02:	a81c      	add	r0, sp, #112	@ 0x70
 8009b04:	f003 fe6a 	bl	800d7dc <__copybits>
 8009b08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b0a:	9805      	ldr	r0, [sp, #20]
 8009b0c:	f003 fa38 	bl	800cf80 <_Bfree>
 8009b10:	3e01      	subs	r6, #1
 8009b12:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009b14:	2e04      	cmp	r6, #4
 8009b16:	d806      	bhi.n	8009b26 <_strtod_l+0xe6>
 8009b18:	e8df f006 	tbb	[pc, r6]
 8009b1c:	201d0314 	.word	0x201d0314
 8009b20:	14          	.byte	0x14
 8009b21:	00          	.byte	0x00
 8009b22:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009b26:	05e1      	lsls	r1, r4, #23
 8009b28:	bf48      	it	mi
 8009b2a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009b2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009b32:	0d1b      	lsrs	r3, r3, #20
 8009b34:	051b      	lsls	r3, r3, #20
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1bb      	bne.n	8009ab2 <_strtod_l+0x72>
 8009b3a:	f001 fed9 	bl	800b8f0 <__errno>
 8009b3e:	2322      	movs	r3, #34	@ 0x22
 8009b40:	6003      	str	r3, [r0, #0]
 8009b42:	e7b6      	b.n	8009ab2 <_strtod_l+0x72>
 8009b44:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009b48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009b4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009b50:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009b54:	e7e7      	b.n	8009b26 <_strtod_l+0xe6>
 8009b56:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009cd4 <_strtod_l+0x294>
 8009b5a:	e7e4      	b.n	8009b26 <_strtod_l+0xe6>
 8009b5c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009b60:	f04f 3aff 	mov.w	sl, #4294967295
 8009b64:	e7df      	b.n	8009b26 <_strtod_l+0xe6>
 8009b66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b68:	1c5a      	adds	r2, r3, #1
 8009b6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b6c:	785b      	ldrb	r3, [r3, #1]
 8009b6e:	2b30      	cmp	r3, #48	@ 0x30
 8009b70:	d0f9      	beq.n	8009b66 <_strtod_l+0x126>
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d09d      	beq.n	8009ab2 <_strtod_l+0x72>
 8009b76:	2301      	movs	r3, #1
 8009b78:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b7c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b7e:	2300      	movs	r3, #0
 8009b80:	9308      	str	r3, [sp, #32]
 8009b82:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b84:	461f      	mov	r7, r3
 8009b86:	220a      	movs	r2, #10
 8009b88:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009b8a:	7805      	ldrb	r5, [r0, #0]
 8009b8c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009b90:	b2d9      	uxtb	r1, r3
 8009b92:	2909      	cmp	r1, #9
 8009b94:	d928      	bls.n	8009be8 <_strtod_l+0x1a8>
 8009b96:	494e      	ldr	r1, [pc, #312]	@ (8009cd0 <_strtod_l+0x290>)
 8009b98:	2201      	movs	r2, #1
 8009b9a:	f001 fdc4 	bl	800b726 <strncmp>
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	d032      	beq.n	8009c08 <_strtod_l+0x1c8>
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	462a      	mov	r2, r5
 8009ba6:	4681      	mov	r9, r0
 8009ba8:	463d      	mov	r5, r7
 8009baa:	4603      	mov	r3, r0
 8009bac:	2a65      	cmp	r2, #101	@ 0x65
 8009bae:	d001      	beq.n	8009bb4 <_strtod_l+0x174>
 8009bb0:	2a45      	cmp	r2, #69	@ 0x45
 8009bb2:	d114      	bne.n	8009bde <_strtod_l+0x19e>
 8009bb4:	b91d      	cbnz	r5, 8009bbe <_strtod_l+0x17e>
 8009bb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bb8:	4302      	orrs	r2, r0
 8009bba:	d095      	beq.n	8009ae8 <_strtod_l+0xa8>
 8009bbc:	2500      	movs	r5, #0
 8009bbe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009bc0:	1c62      	adds	r2, r4, #1
 8009bc2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009bc4:	7862      	ldrb	r2, [r4, #1]
 8009bc6:	2a2b      	cmp	r2, #43	@ 0x2b
 8009bc8:	d077      	beq.n	8009cba <_strtod_l+0x27a>
 8009bca:	2a2d      	cmp	r2, #45	@ 0x2d
 8009bcc:	d07b      	beq.n	8009cc6 <_strtod_l+0x286>
 8009bce:	f04f 0c00 	mov.w	ip, #0
 8009bd2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009bd6:	2909      	cmp	r1, #9
 8009bd8:	f240 8082 	bls.w	8009ce0 <_strtod_l+0x2a0>
 8009bdc:	9419      	str	r4, [sp, #100]	@ 0x64
 8009bde:	f04f 0800 	mov.w	r8, #0
 8009be2:	e0a2      	b.n	8009d2a <_strtod_l+0x2ea>
 8009be4:	2300      	movs	r3, #0
 8009be6:	e7c7      	b.n	8009b78 <_strtod_l+0x138>
 8009be8:	2f08      	cmp	r7, #8
 8009bea:	bfd5      	itete	le
 8009bec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009bee:	9908      	ldrgt	r1, [sp, #32]
 8009bf0:	fb02 3301 	mlale	r3, r2, r1, r3
 8009bf4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009bf8:	f100 0001 	add.w	r0, r0, #1
 8009bfc:	bfd4      	ite	le
 8009bfe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009c00:	9308      	strgt	r3, [sp, #32]
 8009c02:	3701      	adds	r7, #1
 8009c04:	9019      	str	r0, [sp, #100]	@ 0x64
 8009c06:	e7bf      	b.n	8009b88 <_strtod_l+0x148>
 8009c08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c0a:	1c5a      	adds	r2, r3, #1
 8009c0c:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c0e:	785a      	ldrb	r2, [r3, #1]
 8009c10:	b37f      	cbz	r7, 8009c72 <_strtod_l+0x232>
 8009c12:	4681      	mov	r9, r0
 8009c14:	463d      	mov	r5, r7
 8009c16:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009c1a:	2b09      	cmp	r3, #9
 8009c1c:	d912      	bls.n	8009c44 <_strtod_l+0x204>
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e7c4      	b.n	8009bac <_strtod_l+0x16c>
 8009c22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c24:	1c5a      	adds	r2, r3, #1
 8009c26:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c28:	785a      	ldrb	r2, [r3, #1]
 8009c2a:	3001      	adds	r0, #1
 8009c2c:	2a30      	cmp	r2, #48	@ 0x30
 8009c2e:	d0f8      	beq.n	8009c22 <_strtod_l+0x1e2>
 8009c30:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009c34:	2b08      	cmp	r3, #8
 8009c36:	f200 84d3 	bhi.w	800a5e0 <_strtod_l+0xba0>
 8009c3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c3e:	4681      	mov	r9, r0
 8009c40:	2000      	movs	r0, #0
 8009c42:	4605      	mov	r5, r0
 8009c44:	3a30      	subs	r2, #48	@ 0x30
 8009c46:	f100 0301 	add.w	r3, r0, #1
 8009c4a:	d02a      	beq.n	8009ca2 <_strtod_l+0x262>
 8009c4c:	4499      	add	r9, r3
 8009c4e:	eb00 0c05 	add.w	ip, r0, r5
 8009c52:	462b      	mov	r3, r5
 8009c54:	210a      	movs	r1, #10
 8009c56:	4563      	cmp	r3, ip
 8009c58:	d10d      	bne.n	8009c76 <_strtod_l+0x236>
 8009c5a:	1c69      	adds	r1, r5, #1
 8009c5c:	4401      	add	r1, r0
 8009c5e:	4428      	add	r0, r5
 8009c60:	2808      	cmp	r0, #8
 8009c62:	dc16      	bgt.n	8009c92 <_strtod_l+0x252>
 8009c64:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009c66:	230a      	movs	r3, #10
 8009c68:	fb03 2300 	mla	r3, r3, r0, r2
 8009c6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c6e:	2300      	movs	r3, #0
 8009c70:	e018      	b.n	8009ca4 <_strtod_l+0x264>
 8009c72:	4638      	mov	r0, r7
 8009c74:	e7da      	b.n	8009c2c <_strtod_l+0x1ec>
 8009c76:	2b08      	cmp	r3, #8
 8009c78:	f103 0301 	add.w	r3, r3, #1
 8009c7c:	dc03      	bgt.n	8009c86 <_strtod_l+0x246>
 8009c7e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009c80:	434e      	muls	r6, r1
 8009c82:	960a      	str	r6, [sp, #40]	@ 0x28
 8009c84:	e7e7      	b.n	8009c56 <_strtod_l+0x216>
 8009c86:	2b10      	cmp	r3, #16
 8009c88:	bfde      	ittt	le
 8009c8a:	9e08      	ldrle	r6, [sp, #32]
 8009c8c:	434e      	mulle	r6, r1
 8009c8e:	9608      	strle	r6, [sp, #32]
 8009c90:	e7e1      	b.n	8009c56 <_strtod_l+0x216>
 8009c92:	280f      	cmp	r0, #15
 8009c94:	dceb      	bgt.n	8009c6e <_strtod_l+0x22e>
 8009c96:	9808      	ldr	r0, [sp, #32]
 8009c98:	230a      	movs	r3, #10
 8009c9a:	fb03 2300 	mla	r3, r3, r0, r2
 8009c9e:	9308      	str	r3, [sp, #32]
 8009ca0:	e7e5      	b.n	8009c6e <_strtod_l+0x22e>
 8009ca2:	4629      	mov	r1, r5
 8009ca4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009ca6:	1c50      	adds	r0, r2, #1
 8009ca8:	9019      	str	r0, [sp, #100]	@ 0x64
 8009caa:	7852      	ldrb	r2, [r2, #1]
 8009cac:	4618      	mov	r0, r3
 8009cae:	460d      	mov	r5, r1
 8009cb0:	e7b1      	b.n	8009c16 <_strtod_l+0x1d6>
 8009cb2:	f04f 0900 	mov.w	r9, #0
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e77d      	b.n	8009bb6 <_strtod_l+0x176>
 8009cba:	f04f 0c00 	mov.w	ip, #0
 8009cbe:	1ca2      	adds	r2, r4, #2
 8009cc0:	9219      	str	r2, [sp, #100]	@ 0x64
 8009cc2:	78a2      	ldrb	r2, [r4, #2]
 8009cc4:	e785      	b.n	8009bd2 <_strtod_l+0x192>
 8009cc6:	f04f 0c01 	mov.w	ip, #1
 8009cca:	e7f8      	b.n	8009cbe <_strtod_l+0x27e>
 8009ccc:	0800e588 	.word	0x0800e588
 8009cd0:	0800e570 	.word	0x0800e570
 8009cd4:	7ff00000 	.word	0x7ff00000
 8009cd8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009cda:	1c51      	adds	r1, r2, #1
 8009cdc:	9119      	str	r1, [sp, #100]	@ 0x64
 8009cde:	7852      	ldrb	r2, [r2, #1]
 8009ce0:	2a30      	cmp	r2, #48	@ 0x30
 8009ce2:	d0f9      	beq.n	8009cd8 <_strtod_l+0x298>
 8009ce4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009ce8:	2908      	cmp	r1, #8
 8009cea:	f63f af78 	bhi.w	8009bde <_strtod_l+0x19e>
 8009cee:	3a30      	subs	r2, #48	@ 0x30
 8009cf0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009cf2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009cf4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009cf6:	f04f 080a 	mov.w	r8, #10
 8009cfa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009cfc:	1c56      	adds	r6, r2, #1
 8009cfe:	9619      	str	r6, [sp, #100]	@ 0x64
 8009d00:	7852      	ldrb	r2, [r2, #1]
 8009d02:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009d06:	f1be 0f09 	cmp.w	lr, #9
 8009d0a:	d939      	bls.n	8009d80 <_strtod_l+0x340>
 8009d0c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009d0e:	1a76      	subs	r6, r6, r1
 8009d10:	2e08      	cmp	r6, #8
 8009d12:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009d16:	dc03      	bgt.n	8009d20 <_strtod_l+0x2e0>
 8009d18:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009d1a:	4588      	cmp	r8, r1
 8009d1c:	bfa8      	it	ge
 8009d1e:	4688      	movge	r8, r1
 8009d20:	f1bc 0f00 	cmp.w	ip, #0
 8009d24:	d001      	beq.n	8009d2a <_strtod_l+0x2ea>
 8009d26:	f1c8 0800 	rsb	r8, r8, #0
 8009d2a:	2d00      	cmp	r5, #0
 8009d2c:	d14e      	bne.n	8009dcc <_strtod_l+0x38c>
 8009d2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d30:	4308      	orrs	r0, r1
 8009d32:	f47f aebe 	bne.w	8009ab2 <_strtod_l+0x72>
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	f47f aed6 	bne.w	8009ae8 <_strtod_l+0xa8>
 8009d3c:	2a69      	cmp	r2, #105	@ 0x69
 8009d3e:	d028      	beq.n	8009d92 <_strtod_l+0x352>
 8009d40:	dc25      	bgt.n	8009d8e <_strtod_l+0x34e>
 8009d42:	2a49      	cmp	r2, #73	@ 0x49
 8009d44:	d025      	beq.n	8009d92 <_strtod_l+0x352>
 8009d46:	2a4e      	cmp	r2, #78	@ 0x4e
 8009d48:	f47f aece 	bne.w	8009ae8 <_strtod_l+0xa8>
 8009d4c:	499b      	ldr	r1, [pc, #620]	@ (8009fbc <_strtod_l+0x57c>)
 8009d4e:	a819      	add	r0, sp, #100	@ 0x64
 8009d50:	f002 ff5e 	bl	800cc10 <__match>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	f43f aec7 	beq.w	8009ae8 <_strtod_l+0xa8>
 8009d5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	2b28      	cmp	r3, #40	@ 0x28
 8009d60:	d12e      	bne.n	8009dc0 <_strtod_l+0x380>
 8009d62:	4997      	ldr	r1, [pc, #604]	@ (8009fc0 <_strtod_l+0x580>)
 8009d64:	aa1c      	add	r2, sp, #112	@ 0x70
 8009d66:	a819      	add	r0, sp, #100	@ 0x64
 8009d68:	f002 ff66 	bl	800cc38 <__hexnan>
 8009d6c:	2805      	cmp	r0, #5
 8009d6e:	d127      	bne.n	8009dc0 <_strtod_l+0x380>
 8009d70:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009d72:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009d76:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009d7a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009d7e:	e698      	b.n	8009ab2 <_strtod_l+0x72>
 8009d80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009d82:	fb08 2101 	mla	r1, r8, r1, r2
 8009d86:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009d8a:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d8c:	e7b5      	b.n	8009cfa <_strtod_l+0x2ba>
 8009d8e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009d90:	e7da      	b.n	8009d48 <_strtod_l+0x308>
 8009d92:	498c      	ldr	r1, [pc, #560]	@ (8009fc4 <_strtod_l+0x584>)
 8009d94:	a819      	add	r0, sp, #100	@ 0x64
 8009d96:	f002 ff3b 	bl	800cc10 <__match>
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	f43f aea4 	beq.w	8009ae8 <_strtod_l+0xa8>
 8009da0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009da2:	4989      	ldr	r1, [pc, #548]	@ (8009fc8 <_strtod_l+0x588>)
 8009da4:	3b01      	subs	r3, #1
 8009da6:	a819      	add	r0, sp, #100	@ 0x64
 8009da8:	9319      	str	r3, [sp, #100]	@ 0x64
 8009daa:	f002 ff31 	bl	800cc10 <__match>
 8009dae:	b910      	cbnz	r0, 8009db6 <_strtod_l+0x376>
 8009db0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009db2:	3301      	adds	r3, #1
 8009db4:	9319      	str	r3, [sp, #100]	@ 0x64
 8009db6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009fd8 <_strtod_l+0x598>
 8009dba:	f04f 0a00 	mov.w	sl, #0
 8009dbe:	e678      	b.n	8009ab2 <_strtod_l+0x72>
 8009dc0:	4882      	ldr	r0, [pc, #520]	@ (8009fcc <_strtod_l+0x58c>)
 8009dc2:	f001 fdd9 	bl	800b978 <nan>
 8009dc6:	ec5b ab10 	vmov	sl, fp, d0
 8009dca:	e672      	b.n	8009ab2 <_strtod_l+0x72>
 8009dcc:	eba8 0309 	sub.w	r3, r8, r9
 8009dd0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009dd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dd4:	2f00      	cmp	r7, #0
 8009dd6:	bf08      	it	eq
 8009dd8:	462f      	moveq	r7, r5
 8009dda:	2d10      	cmp	r5, #16
 8009ddc:	462c      	mov	r4, r5
 8009dde:	bfa8      	it	ge
 8009de0:	2410      	movge	r4, #16
 8009de2:	f7f6 fb97 	bl	8000514 <__aeabi_ui2d>
 8009de6:	2d09      	cmp	r5, #9
 8009de8:	4682      	mov	sl, r0
 8009dea:	468b      	mov	fp, r1
 8009dec:	dc13      	bgt.n	8009e16 <_strtod_l+0x3d6>
 8009dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f43f ae5e 	beq.w	8009ab2 <_strtod_l+0x72>
 8009df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009df8:	dd78      	ble.n	8009eec <_strtod_l+0x4ac>
 8009dfa:	2b16      	cmp	r3, #22
 8009dfc:	dc5f      	bgt.n	8009ebe <_strtod_l+0x47e>
 8009dfe:	4974      	ldr	r1, [pc, #464]	@ (8009fd0 <_strtod_l+0x590>)
 8009e00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e08:	4652      	mov	r2, sl
 8009e0a:	465b      	mov	r3, fp
 8009e0c:	f7f6 fbfc 	bl	8000608 <__aeabi_dmul>
 8009e10:	4682      	mov	sl, r0
 8009e12:	468b      	mov	fp, r1
 8009e14:	e64d      	b.n	8009ab2 <_strtod_l+0x72>
 8009e16:	4b6e      	ldr	r3, [pc, #440]	@ (8009fd0 <_strtod_l+0x590>)
 8009e18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e1c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009e20:	f7f6 fbf2 	bl	8000608 <__aeabi_dmul>
 8009e24:	4682      	mov	sl, r0
 8009e26:	9808      	ldr	r0, [sp, #32]
 8009e28:	468b      	mov	fp, r1
 8009e2a:	f7f6 fb73 	bl	8000514 <__aeabi_ui2d>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	460b      	mov	r3, r1
 8009e32:	4650      	mov	r0, sl
 8009e34:	4659      	mov	r1, fp
 8009e36:	f7f6 fa31 	bl	800029c <__adddf3>
 8009e3a:	2d0f      	cmp	r5, #15
 8009e3c:	4682      	mov	sl, r0
 8009e3e:	468b      	mov	fp, r1
 8009e40:	ddd5      	ble.n	8009dee <_strtod_l+0x3ae>
 8009e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e44:	1b2c      	subs	r4, r5, r4
 8009e46:	441c      	add	r4, r3
 8009e48:	2c00      	cmp	r4, #0
 8009e4a:	f340 8096 	ble.w	8009f7a <_strtod_l+0x53a>
 8009e4e:	f014 030f 	ands.w	r3, r4, #15
 8009e52:	d00a      	beq.n	8009e6a <_strtod_l+0x42a>
 8009e54:	495e      	ldr	r1, [pc, #376]	@ (8009fd0 <_strtod_l+0x590>)
 8009e56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e5a:	4652      	mov	r2, sl
 8009e5c:	465b      	mov	r3, fp
 8009e5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e62:	f7f6 fbd1 	bl	8000608 <__aeabi_dmul>
 8009e66:	4682      	mov	sl, r0
 8009e68:	468b      	mov	fp, r1
 8009e6a:	f034 040f 	bics.w	r4, r4, #15
 8009e6e:	d073      	beq.n	8009f58 <_strtod_l+0x518>
 8009e70:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009e74:	dd48      	ble.n	8009f08 <_strtod_l+0x4c8>
 8009e76:	2400      	movs	r4, #0
 8009e78:	46a0      	mov	r8, r4
 8009e7a:	940a      	str	r4, [sp, #40]	@ 0x28
 8009e7c:	46a1      	mov	r9, r4
 8009e7e:	9a05      	ldr	r2, [sp, #20]
 8009e80:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009fd8 <_strtod_l+0x598>
 8009e84:	2322      	movs	r3, #34	@ 0x22
 8009e86:	6013      	str	r3, [r2, #0]
 8009e88:	f04f 0a00 	mov.w	sl, #0
 8009e8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	f43f ae0f 	beq.w	8009ab2 <_strtod_l+0x72>
 8009e94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e96:	9805      	ldr	r0, [sp, #20]
 8009e98:	f003 f872 	bl	800cf80 <_Bfree>
 8009e9c:	9805      	ldr	r0, [sp, #20]
 8009e9e:	4649      	mov	r1, r9
 8009ea0:	f003 f86e 	bl	800cf80 <_Bfree>
 8009ea4:	9805      	ldr	r0, [sp, #20]
 8009ea6:	4641      	mov	r1, r8
 8009ea8:	f003 f86a 	bl	800cf80 <_Bfree>
 8009eac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009eae:	9805      	ldr	r0, [sp, #20]
 8009eb0:	f003 f866 	bl	800cf80 <_Bfree>
 8009eb4:	9805      	ldr	r0, [sp, #20]
 8009eb6:	4621      	mov	r1, r4
 8009eb8:	f003 f862 	bl	800cf80 <_Bfree>
 8009ebc:	e5f9      	b.n	8009ab2 <_strtod_l+0x72>
 8009ebe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ec0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	dbbc      	blt.n	8009e42 <_strtod_l+0x402>
 8009ec8:	4c41      	ldr	r4, [pc, #260]	@ (8009fd0 <_strtod_l+0x590>)
 8009eca:	f1c5 050f 	rsb	r5, r5, #15
 8009ece:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009ed2:	4652      	mov	r2, sl
 8009ed4:	465b      	mov	r3, fp
 8009ed6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eda:	f7f6 fb95 	bl	8000608 <__aeabi_dmul>
 8009ede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ee0:	1b5d      	subs	r5, r3, r5
 8009ee2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009ee6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009eea:	e78f      	b.n	8009e0c <_strtod_l+0x3cc>
 8009eec:	3316      	adds	r3, #22
 8009eee:	dba8      	blt.n	8009e42 <_strtod_l+0x402>
 8009ef0:	4b37      	ldr	r3, [pc, #220]	@ (8009fd0 <_strtod_l+0x590>)
 8009ef2:	eba9 0808 	sub.w	r8, r9, r8
 8009ef6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009efa:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009efe:	4650      	mov	r0, sl
 8009f00:	4659      	mov	r1, fp
 8009f02:	f7f6 fcab 	bl	800085c <__aeabi_ddiv>
 8009f06:	e783      	b.n	8009e10 <_strtod_l+0x3d0>
 8009f08:	4b32      	ldr	r3, [pc, #200]	@ (8009fd4 <_strtod_l+0x594>)
 8009f0a:	9308      	str	r3, [sp, #32]
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	1124      	asrs	r4, r4, #4
 8009f10:	4650      	mov	r0, sl
 8009f12:	4659      	mov	r1, fp
 8009f14:	461e      	mov	r6, r3
 8009f16:	2c01      	cmp	r4, #1
 8009f18:	dc21      	bgt.n	8009f5e <_strtod_l+0x51e>
 8009f1a:	b10b      	cbz	r3, 8009f20 <_strtod_l+0x4e0>
 8009f1c:	4682      	mov	sl, r0
 8009f1e:	468b      	mov	fp, r1
 8009f20:	492c      	ldr	r1, [pc, #176]	@ (8009fd4 <_strtod_l+0x594>)
 8009f22:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009f26:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009f2a:	4652      	mov	r2, sl
 8009f2c:	465b      	mov	r3, fp
 8009f2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f32:	f7f6 fb69 	bl	8000608 <__aeabi_dmul>
 8009f36:	4b28      	ldr	r3, [pc, #160]	@ (8009fd8 <_strtod_l+0x598>)
 8009f38:	460a      	mov	r2, r1
 8009f3a:	400b      	ands	r3, r1
 8009f3c:	4927      	ldr	r1, [pc, #156]	@ (8009fdc <_strtod_l+0x59c>)
 8009f3e:	428b      	cmp	r3, r1
 8009f40:	4682      	mov	sl, r0
 8009f42:	d898      	bhi.n	8009e76 <_strtod_l+0x436>
 8009f44:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009f48:	428b      	cmp	r3, r1
 8009f4a:	bf86      	itte	hi
 8009f4c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009fe0 <_strtod_l+0x5a0>
 8009f50:	f04f 3aff 	movhi.w	sl, #4294967295
 8009f54:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009f58:	2300      	movs	r3, #0
 8009f5a:	9308      	str	r3, [sp, #32]
 8009f5c:	e07a      	b.n	800a054 <_strtod_l+0x614>
 8009f5e:	07e2      	lsls	r2, r4, #31
 8009f60:	d505      	bpl.n	8009f6e <_strtod_l+0x52e>
 8009f62:	9b08      	ldr	r3, [sp, #32]
 8009f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f68:	f7f6 fb4e 	bl	8000608 <__aeabi_dmul>
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	9a08      	ldr	r2, [sp, #32]
 8009f70:	3208      	adds	r2, #8
 8009f72:	3601      	adds	r6, #1
 8009f74:	1064      	asrs	r4, r4, #1
 8009f76:	9208      	str	r2, [sp, #32]
 8009f78:	e7cd      	b.n	8009f16 <_strtod_l+0x4d6>
 8009f7a:	d0ed      	beq.n	8009f58 <_strtod_l+0x518>
 8009f7c:	4264      	negs	r4, r4
 8009f7e:	f014 020f 	ands.w	r2, r4, #15
 8009f82:	d00a      	beq.n	8009f9a <_strtod_l+0x55a>
 8009f84:	4b12      	ldr	r3, [pc, #72]	@ (8009fd0 <_strtod_l+0x590>)
 8009f86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f8a:	4650      	mov	r0, sl
 8009f8c:	4659      	mov	r1, fp
 8009f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f92:	f7f6 fc63 	bl	800085c <__aeabi_ddiv>
 8009f96:	4682      	mov	sl, r0
 8009f98:	468b      	mov	fp, r1
 8009f9a:	1124      	asrs	r4, r4, #4
 8009f9c:	d0dc      	beq.n	8009f58 <_strtod_l+0x518>
 8009f9e:	2c1f      	cmp	r4, #31
 8009fa0:	dd20      	ble.n	8009fe4 <_strtod_l+0x5a4>
 8009fa2:	2400      	movs	r4, #0
 8009fa4:	46a0      	mov	r8, r4
 8009fa6:	940a      	str	r4, [sp, #40]	@ 0x28
 8009fa8:	46a1      	mov	r9, r4
 8009faa:	9a05      	ldr	r2, [sp, #20]
 8009fac:	2322      	movs	r3, #34	@ 0x22
 8009fae:	f04f 0a00 	mov.w	sl, #0
 8009fb2:	f04f 0b00 	mov.w	fp, #0
 8009fb6:	6013      	str	r3, [r2, #0]
 8009fb8:	e768      	b.n	8009e8c <_strtod_l+0x44c>
 8009fba:	bf00      	nop
 8009fbc:	0800e6fb 	.word	0x0800e6fb
 8009fc0:	0800e574 	.word	0x0800e574
 8009fc4:	0800e6f3 	.word	0x0800e6f3
 8009fc8:	0800e7df 	.word	0x0800e7df
 8009fcc:	0800e7db 	.word	0x0800e7db
 8009fd0:	0800e940 	.word	0x0800e940
 8009fd4:	0800e918 	.word	0x0800e918
 8009fd8:	7ff00000 	.word	0x7ff00000
 8009fdc:	7ca00000 	.word	0x7ca00000
 8009fe0:	7fefffff 	.word	0x7fefffff
 8009fe4:	f014 0310 	ands.w	r3, r4, #16
 8009fe8:	bf18      	it	ne
 8009fea:	236a      	movne	r3, #106	@ 0x6a
 8009fec:	4ea9      	ldr	r6, [pc, #676]	@ (800a294 <_strtod_l+0x854>)
 8009fee:	9308      	str	r3, [sp, #32]
 8009ff0:	4650      	mov	r0, sl
 8009ff2:	4659      	mov	r1, fp
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	07e2      	lsls	r2, r4, #31
 8009ff8:	d504      	bpl.n	800a004 <_strtod_l+0x5c4>
 8009ffa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ffe:	f7f6 fb03 	bl	8000608 <__aeabi_dmul>
 800a002:	2301      	movs	r3, #1
 800a004:	1064      	asrs	r4, r4, #1
 800a006:	f106 0608 	add.w	r6, r6, #8
 800a00a:	d1f4      	bne.n	8009ff6 <_strtod_l+0x5b6>
 800a00c:	b10b      	cbz	r3, 800a012 <_strtod_l+0x5d2>
 800a00e:	4682      	mov	sl, r0
 800a010:	468b      	mov	fp, r1
 800a012:	9b08      	ldr	r3, [sp, #32]
 800a014:	b1b3      	cbz	r3, 800a044 <_strtod_l+0x604>
 800a016:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a01a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a01e:	2b00      	cmp	r3, #0
 800a020:	4659      	mov	r1, fp
 800a022:	dd0f      	ble.n	800a044 <_strtod_l+0x604>
 800a024:	2b1f      	cmp	r3, #31
 800a026:	dd55      	ble.n	800a0d4 <_strtod_l+0x694>
 800a028:	2b34      	cmp	r3, #52	@ 0x34
 800a02a:	bfde      	ittt	le
 800a02c:	f04f 33ff 	movle.w	r3, #4294967295
 800a030:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a034:	4093      	lslle	r3, r2
 800a036:	f04f 0a00 	mov.w	sl, #0
 800a03a:	bfcc      	ite	gt
 800a03c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a040:	ea03 0b01 	andle.w	fp, r3, r1
 800a044:	2200      	movs	r2, #0
 800a046:	2300      	movs	r3, #0
 800a048:	4650      	mov	r0, sl
 800a04a:	4659      	mov	r1, fp
 800a04c:	f7f6 fd44 	bl	8000ad8 <__aeabi_dcmpeq>
 800a050:	2800      	cmp	r0, #0
 800a052:	d1a6      	bne.n	8009fa2 <_strtod_l+0x562>
 800a054:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a056:	9300      	str	r3, [sp, #0]
 800a058:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a05a:	9805      	ldr	r0, [sp, #20]
 800a05c:	462b      	mov	r3, r5
 800a05e:	463a      	mov	r2, r7
 800a060:	f002 fff6 	bl	800d050 <__s2b>
 800a064:	900a      	str	r0, [sp, #40]	@ 0x28
 800a066:	2800      	cmp	r0, #0
 800a068:	f43f af05 	beq.w	8009e76 <_strtod_l+0x436>
 800a06c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a06e:	2a00      	cmp	r2, #0
 800a070:	eba9 0308 	sub.w	r3, r9, r8
 800a074:	bfa8      	it	ge
 800a076:	2300      	movge	r3, #0
 800a078:	9312      	str	r3, [sp, #72]	@ 0x48
 800a07a:	2400      	movs	r4, #0
 800a07c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a080:	9316      	str	r3, [sp, #88]	@ 0x58
 800a082:	46a0      	mov	r8, r4
 800a084:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a086:	9805      	ldr	r0, [sp, #20]
 800a088:	6859      	ldr	r1, [r3, #4]
 800a08a:	f002 ff39 	bl	800cf00 <_Balloc>
 800a08e:	4681      	mov	r9, r0
 800a090:	2800      	cmp	r0, #0
 800a092:	f43f aef4 	beq.w	8009e7e <_strtod_l+0x43e>
 800a096:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a098:	691a      	ldr	r2, [r3, #16]
 800a09a:	3202      	adds	r2, #2
 800a09c:	f103 010c 	add.w	r1, r3, #12
 800a0a0:	0092      	lsls	r2, r2, #2
 800a0a2:	300c      	adds	r0, #12
 800a0a4:	f001 fc59 	bl	800b95a <memcpy>
 800a0a8:	ec4b ab10 	vmov	d0, sl, fp
 800a0ac:	9805      	ldr	r0, [sp, #20]
 800a0ae:	aa1c      	add	r2, sp, #112	@ 0x70
 800a0b0:	a91b      	add	r1, sp, #108	@ 0x6c
 800a0b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a0b6:	f003 fb07 	bl	800d6c8 <__d2b>
 800a0ba:	901a      	str	r0, [sp, #104]	@ 0x68
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	f43f aede 	beq.w	8009e7e <_strtod_l+0x43e>
 800a0c2:	9805      	ldr	r0, [sp, #20]
 800a0c4:	2101      	movs	r1, #1
 800a0c6:	f003 f859 	bl	800d17c <__i2b>
 800a0ca:	4680      	mov	r8, r0
 800a0cc:	b948      	cbnz	r0, 800a0e2 <_strtod_l+0x6a2>
 800a0ce:	f04f 0800 	mov.w	r8, #0
 800a0d2:	e6d4      	b.n	8009e7e <_strtod_l+0x43e>
 800a0d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0dc:	ea03 0a0a 	and.w	sl, r3, sl
 800a0e0:	e7b0      	b.n	800a044 <_strtod_l+0x604>
 800a0e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a0e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a0e6:	2d00      	cmp	r5, #0
 800a0e8:	bfab      	itete	ge
 800a0ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a0ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a0ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a0f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a0f2:	bfac      	ite	ge
 800a0f4:	18ef      	addge	r7, r5, r3
 800a0f6:	1b5e      	sublt	r6, r3, r5
 800a0f8:	9b08      	ldr	r3, [sp, #32]
 800a0fa:	1aed      	subs	r5, r5, r3
 800a0fc:	4415      	add	r5, r2
 800a0fe:	4b66      	ldr	r3, [pc, #408]	@ (800a298 <_strtod_l+0x858>)
 800a100:	3d01      	subs	r5, #1
 800a102:	429d      	cmp	r5, r3
 800a104:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a108:	da50      	bge.n	800a1ac <_strtod_l+0x76c>
 800a10a:	1b5b      	subs	r3, r3, r5
 800a10c:	2b1f      	cmp	r3, #31
 800a10e:	eba2 0203 	sub.w	r2, r2, r3
 800a112:	f04f 0101 	mov.w	r1, #1
 800a116:	dc3d      	bgt.n	800a194 <_strtod_l+0x754>
 800a118:	fa01 f303 	lsl.w	r3, r1, r3
 800a11c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a11e:	2300      	movs	r3, #0
 800a120:	9310      	str	r3, [sp, #64]	@ 0x40
 800a122:	18bd      	adds	r5, r7, r2
 800a124:	9b08      	ldr	r3, [sp, #32]
 800a126:	42af      	cmp	r7, r5
 800a128:	4416      	add	r6, r2
 800a12a:	441e      	add	r6, r3
 800a12c:	463b      	mov	r3, r7
 800a12e:	bfa8      	it	ge
 800a130:	462b      	movge	r3, r5
 800a132:	42b3      	cmp	r3, r6
 800a134:	bfa8      	it	ge
 800a136:	4633      	movge	r3, r6
 800a138:	2b00      	cmp	r3, #0
 800a13a:	bfc2      	ittt	gt
 800a13c:	1aed      	subgt	r5, r5, r3
 800a13e:	1af6      	subgt	r6, r6, r3
 800a140:	1aff      	subgt	r7, r7, r3
 800a142:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a144:	2b00      	cmp	r3, #0
 800a146:	dd16      	ble.n	800a176 <_strtod_l+0x736>
 800a148:	4641      	mov	r1, r8
 800a14a:	9805      	ldr	r0, [sp, #20]
 800a14c:	461a      	mov	r2, r3
 800a14e:	f003 f8d5 	bl	800d2fc <__pow5mult>
 800a152:	4680      	mov	r8, r0
 800a154:	2800      	cmp	r0, #0
 800a156:	d0ba      	beq.n	800a0ce <_strtod_l+0x68e>
 800a158:	4601      	mov	r1, r0
 800a15a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a15c:	9805      	ldr	r0, [sp, #20]
 800a15e:	f003 f823 	bl	800d1a8 <__multiply>
 800a162:	900e      	str	r0, [sp, #56]	@ 0x38
 800a164:	2800      	cmp	r0, #0
 800a166:	f43f ae8a 	beq.w	8009e7e <_strtod_l+0x43e>
 800a16a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a16c:	9805      	ldr	r0, [sp, #20]
 800a16e:	f002 ff07 	bl	800cf80 <_Bfree>
 800a172:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a174:	931a      	str	r3, [sp, #104]	@ 0x68
 800a176:	2d00      	cmp	r5, #0
 800a178:	dc1d      	bgt.n	800a1b6 <_strtod_l+0x776>
 800a17a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	dd23      	ble.n	800a1c8 <_strtod_l+0x788>
 800a180:	4649      	mov	r1, r9
 800a182:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a184:	9805      	ldr	r0, [sp, #20]
 800a186:	f003 f8b9 	bl	800d2fc <__pow5mult>
 800a18a:	4681      	mov	r9, r0
 800a18c:	b9e0      	cbnz	r0, 800a1c8 <_strtod_l+0x788>
 800a18e:	f04f 0900 	mov.w	r9, #0
 800a192:	e674      	b.n	8009e7e <_strtod_l+0x43e>
 800a194:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a198:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a19c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a1a0:	35e2      	adds	r5, #226	@ 0xe2
 800a1a2:	fa01 f305 	lsl.w	r3, r1, r5
 800a1a6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a1a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a1aa:	e7ba      	b.n	800a122 <_strtod_l+0x6e2>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a1b4:	e7b5      	b.n	800a122 <_strtod_l+0x6e2>
 800a1b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a1b8:	9805      	ldr	r0, [sp, #20]
 800a1ba:	462a      	mov	r2, r5
 800a1bc:	f003 f8f8 	bl	800d3b0 <__lshift>
 800a1c0:	901a      	str	r0, [sp, #104]	@ 0x68
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	d1d9      	bne.n	800a17a <_strtod_l+0x73a>
 800a1c6:	e65a      	b.n	8009e7e <_strtod_l+0x43e>
 800a1c8:	2e00      	cmp	r6, #0
 800a1ca:	dd07      	ble.n	800a1dc <_strtod_l+0x79c>
 800a1cc:	4649      	mov	r1, r9
 800a1ce:	9805      	ldr	r0, [sp, #20]
 800a1d0:	4632      	mov	r2, r6
 800a1d2:	f003 f8ed 	bl	800d3b0 <__lshift>
 800a1d6:	4681      	mov	r9, r0
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	d0d8      	beq.n	800a18e <_strtod_l+0x74e>
 800a1dc:	2f00      	cmp	r7, #0
 800a1de:	dd08      	ble.n	800a1f2 <_strtod_l+0x7b2>
 800a1e0:	4641      	mov	r1, r8
 800a1e2:	9805      	ldr	r0, [sp, #20]
 800a1e4:	463a      	mov	r2, r7
 800a1e6:	f003 f8e3 	bl	800d3b0 <__lshift>
 800a1ea:	4680      	mov	r8, r0
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	f43f ae46 	beq.w	8009e7e <_strtod_l+0x43e>
 800a1f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a1f4:	9805      	ldr	r0, [sp, #20]
 800a1f6:	464a      	mov	r2, r9
 800a1f8:	f003 f962 	bl	800d4c0 <__mdiff>
 800a1fc:	4604      	mov	r4, r0
 800a1fe:	2800      	cmp	r0, #0
 800a200:	f43f ae3d 	beq.w	8009e7e <_strtod_l+0x43e>
 800a204:	68c3      	ldr	r3, [r0, #12]
 800a206:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a208:	2300      	movs	r3, #0
 800a20a:	60c3      	str	r3, [r0, #12]
 800a20c:	4641      	mov	r1, r8
 800a20e:	f003 f93b 	bl	800d488 <__mcmp>
 800a212:	2800      	cmp	r0, #0
 800a214:	da46      	bge.n	800a2a4 <_strtod_l+0x864>
 800a216:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a218:	ea53 030a 	orrs.w	r3, r3, sl
 800a21c:	d16c      	bne.n	800a2f8 <_strtod_l+0x8b8>
 800a21e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a222:	2b00      	cmp	r3, #0
 800a224:	d168      	bne.n	800a2f8 <_strtod_l+0x8b8>
 800a226:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a22a:	0d1b      	lsrs	r3, r3, #20
 800a22c:	051b      	lsls	r3, r3, #20
 800a22e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a232:	d961      	bls.n	800a2f8 <_strtod_l+0x8b8>
 800a234:	6963      	ldr	r3, [r4, #20]
 800a236:	b913      	cbnz	r3, 800a23e <_strtod_l+0x7fe>
 800a238:	6923      	ldr	r3, [r4, #16]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	dd5c      	ble.n	800a2f8 <_strtod_l+0x8b8>
 800a23e:	4621      	mov	r1, r4
 800a240:	2201      	movs	r2, #1
 800a242:	9805      	ldr	r0, [sp, #20]
 800a244:	f003 f8b4 	bl	800d3b0 <__lshift>
 800a248:	4641      	mov	r1, r8
 800a24a:	4604      	mov	r4, r0
 800a24c:	f003 f91c 	bl	800d488 <__mcmp>
 800a250:	2800      	cmp	r0, #0
 800a252:	dd51      	ble.n	800a2f8 <_strtod_l+0x8b8>
 800a254:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a258:	9a08      	ldr	r2, [sp, #32]
 800a25a:	0d1b      	lsrs	r3, r3, #20
 800a25c:	051b      	lsls	r3, r3, #20
 800a25e:	2a00      	cmp	r2, #0
 800a260:	d06b      	beq.n	800a33a <_strtod_l+0x8fa>
 800a262:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a266:	d868      	bhi.n	800a33a <_strtod_l+0x8fa>
 800a268:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a26c:	f67f ae9d 	bls.w	8009faa <_strtod_l+0x56a>
 800a270:	4b0a      	ldr	r3, [pc, #40]	@ (800a29c <_strtod_l+0x85c>)
 800a272:	4650      	mov	r0, sl
 800a274:	4659      	mov	r1, fp
 800a276:	2200      	movs	r2, #0
 800a278:	f7f6 f9c6 	bl	8000608 <__aeabi_dmul>
 800a27c:	4b08      	ldr	r3, [pc, #32]	@ (800a2a0 <_strtod_l+0x860>)
 800a27e:	400b      	ands	r3, r1
 800a280:	4682      	mov	sl, r0
 800a282:	468b      	mov	fp, r1
 800a284:	2b00      	cmp	r3, #0
 800a286:	f47f ae05 	bne.w	8009e94 <_strtod_l+0x454>
 800a28a:	9a05      	ldr	r2, [sp, #20]
 800a28c:	2322      	movs	r3, #34	@ 0x22
 800a28e:	6013      	str	r3, [r2, #0]
 800a290:	e600      	b.n	8009e94 <_strtod_l+0x454>
 800a292:	bf00      	nop
 800a294:	0800e5a0 	.word	0x0800e5a0
 800a298:	fffffc02 	.word	0xfffffc02
 800a29c:	39500000 	.word	0x39500000
 800a2a0:	7ff00000 	.word	0x7ff00000
 800a2a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a2a8:	d165      	bne.n	800a376 <_strtod_l+0x936>
 800a2aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a2ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2b0:	b35a      	cbz	r2, 800a30a <_strtod_l+0x8ca>
 800a2b2:	4a9f      	ldr	r2, [pc, #636]	@ (800a530 <_strtod_l+0xaf0>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d12b      	bne.n	800a310 <_strtod_l+0x8d0>
 800a2b8:	9b08      	ldr	r3, [sp, #32]
 800a2ba:	4651      	mov	r1, sl
 800a2bc:	b303      	cbz	r3, 800a300 <_strtod_l+0x8c0>
 800a2be:	4b9d      	ldr	r3, [pc, #628]	@ (800a534 <_strtod_l+0xaf4>)
 800a2c0:	465a      	mov	r2, fp
 800a2c2:	4013      	ands	r3, r2
 800a2c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a2c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2cc:	d81b      	bhi.n	800a306 <_strtod_l+0x8c6>
 800a2ce:	0d1b      	lsrs	r3, r3, #20
 800a2d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a2d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d8:	4299      	cmp	r1, r3
 800a2da:	d119      	bne.n	800a310 <_strtod_l+0x8d0>
 800a2dc:	4b96      	ldr	r3, [pc, #600]	@ (800a538 <_strtod_l+0xaf8>)
 800a2de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d102      	bne.n	800a2ea <_strtod_l+0x8aa>
 800a2e4:	3101      	adds	r1, #1
 800a2e6:	f43f adca 	beq.w	8009e7e <_strtod_l+0x43e>
 800a2ea:	4b92      	ldr	r3, [pc, #584]	@ (800a534 <_strtod_l+0xaf4>)
 800a2ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2ee:	401a      	ands	r2, r3
 800a2f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a2f4:	f04f 0a00 	mov.w	sl, #0
 800a2f8:	9b08      	ldr	r3, [sp, #32]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1b8      	bne.n	800a270 <_strtod_l+0x830>
 800a2fe:	e5c9      	b.n	8009e94 <_strtod_l+0x454>
 800a300:	f04f 33ff 	mov.w	r3, #4294967295
 800a304:	e7e8      	b.n	800a2d8 <_strtod_l+0x898>
 800a306:	4613      	mov	r3, r2
 800a308:	e7e6      	b.n	800a2d8 <_strtod_l+0x898>
 800a30a:	ea53 030a 	orrs.w	r3, r3, sl
 800a30e:	d0a1      	beq.n	800a254 <_strtod_l+0x814>
 800a310:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a312:	b1db      	cbz	r3, 800a34c <_strtod_l+0x90c>
 800a314:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a316:	4213      	tst	r3, r2
 800a318:	d0ee      	beq.n	800a2f8 <_strtod_l+0x8b8>
 800a31a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a31c:	9a08      	ldr	r2, [sp, #32]
 800a31e:	4650      	mov	r0, sl
 800a320:	4659      	mov	r1, fp
 800a322:	b1bb      	cbz	r3, 800a354 <_strtod_l+0x914>
 800a324:	f7ff fb6e 	bl	8009a04 <sulp>
 800a328:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a32c:	ec53 2b10 	vmov	r2, r3, d0
 800a330:	f7f5 ffb4 	bl	800029c <__adddf3>
 800a334:	4682      	mov	sl, r0
 800a336:	468b      	mov	fp, r1
 800a338:	e7de      	b.n	800a2f8 <_strtod_l+0x8b8>
 800a33a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a33e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a342:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a346:	f04f 3aff 	mov.w	sl, #4294967295
 800a34a:	e7d5      	b.n	800a2f8 <_strtod_l+0x8b8>
 800a34c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a34e:	ea13 0f0a 	tst.w	r3, sl
 800a352:	e7e1      	b.n	800a318 <_strtod_l+0x8d8>
 800a354:	f7ff fb56 	bl	8009a04 <sulp>
 800a358:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a35c:	ec53 2b10 	vmov	r2, r3, d0
 800a360:	f7f5 ff9a 	bl	8000298 <__aeabi_dsub>
 800a364:	2200      	movs	r2, #0
 800a366:	2300      	movs	r3, #0
 800a368:	4682      	mov	sl, r0
 800a36a:	468b      	mov	fp, r1
 800a36c:	f7f6 fbb4 	bl	8000ad8 <__aeabi_dcmpeq>
 800a370:	2800      	cmp	r0, #0
 800a372:	d0c1      	beq.n	800a2f8 <_strtod_l+0x8b8>
 800a374:	e619      	b.n	8009faa <_strtod_l+0x56a>
 800a376:	4641      	mov	r1, r8
 800a378:	4620      	mov	r0, r4
 800a37a:	f003 f9fd 	bl	800d778 <__ratio>
 800a37e:	ec57 6b10 	vmov	r6, r7, d0
 800a382:	2200      	movs	r2, #0
 800a384:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a388:	4630      	mov	r0, r6
 800a38a:	4639      	mov	r1, r7
 800a38c:	f7f6 fbb8 	bl	8000b00 <__aeabi_dcmple>
 800a390:	2800      	cmp	r0, #0
 800a392:	d06f      	beq.n	800a474 <_strtod_l+0xa34>
 800a394:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a396:	2b00      	cmp	r3, #0
 800a398:	d17a      	bne.n	800a490 <_strtod_l+0xa50>
 800a39a:	f1ba 0f00 	cmp.w	sl, #0
 800a39e:	d158      	bne.n	800a452 <_strtod_l+0xa12>
 800a3a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d15a      	bne.n	800a460 <_strtod_l+0xa20>
 800a3aa:	4b64      	ldr	r3, [pc, #400]	@ (800a53c <_strtod_l+0xafc>)
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	4639      	mov	r1, r7
 800a3b2:	f7f6 fb9b 	bl	8000aec <__aeabi_dcmplt>
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	d159      	bne.n	800a46e <_strtod_l+0xa2e>
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	4639      	mov	r1, r7
 800a3be:	4b60      	ldr	r3, [pc, #384]	@ (800a540 <_strtod_l+0xb00>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f7f6 f921 	bl	8000608 <__aeabi_dmul>
 800a3c6:	4606      	mov	r6, r0
 800a3c8:	460f      	mov	r7, r1
 800a3ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a3ce:	9606      	str	r6, [sp, #24]
 800a3d0:	9307      	str	r3, [sp, #28]
 800a3d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3d6:	4d57      	ldr	r5, [pc, #348]	@ (800a534 <_strtod_l+0xaf4>)
 800a3d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a3dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3de:	401d      	ands	r5, r3
 800a3e0:	4b58      	ldr	r3, [pc, #352]	@ (800a544 <_strtod_l+0xb04>)
 800a3e2:	429d      	cmp	r5, r3
 800a3e4:	f040 80b2 	bne.w	800a54c <_strtod_l+0xb0c>
 800a3e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a3ee:	ec4b ab10 	vmov	d0, sl, fp
 800a3f2:	f003 f8f9 	bl	800d5e8 <__ulp>
 800a3f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3fa:	ec51 0b10 	vmov	r0, r1, d0
 800a3fe:	f7f6 f903 	bl	8000608 <__aeabi_dmul>
 800a402:	4652      	mov	r2, sl
 800a404:	465b      	mov	r3, fp
 800a406:	f7f5 ff49 	bl	800029c <__adddf3>
 800a40a:	460b      	mov	r3, r1
 800a40c:	4949      	ldr	r1, [pc, #292]	@ (800a534 <_strtod_l+0xaf4>)
 800a40e:	4a4e      	ldr	r2, [pc, #312]	@ (800a548 <_strtod_l+0xb08>)
 800a410:	4019      	ands	r1, r3
 800a412:	4291      	cmp	r1, r2
 800a414:	4682      	mov	sl, r0
 800a416:	d942      	bls.n	800a49e <_strtod_l+0xa5e>
 800a418:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a41a:	4b47      	ldr	r3, [pc, #284]	@ (800a538 <_strtod_l+0xaf8>)
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d103      	bne.n	800a428 <_strtod_l+0x9e8>
 800a420:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a422:	3301      	adds	r3, #1
 800a424:	f43f ad2b 	beq.w	8009e7e <_strtod_l+0x43e>
 800a428:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a538 <_strtod_l+0xaf8>
 800a42c:	f04f 3aff 	mov.w	sl, #4294967295
 800a430:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a432:	9805      	ldr	r0, [sp, #20]
 800a434:	f002 fda4 	bl	800cf80 <_Bfree>
 800a438:	9805      	ldr	r0, [sp, #20]
 800a43a:	4649      	mov	r1, r9
 800a43c:	f002 fda0 	bl	800cf80 <_Bfree>
 800a440:	9805      	ldr	r0, [sp, #20]
 800a442:	4641      	mov	r1, r8
 800a444:	f002 fd9c 	bl	800cf80 <_Bfree>
 800a448:	9805      	ldr	r0, [sp, #20]
 800a44a:	4621      	mov	r1, r4
 800a44c:	f002 fd98 	bl	800cf80 <_Bfree>
 800a450:	e618      	b.n	800a084 <_strtod_l+0x644>
 800a452:	f1ba 0f01 	cmp.w	sl, #1
 800a456:	d103      	bne.n	800a460 <_strtod_l+0xa20>
 800a458:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f43f ada5 	beq.w	8009faa <_strtod_l+0x56a>
 800a460:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a510 <_strtod_l+0xad0>
 800a464:	4f35      	ldr	r7, [pc, #212]	@ (800a53c <_strtod_l+0xafc>)
 800a466:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a46a:	2600      	movs	r6, #0
 800a46c:	e7b1      	b.n	800a3d2 <_strtod_l+0x992>
 800a46e:	4f34      	ldr	r7, [pc, #208]	@ (800a540 <_strtod_l+0xb00>)
 800a470:	2600      	movs	r6, #0
 800a472:	e7aa      	b.n	800a3ca <_strtod_l+0x98a>
 800a474:	4b32      	ldr	r3, [pc, #200]	@ (800a540 <_strtod_l+0xb00>)
 800a476:	4630      	mov	r0, r6
 800a478:	4639      	mov	r1, r7
 800a47a:	2200      	movs	r2, #0
 800a47c:	f7f6 f8c4 	bl	8000608 <__aeabi_dmul>
 800a480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a482:	4606      	mov	r6, r0
 800a484:	460f      	mov	r7, r1
 800a486:	2b00      	cmp	r3, #0
 800a488:	d09f      	beq.n	800a3ca <_strtod_l+0x98a>
 800a48a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a48e:	e7a0      	b.n	800a3d2 <_strtod_l+0x992>
 800a490:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a518 <_strtod_l+0xad8>
 800a494:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a498:	ec57 6b17 	vmov	r6, r7, d7
 800a49c:	e799      	b.n	800a3d2 <_strtod_l+0x992>
 800a49e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a4a2:	9b08      	ldr	r3, [sp, #32]
 800a4a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1c1      	bne.n	800a430 <_strtod_l+0x9f0>
 800a4ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a4b0:	0d1b      	lsrs	r3, r3, #20
 800a4b2:	051b      	lsls	r3, r3, #20
 800a4b4:	429d      	cmp	r5, r3
 800a4b6:	d1bb      	bne.n	800a430 <_strtod_l+0x9f0>
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	4639      	mov	r1, r7
 800a4bc:	f7f6 fc04 	bl	8000cc8 <__aeabi_d2lz>
 800a4c0:	f7f6 f874 	bl	80005ac <__aeabi_l2d>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	4630      	mov	r0, r6
 800a4ca:	4639      	mov	r1, r7
 800a4cc:	f7f5 fee4 	bl	8000298 <__aeabi_dsub>
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a4d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a4dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4de:	ea46 060a 	orr.w	r6, r6, sl
 800a4e2:	431e      	orrs	r6, r3
 800a4e4:	d06f      	beq.n	800a5c6 <_strtod_l+0xb86>
 800a4e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a520 <_strtod_l+0xae0>)
 800a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ec:	f7f6 fafe 	bl	8000aec <__aeabi_dcmplt>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	f47f accf 	bne.w	8009e94 <_strtod_l+0x454>
 800a4f6:	a30c      	add	r3, pc, #48	@ (adr r3, 800a528 <_strtod_l+0xae8>)
 800a4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a500:	f7f6 fb12 	bl	8000b28 <__aeabi_dcmpgt>
 800a504:	2800      	cmp	r0, #0
 800a506:	d093      	beq.n	800a430 <_strtod_l+0x9f0>
 800a508:	e4c4      	b.n	8009e94 <_strtod_l+0x454>
 800a50a:	bf00      	nop
 800a50c:	f3af 8000 	nop.w
 800a510:	00000000 	.word	0x00000000
 800a514:	bff00000 	.word	0xbff00000
 800a518:	00000000 	.word	0x00000000
 800a51c:	3ff00000 	.word	0x3ff00000
 800a520:	94a03595 	.word	0x94a03595
 800a524:	3fdfffff 	.word	0x3fdfffff
 800a528:	35afe535 	.word	0x35afe535
 800a52c:	3fe00000 	.word	0x3fe00000
 800a530:	000fffff 	.word	0x000fffff
 800a534:	7ff00000 	.word	0x7ff00000
 800a538:	7fefffff 	.word	0x7fefffff
 800a53c:	3ff00000 	.word	0x3ff00000
 800a540:	3fe00000 	.word	0x3fe00000
 800a544:	7fe00000 	.word	0x7fe00000
 800a548:	7c9fffff 	.word	0x7c9fffff
 800a54c:	9b08      	ldr	r3, [sp, #32]
 800a54e:	b323      	cbz	r3, 800a59a <_strtod_l+0xb5a>
 800a550:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a554:	d821      	bhi.n	800a59a <_strtod_l+0xb5a>
 800a556:	a328      	add	r3, pc, #160	@ (adr r3, 800a5f8 <_strtod_l+0xbb8>)
 800a558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55c:	4630      	mov	r0, r6
 800a55e:	4639      	mov	r1, r7
 800a560:	f7f6 face 	bl	8000b00 <__aeabi_dcmple>
 800a564:	b1a0      	cbz	r0, 800a590 <_strtod_l+0xb50>
 800a566:	4639      	mov	r1, r7
 800a568:	4630      	mov	r0, r6
 800a56a:	f7f6 fb25 	bl	8000bb8 <__aeabi_d2uiz>
 800a56e:	2801      	cmp	r0, #1
 800a570:	bf38      	it	cc
 800a572:	2001      	movcc	r0, #1
 800a574:	f7f5 ffce 	bl	8000514 <__aeabi_ui2d>
 800a578:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a57a:	4606      	mov	r6, r0
 800a57c:	460f      	mov	r7, r1
 800a57e:	b9fb      	cbnz	r3, 800a5c0 <_strtod_l+0xb80>
 800a580:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a584:	9014      	str	r0, [sp, #80]	@ 0x50
 800a586:	9315      	str	r3, [sp, #84]	@ 0x54
 800a588:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a58c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a590:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a592:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a596:	1b5b      	subs	r3, r3, r5
 800a598:	9311      	str	r3, [sp, #68]	@ 0x44
 800a59a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a59e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a5a2:	f003 f821 	bl	800d5e8 <__ulp>
 800a5a6:	4650      	mov	r0, sl
 800a5a8:	ec53 2b10 	vmov	r2, r3, d0
 800a5ac:	4659      	mov	r1, fp
 800a5ae:	f7f6 f82b 	bl	8000608 <__aeabi_dmul>
 800a5b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a5b6:	f7f5 fe71 	bl	800029c <__adddf3>
 800a5ba:	4682      	mov	sl, r0
 800a5bc:	468b      	mov	fp, r1
 800a5be:	e770      	b.n	800a4a2 <_strtod_l+0xa62>
 800a5c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a5c4:	e7e0      	b.n	800a588 <_strtod_l+0xb48>
 800a5c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a600 <_strtod_l+0xbc0>)
 800a5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5cc:	f7f6 fa8e 	bl	8000aec <__aeabi_dcmplt>
 800a5d0:	e798      	b.n	800a504 <_strtod_l+0xac4>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a5d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5da:	6013      	str	r3, [r2, #0]
 800a5dc:	f7ff ba6d 	b.w	8009aba <_strtod_l+0x7a>
 800a5e0:	2a65      	cmp	r2, #101	@ 0x65
 800a5e2:	f43f ab66 	beq.w	8009cb2 <_strtod_l+0x272>
 800a5e6:	2a45      	cmp	r2, #69	@ 0x45
 800a5e8:	f43f ab63 	beq.w	8009cb2 <_strtod_l+0x272>
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	f7ff bb9e 	b.w	8009d2e <_strtod_l+0x2ee>
 800a5f2:	bf00      	nop
 800a5f4:	f3af 8000 	nop.w
 800a5f8:	ffc00000 	.word	0xffc00000
 800a5fc:	41dfffff 	.word	0x41dfffff
 800a600:	94a03595 	.word	0x94a03595
 800a604:	3fcfffff 	.word	0x3fcfffff

0800a608 <_strtod_r>:
 800a608:	4b01      	ldr	r3, [pc, #4]	@ (800a610 <_strtod_r+0x8>)
 800a60a:	f7ff ba19 	b.w	8009a40 <_strtod_l>
 800a60e:	bf00      	nop
 800a610:	2000002c 	.word	0x2000002c

0800a614 <strtod>:
 800a614:	460a      	mov	r2, r1
 800a616:	4601      	mov	r1, r0
 800a618:	4802      	ldr	r0, [pc, #8]	@ (800a624 <strtod+0x10>)
 800a61a:	4b03      	ldr	r3, [pc, #12]	@ (800a628 <strtod+0x14>)
 800a61c:	6800      	ldr	r0, [r0, #0]
 800a61e:	f7ff ba0f 	b.w	8009a40 <_strtod_l>
 800a622:	bf00      	nop
 800a624:	20000198 	.word	0x20000198
 800a628:	2000002c 	.word	0x2000002c

0800a62c <_strtol_l.constprop.0>:
 800a62c:	2b24      	cmp	r3, #36	@ 0x24
 800a62e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a632:	4686      	mov	lr, r0
 800a634:	4690      	mov	r8, r2
 800a636:	d801      	bhi.n	800a63c <_strtol_l.constprop.0+0x10>
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d106      	bne.n	800a64a <_strtol_l.constprop.0+0x1e>
 800a63c:	f001 f958 	bl	800b8f0 <__errno>
 800a640:	2316      	movs	r3, #22
 800a642:	6003      	str	r3, [r0, #0]
 800a644:	2000      	movs	r0, #0
 800a646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a64a:	4834      	ldr	r0, [pc, #208]	@ (800a71c <_strtol_l.constprop.0+0xf0>)
 800a64c:	460d      	mov	r5, r1
 800a64e:	462a      	mov	r2, r5
 800a650:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a654:	5d06      	ldrb	r6, [r0, r4]
 800a656:	f016 0608 	ands.w	r6, r6, #8
 800a65a:	d1f8      	bne.n	800a64e <_strtol_l.constprop.0+0x22>
 800a65c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a65e:	d12d      	bne.n	800a6bc <_strtol_l.constprop.0+0x90>
 800a660:	782c      	ldrb	r4, [r5, #0]
 800a662:	2601      	movs	r6, #1
 800a664:	1c95      	adds	r5, r2, #2
 800a666:	f033 0210 	bics.w	r2, r3, #16
 800a66a:	d109      	bne.n	800a680 <_strtol_l.constprop.0+0x54>
 800a66c:	2c30      	cmp	r4, #48	@ 0x30
 800a66e:	d12a      	bne.n	800a6c6 <_strtol_l.constprop.0+0x9a>
 800a670:	782a      	ldrb	r2, [r5, #0]
 800a672:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a676:	2a58      	cmp	r2, #88	@ 0x58
 800a678:	d125      	bne.n	800a6c6 <_strtol_l.constprop.0+0x9a>
 800a67a:	786c      	ldrb	r4, [r5, #1]
 800a67c:	2310      	movs	r3, #16
 800a67e:	3502      	adds	r5, #2
 800a680:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a684:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a688:	2200      	movs	r2, #0
 800a68a:	fbbc f9f3 	udiv	r9, ip, r3
 800a68e:	4610      	mov	r0, r2
 800a690:	fb03 ca19 	mls	sl, r3, r9, ip
 800a694:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a698:	2f09      	cmp	r7, #9
 800a69a:	d81b      	bhi.n	800a6d4 <_strtol_l.constprop.0+0xa8>
 800a69c:	463c      	mov	r4, r7
 800a69e:	42a3      	cmp	r3, r4
 800a6a0:	dd27      	ble.n	800a6f2 <_strtol_l.constprop.0+0xc6>
 800a6a2:	1c57      	adds	r7, r2, #1
 800a6a4:	d007      	beq.n	800a6b6 <_strtol_l.constprop.0+0x8a>
 800a6a6:	4581      	cmp	r9, r0
 800a6a8:	d320      	bcc.n	800a6ec <_strtol_l.constprop.0+0xc0>
 800a6aa:	d101      	bne.n	800a6b0 <_strtol_l.constprop.0+0x84>
 800a6ac:	45a2      	cmp	sl, r4
 800a6ae:	db1d      	blt.n	800a6ec <_strtol_l.constprop.0+0xc0>
 800a6b0:	fb00 4003 	mla	r0, r0, r3, r4
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6ba:	e7eb      	b.n	800a694 <_strtol_l.constprop.0+0x68>
 800a6bc:	2c2b      	cmp	r4, #43	@ 0x2b
 800a6be:	bf04      	itt	eq
 800a6c0:	782c      	ldrbeq	r4, [r5, #0]
 800a6c2:	1c95      	addeq	r5, r2, #2
 800a6c4:	e7cf      	b.n	800a666 <_strtol_l.constprop.0+0x3a>
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d1da      	bne.n	800a680 <_strtol_l.constprop.0+0x54>
 800a6ca:	2c30      	cmp	r4, #48	@ 0x30
 800a6cc:	bf0c      	ite	eq
 800a6ce:	2308      	moveq	r3, #8
 800a6d0:	230a      	movne	r3, #10
 800a6d2:	e7d5      	b.n	800a680 <_strtol_l.constprop.0+0x54>
 800a6d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a6d8:	2f19      	cmp	r7, #25
 800a6da:	d801      	bhi.n	800a6e0 <_strtol_l.constprop.0+0xb4>
 800a6dc:	3c37      	subs	r4, #55	@ 0x37
 800a6de:	e7de      	b.n	800a69e <_strtol_l.constprop.0+0x72>
 800a6e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a6e4:	2f19      	cmp	r7, #25
 800a6e6:	d804      	bhi.n	800a6f2 <_strtol_l.constprop.0+0xc6>
 800a6e8:	3c57      	subs	r4, #87	@ 0x57
 800a6ea:	e7d8      	b.n	800a69e <_strtol_l.constprop.0+0x72>
 800a6ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a6f0:	e7e1      	b.n	800a6b6 <_strtol_l.constprop.0+0x8a>
 800a6f2:	1c53      	adds	r3, r2, #1
 800a6f4:	d108      	bne.n	800a708 <_strtol_l.constprop.0+0xdc>
 800a6f6:	2322      	movs	r3, #34	@ 0x22
 800a6f8:	f8ce 3000 	str.w	r3, [lr]
 800a6fc:	4660      	mov	r0, ip
 800a6fe:	f1b8 0f00 	cmp.w	r8, #0
 800a702:	d0a0      	beq.n	800a646 <_strtol_l.constprop.0+0x1a>
 800a704:	1e69      	subs	r1, r5, #1
 800a706:	e006      	b.n	800a716 <_strtol_l.constprop.0+0xea>
 800a708:	b106      	cbz	r6, 800a70c <_strtol_l.constprop.0+0xe0>
 800a70a:	4240      	negs	r0, r0
 800a70c:	f1b8 0f00 	cmp.w	r8, #0
 800a710:	d099      	beq.n	800a646 <_strtol_l.constprop.0+0x1a>
 800a712:	2a00      	cmp	r2, #0
 800a714:	d1f6      	bne.n	800a704 <_strtol_l.constprop.0+0xd8>
 800a716:	f8c8 1000 	str.w	r1, [r8]
 800a71a:	e794      	b.n	800a646 <_strtol_l.constprop.0+0x1a>
 800a71c:	0800e5ee 	.word	0x0800e5ee

0800a720 <_strtol_r>:
 800a720:	f7ff bf84 	b.w	800a62c <_strtol_l.constprop.0>

0800a724 <strtol>:
 800a724:	4613      	mov	r3, r2
 800a726:	460a      	mov	r2, r1
 800a728:	4601      	mov	r1, r0
 800a72a:	4802      	ldr	r0, [pc, #8]	@ (800a734 <strtol+0x10>)
 800a72c:	6800      	ldr	r0, [r0, #0]
 800a72e:	f7ff bf7d 	b.w	800a62c <_strtol_l.constprop.0>
 800a732:	bf00      	nop
 800a734:	20000198 	.word	0x20000198

0800a738 <__utoa>:
 800a738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a73a:	4c1f      	ldr	r4, [pc, #124]	@ (800a7b8 <__utoa+0x80>)
 800a73c:	b08b      	sub	sp, #44	@ 0x2c
 800a73e:	4605      	mov	r5, r0
 800a740:	460b      	mov	r3, r1
 800a742:	466e      	mov	r6, sp
 800a744:	f104 0c20 	add.w	ip, r4, #32
 800a748:	6820      	ldr	r0, [r4, #0]
 800a74a:	6861      	ldr	r1, [r4, #4]
 800a74c:	4637      	mov	r7, r6
 800a74e:	c703      	stmia	r7!, {r0, r1}
 800a750:	3408      	adds	r4, #8
 800a752:	4564      	cmp	r4, ip
 800a754:	463e      	mov	r6, r7
 800a756:	d1f7      	bne.n	800a748 <__utoa+0x10>
 800a758:	7921      	ldrb	r1, [r4, #4]
 800a75a:	7139      	strb	r1, [r7, #4]
 800a75c:	1e91      	subs	r1, r2, #2
 800a75e:	6820      	ldr	r0, [r4, #0]
 800a760:	6038      	str	r0, [r7, #0]
 800a762:	2922      	cmp	r1, #34	@ 0x22
 800a764:	f04f 0100 	mov.w	r1, #0
 800a768:	d904      	bls.n	800a774 <__utoa+0x3c>
 800a76a:	7019      	strb	r1, [r3, #0]
 800a76c:	460b      	mov	r3, r1
 800a76e:	4618      	mov	r0, r3
 800a770:	b00b      	add	sp, #44	@ 0x2c
 800a772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a774:	1e58      	subs	r0, r3, #1
 800a776:	4684      	mov	ip, r0
 800a778:	fbb5 f7f2 	udiv	r7, r5, r2
 800a77c:	fb02 5617 	mls	r6, r2, r7, r5
 800a780:	3628      	adds	r6, #40	@ 0x28
 800a782:	446e      	add	r6, sp
 800a784:	460c      	mov	r4, r1
 800a786:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800a78a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800a78e:	462e      	mov	r6, r5
 800a790:	42b2      	cmp	r2, r6
 800a792:	f101 0101 	add.w	r1, r1, #1
 800a796:	463d      	mov	r5, r7
 800a798:	d9ee      	bls.n	800a778 <__utoa+0x40>
 800a79a:	2200      	movs	r2, #0
 800a79c:	545a      	strb	r2, [r3, r1]
 800a79e:	1919      	adds	r1, r3, r4
 800a7a0:	1aa5      	subs	r5, r4, r2
 800a7a2:	42aa      	cmp	r2, r5
 800a7a4:	dae3      	bge.n	800a76e <__utoa+0x36>
 800a7a6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800a7aa:	780e      	ldrb	r6, [r1, #0]
 800a7ac:	7006      	strb	r6, [r0, #0]
 800a7ae:	3201      	adds	r2, #1
 800a7b0:	f801 5901 	strb.w	r5, [r1], #-1
 800a7b4:	e7f4      	b.n	800a7a0 <__utoa+0x68>
 800a7b6:	bf00      	nop
 800a7b8:	0800e5c8 	.word	0x0800e5c8

0800a7bc <__cvt>:
 800a7bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7c0:	ec57 6b10 	vmov	r6, r7, d0
 800a7c4:	2f00      	cmp	r7, #0
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	463b      	mov	r3, r7
 800a7cc:	bfbb      	ittet	lt
 800a7ce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a7d2:	461f      	movlt	r7, r3
 800a7d4:	2300      	movge	r3, #0
 800a7d6:	232d      	movlt	r3, #45	@ 0x2d
 800a7d8:	700b      	strb	r3, [r1, #0]
 800a7da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7dc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a7e0:	4691      	mov	r9, r2
 800a7e2:	f023 0820 	bic.w	r8, r3, #32
 800a7e6:	bfbc      	itt	lt
 800a7e8:	4632      	movlt	r2, r6
 800a7ea:	4616      	movlt	r6, r2
 800a7ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a7f0:	d005      	beq.n	800a7fe <__cvt+0x42>
 800a7f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a7f6:	d100      	bne.n	800a7fa <__cvt+0x3e>
 800a7f8:	3401      	adds	r4, #1
 800a7fa:	2102      	movs	r1, #2
 800a7fc:	e000      	b.n	800a800 <__cvt+0x44>
 800a7fe:	2103      	movs	r1, #3
 800a800:	ab03      	add	r3, sp, #12
 800a802:	9301      	str	r3, [sp, #4]
 800a804:	ab02      	add	r3, sp, #8
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	ec47 6b10 	vmov	d0, r6, r7
 800a80c:	4653      	mov	r3, sl
 800a80e:	4622      	mov	r2, r4
 800a810:	f001 f966 	bl	800bae0 <_dtoa_r>
 800a814:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a818:	4605      	mov	r5, r0
 800a81a:	d119      	bne.n	800a850 <__cvt+0x94>
 800a81c:	f019 0f01 	tst.w	r9, #1
 800a820:	d00e      	beq.n	800a840 <__cvt+0x84>
 800a822:	eb00 0904 	add.w	r9, r0, r4
 800a826:	2200      	movs	r2, #0
 800a828:	2300      	movs	r3, #0
 800a82a:	4630      	mov	r0, r6
 800a82c:	4639      	mov	r1, r7
 800a82e:	f7f6 f953 	bl	8000ad8 <__aeabi_dcmpeq>
 800a832:	b108      	cbz	r0, 800a838 <__cvt+0x7c>
 800a834:	f8cd 900c 	str.w	r9, [sp, #12]
 800a838:	2230      	movs	r2, #48	@ 0x30
 800a83a:	9b03      	ldr	r3, [sp, #12]
 800a83c:	454b      	cmp	r3, r9
 800a83e:	d31e      	bcc.n	800a87e <__cvt+0xc2>
 800a840:	9b03      	ldr	r3, [sp, #12]
 800a842:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a844:	1b5b      	subs	r3, r3, r5
 800a846:	4628      	mov	r0, r5
 800a848:	6013      	str	r3, [r2, #0]
 800a84a:	b004      	add	sp, #16
 800a84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a850:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a854:	eb00 0904 	add.w	r9, r0, r4
 800a858:	d1e5      	bne.n	800a826 <__cvt+0x6a>
 800a85a:	7803      	ldrb	r3, [r0, #0]
 800a85c:	2b30      	cmp	r3, #48	@ 0x30
 800a85e:	d10a      	bne.n	800a876 <__cvt+0xba>
 800a860:	2200      	movs	r2, #0
 800a862:	2300      	movs	r3, #0
 800a864:	4630      	mov	r0, r6
 800a866:	4639      	mov	r1, r7
 800a868:	f7f6 f936 	bl	8000ad8 <__aeabi_dcmpeq>
 800a86c:	b918      	cbnz	r0, 800a876 <__cvt+0xba>
 800a86e:	f1c4 0401 	rsb	r4, r4, #1
 800a872:	f8ca 4000 	str.w	r4, [sl]
 800a876:	f8da 3000 	ldr.w	r3, [sl]
 800a87a:	4499      	add	r9, r3
 800a87c:	e7d3      	b.n	800a826 <__cvt+0x6a>
 800a87e:	1c59      	adds	r1, r3, #1
 800a880:	9103      	str	r1, [sp, #12]
 800a882:	701a      	strb	r2, [r3, #0]
 800a884:	e7d9      	b.n	800a83a <__cvt+0x7e>

0800a886 <__exponent>:
 800a886:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a888:	2900      	cmp	r1, #0
 800a88a:	bfba      	itte	lt
 800a88c:	4249      	neglt	r1, r1
 800a88e:	232d      	movlt	r3, #45	@ 0x2d
 800a890:	232b      	movge	r3, #43	@ 0x2b
 800a892:	2909      	cmp	r1, #9
 800a894:	7002      	strb	r2, [r0, #0]
 800a896:	7043      	strb	r3, [r0, #1]
 800a898:	dd29      	ble.n	800a8ee <__exponent+0x68>
 800a89a:	f10d 0307 	add.w	r3, sp, #7
 800a89e:	461d      	mov	r5, r3
 800a8a0:	270a      	movs	r7, #10
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	fbb1 f6f7 	udiv	r6, r1, r7
 800a8a8:	fb07 1416 	mls	r4, r7, r6, r1
 800a8ac:	3430      	adds	r4, #48	@ 0x30
 800a8ae:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a8b2:	460c      	mov	r4, r1
 800a8b4:	2c63      	cmp	r4, #99	@ 0x63
 800a8b6:	f103 33ff 	add.w	r3, r3, #4294967295
 800a8ba:	4631      	mov	r1, r6
 800a8bc:	dcf1      	bgt.n	800a8a2 <__exponent+0x1c>
 800a8be:	3130      	adds	r1, #48	@ 0x30
 800a8c0:	1e94      	subs	r4, r2, #2
 800a8c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a8c6:	1c41      	adds	r1, r0, #1
 800a8c8:	4623      	mov	r3, r4
 800a8ca:	42ab      	cmp	r3, r5
 800a8cc:	d30a      	bcc.n	800a8e4 <__exponent+0x5e>
 800a8ce:	f10d 0309 	add.w	r3, sp, #9
 800a8d2:	1a9b      	subs	r3, r3, r2
 800a8d4:	42ac      	cmp	r4, r5
 800a8d6:	bf88      	it	hi
 800a8d8:	2300      	movhi	r3, #0
 800a8da:	3302      	adds	r3, #2
 800a8dc:	4403      	add	r3, r0
 800a8de:	1a18      	subs	r0, r3, r0
 800a8e0:	b003      	add	sp, #12
 800a8e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8e4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a8e8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a8ec:	e7ed      	b.n	800a8ca <__exponent+0x44>
 800a8ee:	2330      	movs	r3, #48	@ 0x30
 800a8f0:	3130      	adds	r1, #48	@ 0x30
 800a8f2:	7083      	strb	r3, [r0, #2]
 800a8f4:	70c1      	strb	r1, [r0, #3]
 800a8f6:	1d03      	adds	r3, r0, #4
 800a8f8:	e7f1      	b.n	800a8de <__exponent+0x58>
	...

0800a8fc <_printf_float>:
 800a8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a900:	b08d      	sub	sp, #52	@ 0x34
 800a902:	460c      	mov	r4, r1
 800a904:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a908:	4616      	mov	r6, r2
 800a90a:	461f      	mov	r7, r3
 800a90c:	4605      	mov	r5, r0
 800a90e:	f000 ffa5 	bl	800b85c <_localeconv_r>
 800a912:	6803      	ldr	r3, [r0, #0]
 800a914:	9304      	str	r3, [sp, #16]
 800a916:	4618      	mov	r0, r3
 800a918:	f7f5 fcb2 	bl	8000280 <strlen>
 800a91c:	2300      	movs	r3, #0
 800a91e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a920:	f8d8 3000 	ldr.w	r3, [r8]
 800a924:	9005      	str	r0, [sp, #20]
 800a926:	3307      	adds	r3, #7
 800a928:	f023 0307 	bic.w	r3, r3, #7
 800a92c:	f103 0208 	add.w	r2, r3, #8
 800a930:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a934:	f8d4 b000 	ldr.w	fp, [r4]
 800a938:	f8c8 2000 	str.w	r2, [r8]
 800a93c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a940:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a944:	9307      	str	r3, [sp, #28]
 800a946:	f8cd 8018 	str.w	r8, [sp, #24]
 800a94a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a94e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a952:	4b9c      	ldr	r3, [pc, #624]	@ (800abc4 <_printf_float+0x2c8>)
 800a954:	f04f 32ff 	mov.w	r2, #4294967295
 800a958:	f7f6 f8f0 	bl	8000b3c <__aeabi_dcmpun>
 800a95c:	bb70      	cbnz	r0, 800a9bc <_printf_float+0xc0>
 800a95e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a962:	4b98      	ldr	r3, [pc, #608]	@ (800abc4 <_printf_float+0x2c8>)
 800a964:	f04f 32ff 	mov.w	r2, #4294967295
 800a968:	f7f6 f8ca 	bl	8000b00 <__aeabi_dcmple>
 800a96c:	bb30      	cbnz	r0, 800a9bc <_printf_float+0xc0>
 800a96e:	2200      	movs	r2, #0
 800a970:	2300      	movs	r3, #0
 800a972:	4640      	mov	r0, r8
 800a974:	4649      	mov	r1, r9
 800a976:	f7f6 f8b9 	bl	8000aec <__aeabi_dcmplt>
 800a97a:	b110      	cbz	r0, 800a982 <_printf_float+0x86>
 800a97c:	232d      	movs	r3, #45	@ 0x2d
 800a97e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a982:	4a91      	ldr	r2, [pc, #580]	@ (800abc8 <_printf_float+0x2cc>)
 800a984:	4b91      	ldr	r3, [pc, #580]	@ (800abcc <_printf_float+0x2d0>)
 800a986:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a98a:	bf94      	ite	ls
 800a98c:	4690      	movls	r8, r2
 800a98e:	4698      	movhi	r8, r3
 800a990:	2303      	movs	r3, #3
 800a992:	6123      	str	r3, [r4, #16]
 800a994:	f02b 0304 	bic.w	r3, fp, #4
 800a998:	6023      	str	r3, [r4, #0]
 800a99a:	f04f 0900 	mov.w	r9, #0
 800a99e:	9700      	str	r7, [sp, #0]
 800a9a0:	4633      	mov	r3, r6
 800a9a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a9a4:	4621      	mov	r1, r4
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	f000 f9d2 	bl	800ad50 <_printf_common>
 800a9ac:	3001      	adds	r0, #1
 800a9ae:	f040 808d 	bne.w	800aacc <_printf_float+0x1d0>
 800a9b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b6:	b00d      	add	sp, #52	@ 0x34
 800a9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9bc:	4642      	mov	r2, r8
 800a9be:	464b      	mov	r3, r9
 800a9c0:	4640      	mov	r0, r8
 800a9c2:	4649      	mov	r1, r9
 800a9c4:	f7f6 f8ba 	bl	8000b3c <__aeabi_dcmpun>
 800a9c8:	b140      	cbz	r0, 800a9dc <_printf_float+0xe0>
 800a9ca:	464b      	mov	r3, r9
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	bfbc      	itt	lt
 800a9d0:	232d      	movlt	r3, #45	@ 0x2d
 800a9d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a9d6:	4a7e      	ldr	r2, [pc, #504]	@ (800abd0 <_printf_float+0x2d4>)
 800a9d8:	4b7e      	ldr	r3, [pc, #504]	@ (800abd4 <_printf_float+0x2d8>)
 800a9da:	e7d4      	b.n	800a986 <_printf_float+0x8a>
 800a9dc:	6863      	ldr	r3, [r4, #4]
 800a9de:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a9e2:	9206      	str	r2, [sp, #24]
 800a9e4:	1c5a      	adds	r2, r3, #1
 800a9e6:	d13b      	bne.n	800aa60 <_printf_float+0x164>
 800a9e8:	2306      	movs	r3, #6
 800a9ea:	6063      	str	r3, [r4, #4]
 800a9ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	6022      	str	r2, [r4, #0]
 800a9f4:	9303      	str	r3, [sp, #12]
 800a9f6:	ab0a      	add	r3, sp, #40	@ 0x28
 800a9f8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a9fc:	ab09      	add	r3, sp, #36	@ 0x24
 800a9fe:	9300      	str	r3, [sp, #0]
 800aa00:	6861      	ldr	r1, [r4, #4]
 800aa02:	ec49 8b10 	vmov	d0, r8, r9
 800aa06:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	f7ff fed6 	bl	800a7bc <__cvt>
 800aa10:	9b06      	ldr	r3, [sp, #24]
 800aa12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aa14:	2b47      	cmp	r3, #71	@ 0x47
 800aa16:	4680      	mov	r8, r0
 800aa18:	d129      	bne.n	800aa6e <_printf_float+0x172>
 800aa1a:	1cc8      	adds	r0, r1, #3
 800aa1c:	db02      	blt.n	800aa24 <_printf_float+0x128>
 800aa1e:	6863      	ldr	r3, [r4, #4]
 800aa20:	4299      	cmp	r1, r3
 800aa22:	dd41      	ble.n	800aaa8 <_printf_float+0x1ac>
 800aa24:	f1aa 0a02 	sub.w	sl, sl, #2
 800aa28:	fa5f fa8a 	uxtb.w	sl, sl
 800aa2c:	3901      	subs	r1, #1
 800aa2e:	4652      	mov	r2, sl
 800aa30:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800aa34:	9109      	str	r1, [sp, #36]	@ 0x24
 800aa36:	f7ff ff26 	bl	800a886 <__exponent>
 800aa3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa3c:	1813      	adds	r3, r2, r0
 800aa3e:	2a01      	cmp	r2, #1
 800aa40:	4681      	mov	r9, r0
 800aa42:	6123      	str	r3, [r4, #16]
 800aa44:	dc02      	bgt.n	800aa4c <_printf_float+0x150>
 800aa46:	6822      	ldr	r2, [r4, #0]
 800aa48:	07d2      	lsls	r2, r2, #31
 800aa4a:	d501      	bpl.n	800aa50 <_printf_float+0x154>
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	6123      	str	r3, [r4, #16]
 800aa50:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d0a2      	beq.n	800a99e <_printf_float+0xa2>
 800aa58:	232d      	movs	r3, #45	@ 0x2d
 800aa5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa5e:	e79e      	b.n	800a99e <_printf_float+0xa2>
 800aa60:	9a06      	ldr	r2, [sp, #24]
 800aa62:	2a47      	cmp	r2, #71	@ 0x47
 800aa64:	d1c2      	bne.n	800a9ec <_printf_float+0xf0>
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d1c0      	bne.n	800a9ec <_printf_float+0xf0>
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	e7bd      	b.n	800a9ea <_printf_float+0xee>
 800aa6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aa72:	d9db      	bls.n	800aa2c <_printf_float+0x130>
 800aa74:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800aa78:	d118      	bne.n	800aaac <_printf_float+0x1b0>
 800aa7a:	2900      	cmp	r1, #0
 800aa7c:	6863      	ldr	r3, [r4, #4]
 800aa7e:	dd0b      	ble.n	800aa98 <_printf_float+0x19c>
 800aa80:	6121      	str	r1, [r4, #16]
 800aa82:	b913      	cbnz	r3, 800aa8a <_printf_float+0x18e>
 800aa84:	6822      	ldr	r2, [r4, #0]
 800aa86:	07d0      	lsls	r0, r2, #31
 800aa88:	d502      	bpl.n	800aa90 <_printf_float+0x194>
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	440b      	add	r3, r1
 800aa8e:	6123      	str	r3, [r4, #16]
 800aa90:	65a1      	str	r1, [r4, #88]	@ 0x58
 800aa92:	f04f 0900 	mov.w	r9, #0
 800aa96:	e7db      	b.n	800aa50 <_printf_float+0x154>
 800aa98:	b913      	cbnz	r3, 800aaa0 <_printf_float+0x1a4>
 800aa9a:	6822      	ldr	r2, [r4, #0]
 800aa9c:	07d2      	lsls	r2, r2, #31
 800aa9e:	d501      	bpl.n	800aaa4 <_printf_float+0x1a8>
 800aaa0:	3302      	adds	r3, #2
 800aaa2:	e7f4      	b.n	800aa8e <_printf_float+0x192>
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	e7f2      	b.n	800aa8e <_printf_float+0x192>
 800aaa8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800aaac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaae:	4299      	cmp	r1, r3
 800aab0:	db05      	blt.n	800aabe <_printf_float+0x1c2>
 800aab2:	6823      	ldr	r3, [r4, #0]
 800aab4:	6121      	str	r1, [r4, #16]
 800aab6:	07d8      	lsls	r0, r3, #31
 800aab8:	d5ea      	bpl.n	800aa90 <_printf_float+0x194>
 800aaba:	1c4b      	adds	r3, r1, #1
 800aabc:	e7e7      	b.n	800aa8e <_printf_float+0x192>
 800aabe:	2900      	cmp	r1, #0
 800aac0:	bfd4      	ite	le
 800aac2:	f1c1 0202 	rsble	r2, r1, #2
 800aac6:	2201      	movgt	r2, #1
 800aac8:	4413      	add	r3, r2
 800aaca:	e7e0      	b.n	800aa8e <_printf_float+0x192>
 800aacc:	6823      	ldr	r3, [r4, #0]
 800aace:	055a      	lsls	r2, r3, #21
 800aad0:	d407      	bmi.n	800aae2 <_printf_float+0x1e6>
 800aad2:	6923      	ldr	r3, [r4, #16]
 800aad4:	4642      	mov	r2, r8
 800aad6:	4631      	mov	r1, r6
 800aad8:	4628      	mov	r0, r5
 800aada:	47b8      	blx	r7
 800aadc:	3001      	adds	r0, #1
 800aade:	d12b      	bne.n	800ab38 <_printf_float+0x23c>
 800aae0:	e767      	b.n	800a9b2 <_printf_float+0xb6>
 800aae2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aae6:	f240 80dd 	bls.w	800aca4 <_printf_float+0x3a8>
 800aaea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aaee:	2200      	movs	r2, #0
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	f7f5 fff1 	bl	8000ad8 <__aeabi_dcmpeq>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	d033      	beq.n	800ab62 <_printf_float+0x266>
 800aafa:	4a37      	ldr	r2, [pc, #220]	@ (800abd8 <_printf_float+0x2dc>)
 800aafc:	2301      	movs	r3, #1
 800aafe:	4631      	mov	r1, r6
 800ab00:	4628      	mov	r0, r5
 800ab02:	47b8      	blx	r7
 800ab04:	3001      	adds	r0, #1
 800ab06:	f43f af54 	beq.w	800a9b2 <_printf_float+0xb6>
 800ab0a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ab0e:	4543      	cmp	r3, r8
 800ab10:	db02      	blt.n	800ab18 <_printf_float+0x21c>
 800ab12:	6823      	ldr	r3, [r4, #0]
 800ab14:	07d8      	lsls	r0, r3, #31
 800ab16:	d50f      	bpl.n	800ab38 <_printf_float+0x23c>
 800ab18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab1c:	4631      	mov	r1, r6
 800ab1e:	4628      	mov	r0, r5
 800ab20:	47b8      	blx	r7
 800ab22:	3001      	adds	r0, #1
 800ab24:	f43f af45 	beq.w	800a9b2 <_printf_float+0xb6>
 800ab28:	f04f 0900 	mov.w	r9, #0
 800ab2c:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab30:	f104 0a1a 	add.w	sl, r4, #26
 800ab34:	45c8      	cmp	r8, r9
 800ab36:	dc09      	bgt.n	800ab4c <_printf_float+0x250>
 800ab38:	6823      	ldr	r3, [r4, #0]
 800ab3a:	079b      	lsls	r3, r3, #30
 800ab3c:	f100 8103 	bmi.w	800ad46 <_printf_float+0x44a>
 800ab40:	68e0      	ldr	r0, [r4, #12]
 800ab42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab44:	4298      	cmp	r0, r3
 800ab46:	bfb8      	it	lt
 800ab48:	4618      	movlt	r0, r3
 800ab4a:	e734      	b.n	800a9b6 <_printf_float+0xba>
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	4652      	mov	r2, sl
 800ab50:	4631      	mov	r1, r6
 800ab52:	4628      	mov	r0, r5
 800ab54:	47b8      	blx	r7
 800ab56:	3001      	adds	r0, #1
 800ab58:	f43f af2b 	beq.w	800a9b2 <_printf_float+0xb6>
 800ab5c:	f109 0901 	add.w	r9, r9, #1
 800ab60:	e7e8      	b.n	800ab34 <_printf_float+0x238>
 800ab62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	dc39      	bgt.n	800abdc <_printf_float+0x2e0>
 800ab68:	4a1b      	ldr	r2, [pc, #108]	@ (800abd8 <_printf_float+0x2dc>)
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	4631      	mov	r1, r6
 800ab6e:	4628      	mov	r0, r5
 800ab70:	47b8      	blx	r7
 800ab72:	3001      	adds	r0, #1
 800ab74:	f43f af1d 	beq.w	800a9b2 <_printf_float+0xb6>
 800ab78:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ab7c:	ea59 0303 	orrs.w	r3, r9, r3
 800ab80:	d102      	bne.n	800ab88 <_printf_float+0x28c>
 800ab82:	6823      	ldr	r3, [r4, #0]
 800ab84:	07d9      	lsls	r1, r3, #31
 800ab86:	d5d7      	bpl.n	800ab38 <_printf_float+0x23c>
 800ab88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab8c:	4631      	mov	r1, r6
 800ab8e:	4628      	mov	r0, r5
 800ab90:	47b8      	blx	r7
 800ab92:	3001      	adds	r0, #1
 800ab94:	f43f af0d 	beq.w	800a9b2 <_printf_float+0xb6>
 800ab98:	f04f 0a00 	mov.w	sl, #0
 800ab9c:	f104 0b1a 	add.w	fp, r4, #26
 800aba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aba2:	425b      	negs	r3, r3
 800aba4:	4553      	cmp	r3, sl
 800aba6:	dc01      	bgt.n	800abac <_printf_float+0x2b0>
 800aba8:	464b      	mov	r3, r9
 800abaa:	e793      	b.n	800aad4 <_printf_float+0x1d8>
 800abac:	2301      	movs	r3, #1
 800abae:	465a      	mov	r2, fp
 800abb0:	4631      	mov	r1, r6
 800abb2:	4628      	mov	r0, r5
 800abb4:	47b8      	blx	r7
 800abb6:	3001      	adds	r0, #1
 800abb8:	f43f aefb 	beq.w	800a9b2 <_printf_float+0xb6>
 800abbc:	f10a 0a01 	add.w	sl, sl, #1
 800abc0:	e7ee      	b.n	800aba0 <_printf_float+0x2a4>
 800abc2:	bf00      	nop
 800abc4:	7fefffff 	.word	0x7fefffff
 800abc8:	0800e6ee 	.word	0x0800e6ee
 800abcc:	0800e6f2 	.word	0x0800e6f2
 800abd0:	0800e6f6 	.word	0x0800e6f6
 800abd4:	0800e6fa 	.word	0x0800e6fa
 800abd8:	0800e6fe 	.word	0x0800e6fe
 800abdc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800abde:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800abe2:	4553      	cmp	r3, sl
 800abe4:	bfa8      	it	ge
 800abe6:	4653      	movge	r3, sl
 800abe8:	2b00      	cmp	r3, #0
 800abea:	4699      	mov	r9, r3
 800abec:	dc36      	bgt.n	800ac5c <_printf_float+0x360>
 800abee:	f04f 0b00 	mov.w	fp, #0
 800abf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800abf6:	f104 021a 	add.w	r2, r4, #26
 800abfa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800abfc:	9306      	str	r3, [sp, #24]
 800abfe:	eba3 0309 	sub.w	r3, r3, r9
 800ac02:	455b      	cmp	r3, fp
 800ac04:	dc31      	bgt.n	800ac6a <_printf_float+0x36e>
 800ac06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac08:	459a      	cmp	sl, r3
 800ac0a:	dc3a      	bgt.n	800ac82 <_printf_float+0x386>
 800ac0c:	6823      	ldr	r3, [r4, #0]
 800ac0e:	07da      	lsls	r2, r3, #31
 800ac10:	d437      	bmi.n	800ac82 <_printf_float+0x386>
 800ac12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac14:	ebaa 0903 	sub.w	r9, sl, r3
 800ac18:	9b06      	ldr	r3, [sp, #24]
 800ac1a:	ebaa 0303 	sub.w	r3, sl, r3
 800ac1e:	4599      	cmp	r9, r3
 800ac20:	bfa8      	it	ge
 800ac22:	4699      	movge	r9, r3
 800ac24:	f1b9 0f00 	cmp.w	r9, #0
 800ac28:	dc33      	bgt.n	800ac92 <_printf_float+0x396>
 800ac2a:	f04f 0800 	mov.w	r8, #0
 800ac2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac32:	f104 0b1a 	add.w	fp, r4, #26
 800ac36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac38:	ebaa 0303 	sub.w	r3, sl, r3
 800ac3c:	eba3 0309 	sub.w	r3, r3, r9
 800ac40:	4543      	cmp	r3, r8
 800ac42:	f77f af79 	ble.w	800ab38 <_printf_float+0x23c>
 800ac46:	2301      	movs	r3, #1
 800ac48:	465a      	mov	r2, fp
 800ac4a:	4631      	mov	r1, r6
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	47b8      	blx	r7
 800ac50:	3001      	adds	r0, #1
 800ac52:	f43f aeae 	beq.w	800a9b2 <_printf_float+0xb6>
 800ac56:	f108 0801 	add.w	r8, r8, #1
 800ac5a:	e7ec      	b.n	800ac36 <_printf_float+0x33a>
 800ac5c:	4642      	mov	r2, r8
 800ac5e:	4631      	mov	r1, r6
 800ac60:	4628      	mov	r0, r5
 800ac62:	47b8      	blx	r7
 800ac64:	3001      	adds	r0, #1
 800ac66:	d1c2      	bne.n	800abee <_printf_float+0x2f2>
 800ac68:	e6a3      	b.n	800a9b2 <_printf_float+0xb6>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	4631      	mov	r1, r6
 800ac6e:	4628      	mov	r0, r5
 800ac70:	9206      	str	r2, [sp, #24]
 800ac72:	47b8      	blx	r7
 800ac74:	3001      	adds	r0, #1
 800ac76:	f43f ae9c 	beq.w	800a9b2 <_printf_float+0xb6>
 800ac7a:	9a06      	ldr	r2, [sp, #24]
 800ac7c:	f10b 0b01 	add.w	fp, fp, #1
 800ac80:	e7bb      	b.n	800abfa <_printf_float+0x2fe>
 800ac82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac86:	4631      	mov	r1, r6
 800ac88:	4628      	mov	r0, r5
 800ac8a:	47b8      	blx	r7
 800ac8c:	3001      	adds	r0, #1
 800ac8e:	d1c0      	bne.n	800ac12 <_printf_float+0x316>
 800ac90:	e68f      	b.n	800a9b2 <_printf_float+0xb6>
 800ac92:	9a06      	ldr	r2, [sp, #24]
 800ac94:	464b      	mov	r3, r9
 800ac96:	4442      	add	r2, r8
 800ac98:	4631      	mov	r1, r6
 800ac9a:	4628      	mov	r0, r5
 800ac9c:	47b8      	blx	r7
 800ac9e:	3001      	adds	r0, #1
 800aca0:	d1c3      	bne.n	800ac2a <_printf_float+0x32e>
 800aca2:	e686      	b.n	800a9b2 <_printf_float+0xb6>
 800aca4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aca8:	f1ba 0f01 	cmp.w	sl, #1
 800acac:	dc01      	bgt.n	800acb2 <_printf_float+0x3b6>
 800acae:	07db      	lsls	r3, r3, #31
 800acb0:	d536      	bpl.n	800ad20 <_printf_float+0x424>
 800acb2:	2301      	movs	r3, #1
 800acb4:	4642      	mov	r2, r8
 800acb6:	4631      	mov	r1, r6
 800acb8:	4628      	mov	r0, r5
 800acba:	47b8      	blx	r7
 800acbc:	3001      	adds	r0, #1
 800acbe:	f43f ae78 	beq.w	800a9b2 <_printf_float+0xb6>
 800acc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acc6:	4631      	mov	r1, r6
 800acc8:	4628      	mov	r0, r5
 800acca:	47b8      	blx	r7
 800accc:	3001      	adds	r0, #1
 800acce:	f43f ae70 	beq.w	800a9b2 <_printf_float+0xb6>
 800acd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800acd6:	2200      	movs	r2, #0
 800acd8:	2300      	movs	r3, #0
 800acda:	f10a 3aff 	add.w	sl, sl, #4294967295
 800acde:	f7f5 fefb 	bl	8000ad8 <__aeabi_dcmpeq>
 800ace2:	b9c0      	cbnz	r0, 800ad16 <_printf_float+0x41a>
 800ace4:	4653      	mov	r3, sl
 800ace6:	f108 0201 	add.w	r2, r8, #1
 800acea:	4631      	mov	r1, r6
 800acec:	4628      	mov	r0, r5
 800acee:	47b8      	blx	r7
 800acf0:	3001      	adds	r0, #1
 800acf2:	d10c      	bne.n	800ad0e <_printf_float+0x412>
 800acf4:	e65d      	b.n	800a9b2 <_printf_float+0xb6>
 800acf6:	2301      	movs	r3, #1
 800acf8:	465a      	mov	r2, fp
 800acfa:	4631      	mov	r1, r6
 800acfc:	4628      	mov	r0, r5
 800acfe:	47b8      	blx	r7
 800ad00:	3001      	adds	r0, #1
 800ad02:	f43f ae56 	beq.w	800a9b2 <_printf_float+0xb6>
 800ad06:	f108 0801 	add.w	r8, r8, #1
 800ad0a:	45d0      	cmp	r8, sl
 800ad0c:	dbf3      	blt.n	800acf6 <_printf_float+0x3fa>
 800ad0e:	464b      	mov	r3, r9
 800ad10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ad14:	e6df      	b.n	800aad6 <_printf_float+0x1da>
 800ad16:	f04f 0800 	mov.w	r8, #0
 800ad1a:	f104 0b1a 	add.w	fp, r4, #26
 800ad1e:	e7f4      	b.n	800ad0a <_printf_float+0x40e>
 800ad20:	2301      	movs	r3, #1
 800ad22:	4642      	mov	r2, r8
 800ad24:	e7e1      	b.n	800acea <_printf_float+0x3ee>
 800ad26:	2301      	movs	r3, #1
 800ad28:	464a      	mov	r2, r9
 800ad2a:	4631      	mov	r1, r6
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	47b8      	blx	r7
 800ad30:	3001      	adds	r0, #1
 800ad32:	f43f ae3e 	beq.w	800a9b2 <_printf_float+0xb6>
 800ad36:	f108 0801 	add.w	r8, r8, #1
 800ad3a:	68e3      	ldr	r3, [r4, #12]
 800ad3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad3e:	1a5b      	subs	r3, r3, r1
 800ad40:	4543      	cmp	r3, r8
 800ad42:	dcf0      	bgt.n	800ad26 <_printf_float+0x42a>
 800ad44:	e6fc      	b.n	800ab40 <_printf_float+0x244>
 800ad46:	f04f 0800 	mov.w	r8, #0
 800ad4a:	f104 0919 	add.w	r9, r4, #25
 800ad4e:	e7f4      	b.n	800ad3a <_printf_float+0x43e>

0800ad50 <_printf_common>:
 800ad50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad54:	4616      	mov	r6, r2
 800ad56:	4698      	mov	r8, r3
 800ad58:	688a      	ldr	r2, [r1, #8]
 800ad5a:	690b      	ldr	r3, [r1, #16]
 800ad5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad60:	4293      	cmp	r3, r2
 800ad62:	bfb8      	it	lt
 800ad64:	4613      	movlt	r3, r2
 800ad66:	6033      	str	r3, [r6, #0]
 800ad68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ad6c:	4607      	mov	r7, r0
 800ad6e:	460c      	mov	r4, r1
 800ad70:	b10a      	cbz	r2, 800ad76 <_printf_common+0x26>
 800ad72:	3301      	adds	r3, #1
 800ad74:	6033      	str	r3, [r6, #0]
 800ad76:	6823      	ldr	r3, [r4, #0]
 800ad78:	0699      	lsls	r1, r3, #26
 800ad7a:	bf42      	ittt	mi
 800ad7c:	6833      	ldrmi	r3, [r6, #0]
 800ad7e:	3302      	addmi	r3, #2
 800ad80:	6033      	strmi	r3, [r6, #0]
 800ad82:	6825      	ldr	r5, [r4, #0]
 800ad84:	f015 0506 	ands.w	r5, r5, #6
 800ad88:	d106      	bne.n	800ad98 <_printf_common+0x48>
 800ad8a:	f104 0a19 	add.w	sl, r4, #25
 800ad8e:	68e3      	ldr	r3, [r4, #12]
 800ad90:	6832      	ldr	r2, [r6, #0]
 800ad92:	1a9b      	subs	r3, r3, r2
 800ad94:	42ab      	cmp	r3, r5
 800ad96:	dc26      	bgt.n	800ade6 <_printf_common+0x96>
 800ad98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad9c:	6822      	ldr	r2, [r4, #0]
 800ad9e:	3b00      	subs	r3, #0
 800ada0:	bf18      	it	ne
 800ada2:	2301      	movne	r3, #1
 800ada4:	0692      	lsls	r2, r2, #26
 800ada6:	d42b      	bmi.n	800ae00 <_printf_common+0xb0>
 800ada8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800adac:	4641      	mov	r1, r8
 800adae:	4638      	mov	r0, r7
 800adb0:	47c8      	blx	r9
 800adb2:	3001      	adds	r0, #1
 800adb4:	d01e      	beq.n	800adf4 <_printf_common+0xa4>
 800adb6:	6823      	ldr	r3, [r4, #0]
 800adb8:	6922      	ldr	r2, [r4, #16]
 800adba:	f003 0306 	and.w	r3, r3, #6
 800adbe:	2b04      	cmp	r3, #4
 800adc0:	bf02      	ittt	eq
 800adc2:	68e5      	ldreq	r5, [r4, #12]
 800adc4:	6833      	ldreq	r3, [r6, #0]
 800adc6:	1aed      	subeq	r5, r5, r3
 800adc8:	68a3      	ldr	r3, [r4, #8]
 800adca:	bf0c      	ite	eq
 800adcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800add0:	2500      	movne	r5, #0
 800add2:	4293      	cmp	r3, r2
 800add4:	bfc4      	itt	gt
 800add6:	1a9b      	subgt	r3, r3, r2
 800add8:	18ed      	addgt	r5, r5, r3
 800adda:	2600      	movs	r6, #0
 800addc:	341a      	adds	r4, #26
 800adde:	42b5      	cmp	r5, r6
 800ade0:	d11a      	bne.n	800ae18 <_printf_common+0xc8>
 800ade2:	2000      	movs	r0, #0
 800ade4:	e008      	b.n	800adf8 <_printf_common+0xa8>
 800ade6:	2301      	movs	r3, #1
 800ade8:	4652      	mov	r2, sl
 800adea:	4641      	mov	r1, r8
 800adec:	4638      	mov	r0, r7
 800adee:	47c8      	blx	r9
 800adf0:	3001      	adds	r0, #1
 800adf2:	d103      	bne.n	800adfc <_printf_common+0xac>
 800adf4:	f04f 30ff 	mov.w	r0, #4294967295
 800adf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adfc:	3501      	adds	r5, #1
 800adfe:	e7c6      	b.n	800ad8e <_printf_common+0x3e>
 800ae00:	18e1      	adds	r1, r4, r3
 800ae02:	1c5a      	adds	r2, r3, #1
 800ae04:	2030      	movs	r0, #48	@ 0x30
 800ae06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ae0a:	4422      	add	r2, r4
 800ae0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ae10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ae14:	3302      	adds	r3, #2
 800ae16:	e7c7      	b.n	800ada8 <_printf_common+0x58>
 800ae18:	2301      	movs	r3, #1
 800ae1a:	4622      	mov	r2, r4
 800ae1c:	4641      	mov	r1, r8
 800ae1e:	4638      	mov	r0, r7
 800ae20:	47c8      	blx	r9
 800ae22:	3001      	adds	r0, #1
 800ae24:	d0e6      	beq.n	800adf4 <_printf_common+0xa4>
 800ae26:	3601      	adds	r6, #1
 800ae28:	e7d9      	b.n	800adde <_printf_common+0x8e>
	...

0800ae2c <_printf_i>:
 800ae2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae30:	7e0f      	ldrb	r7, [r1, #24]
 800ae32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae34:	2f78      	cmp	r7, #120	@ 0x78
 800ae36:	4691      	mov	r9, r2
 800ae38:	4680      	mov	r8, r0
 800ae3a:	460c      	mov	r4, r1
 800ae3c:	469a      	mov	sl, r3
 800ae3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae42:	d807      	bhi.n	800ae54 <_printf_i+0x28>
 800ae44:	2f62      	cmp	r7, #98	@ 0x62
 800ae46:	d80a      	bhi.n	800ae5e <_printf_i+0x32>
 800ae48:	2f00      	cmp	r7, #0
 800ae4a:	f000 80d2 	beq.w	800aff2 <_printf_i+0x1c6>
 800ae4e:	2f58      	cmp	r7, #88	@ 0x58
 800ae50:	f000 80b9 	beq.w	800afc6 <_printf_i+0x19a>
 800ae54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ae5c:	e03a      	b.n	800aed4 <_printf_i+0xa8>
 800ae5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ae62:	2b15      	cmp	r3, #21
 800ae64:	d8f6      	bhi.n	800ae54 <_printf_i+0x28>
 800ae66:	a101      	add	r1, pc, #4	@ (adr r1, 800ae6c <_printf_i+0x40>)
 800ae68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae6c:	0800aec5 	.word	0x0800aec5
 800ae70:	0800aed9 	.word	0x0800aed9
 800ae74:	0800ae55 	.word	0x0800ae55
 800ae78:	0800ae55 	.word	0x0800ae55
 800ae7c:	0800ae55 	.word	0x0800ae55
 800ae80:	0800ae55 	.word	0x0800ae55
 800ae84:	0800aed9 	.word	0x0800aed9
 800ae88:	0800ae55 	.word	0x0800ae55
 800ae8c:	0800ae55 	.word	0x0800ae55
 800ae90:	0800ae55 	.word	0x0800ae55
 800ae94:	0800ae55 	.word	0x0800ae55
 800ae98:	0800afd9 	.word	0x0800afd9
 800ae9c:	0800af03 	.word	0x0800af03
 800aea0:	0800af93 	.word	0x0800af93
 800aea4:	0800ae55 	.word	0x0800ae55
 800aea8:	0800ae55 	.word	0x0800ae55
 800aeac:	0800affb 	.word	0x0800affb
 800aeb0:	0800ae55 	.word	0x0800ae55
 800aeb4:	0800af03 	.word	0x0800af03
 800aeb8:	0800ae55 	.word	0x0800ae55
 800aebc:	0800ae55 	.word	0x0800ae55
 800aec0:	0800af9b 	.word	0x0800af9b
 800aec4:	6833      	ldr	r3, [r6, #0]
 800aec6:	1d1a      	adds	r2, r3, #4
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	6032      	str	r2, [r6, #0]
 800aecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aed0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aed4:	2301      	movs	r3, #1
 800aed6:	e09d      	b.n	800b014 <_printf_i+0x1e8>
 800aed8:	6833      	ldr	r3, [r6, #0]
 800aeda:	6820      	ldr	r0, [r4, #0]
 800aedc:	1d19      	adds	r1, r3, #4
 800aede:	6031      	str	r1, [r6, #0]
 800aee0:	0606      	lsls	r6, r0, #24
 800aee2:	d501      	bpl.n	800aee8 <_printf_i+0xbc>
 800aee4:	681d      	ldr	r5, [r3, #0]
 800aee6:	e003      	b.n	800aef0 <_printf_i+0xc4>
 800aee8:	0645      	lsls	r5, r0, #25
 800aeea:	d5fb      	bpl.n	800aee4 <_printf_i+0xb8>
 800aeec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aef0:	2d00      	cmp	r5, #0
 800aef2:	da03      	bge.n	800aefc <_printf_i+0xd0>
 800aef4:	232d      	movs	r3, #45	@ 0x2d
 800aef6:	426d      	negs	r5, r5
 800aef8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aefc:	4859      	ldr	r0, [pc, #356]	@ (800b064 <_printf_i+0x238>)
 800aefe:	230a      	movs	r3, #10
 800af00:	e011      	b.n	800af26 <_printf_i+0xfa>
 800af02:	6821      	ldr	r1, [r4, #0]
 800af04:	6833      	ldr	r3, [r6, #0]
 800af06:	0608      	lsls	r0, r1, #24
 800af08:	f853 5b04 	ldr.w	r5, [r3], #4
 800af0c:	d402      	bmi.n	800af14 <_printf_i+0xe8>
 800af0e:	0649      	lsls	r1, r1, #25
 800af10:	bf48      	it	mi
 800af12:	b2ad      	uxthmi	r5, r5
 800af14:	2f6f      	cmp	r7, #111	@ 0x6f
 800af16:	4853      	ldr	r0, [pc, #332]	@ (800b064 <_printf_i+0x238>)
 800af18:	6033      	str	r3, [r6, #0]
 800af1a:	bf14      	ite	ne
 800af1c:	230a      	movne	r3, #10
 800af1e:	2308      	moveq	r3, #8
 800af20:	2100      	movs	r1, #0
 800af22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800af26:	6866      	ldr	r6, [r4, #4]
 800af28:	60a6      	str	r6, [r4, #8]
 800af2a:	2e00      	cmp	r6, #0
 800af2c:	bfa2      	ittt	ge
 800af2e:	6821      	ldrge	r1, [r4, #0]
 800af30:	f021 0104 	bicge.w	r1, r1, #4
 800af34:	6021      	strge	r1, [r4, #0]
 800af36:	b90d      	cbnz	r5, 800af3c <_printf_i+0x110>
 800af38:	2e00      	cmp	r6, #0
 800af3a:	d04b      	beq.n	800afd4 <_printf_i+0x1a8>
 800af3c:	4616      	mov	r6, r2
 800af3e:	fbb5 f1f3 	udiv	r1, r5, r3
 800af42:	fb03 5711 	mls	r7, r3, r1, r5
 800af46:	5dc7      	ldrb	r7, [r0, r7]
 800af48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af4c:	462f      	mov	r7, r5
 800af4e:	42bb      	cmp	r3, r7
 800af50:	460d      	mov	r5, r1
 800af52:	d9f4      	bls.n	800af3e <_printf_i+0x112>
 800af54:	2b08      	cmp	r3, #8
 800af56:	d10b      	bne.n	800af70 <_printf_i+0x144>
 800af58:	6823      	ldr	r3, [r4, #0]
 800af5a:	07df      	lsls	r7, r3, #31
 800af5c:	d508      	bpl.n	800af70 <_printf_i+0x144>
 800af5e:	6923      	ldr	r3, [r4, #16]
 800af60:	6861      	ldr	r1, [r4, #4]
 800af62:	4299      	cmp	r1, r3
 800af64:	bfde      	ittt	le
 800af66:	2330      	movle	r3, #48	@ 0x30
 800af68:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af70:	1b92      	subs	r2, r2, r6
 800af72:	6122      	str	r2, [r4, #16]
 800af74:	f8cd a000 	str.w	sl, [sp]
 800af78:	464b      	mov	r3, r9
 800af7a:	aa03      	add	r2, sp, #12
 800af7c:	4621      	mov	r1, r4
 800af7e:	4640      	mov	r0, r8
 800af80:	f7ff fee6 	bl	800ad50 <_printf_common>
 800af84:	3001      	adds	r0, #1
 800af86:	d14a      	bne.n	800b01e <_printf_i+0x1f2>
 800af88:	f04f 30ff 	mov.w	r0, #4294967295
 800af8c:	b004      	add	sp, #16
 800af8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af92:	6823      	ldr	r3, [r4, #0]
 800af94:	f043 0320 	orr.w	r3, r3, #32
 800af98:	6023      	str	r3, [r4, #0]
 800af9a:	4833      	ldr	r0, [pc, #204]	@ (800b068 <_printf_i+0x23c>)
 800af9c:	2778      	movs	r7, #120	@ 0x78
 800af9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800afa2:	6823      	ldr	r3, [r4, #0]
 800afa4:	6831      	ldr	r1, [r6, #0]
 800afa6:	061f      	lsls	r7, r3, #24
 800afa8:	f851 5b04 	ldr.w	r5, [r1], #4
 800afac:	d402      	bmi.n	800afb4 <_printf_i+0x188>
 800afae:	065f      	lsls	r7, r3, #25
 800afb0:	bf48      	it	mi
 800afb2:	b2ad      	uxthmi	r5, r5
 800afb4:	6031      	str	r1, [r6, #0]
 800afb6:	07d9      	lsls	r1, r3, #31
 800afb8:	bf44      	itt	mi
 800afba:	f043 0320 	orrmi.w	r3, r3, #32
 800afbe:	6023      	strmi	r3, [r4, #0]
 800afc0:	b11d      	cbz	r5, 800afca <_printf_i+0x19e>
 800afc2:	2310      	movs	r3, #16
 800afc4:	e7ac      	b.n	800af20 <_printf_i+0xf4>
 800afc6:	4827      	ldr	r0, [pc, #156]	@ (800b064 <_printf_i+0x238>)
 800afc8:	e7e9      	b.n	800af9e <_printf_i+0x172>
 800afca:	6823      	ldr	r3, [r4, #0]
 800afcc:	f023 0320 	bic.w	r3, r3, #32
 800afd0:	6023      	str	r3, [r4, #0]
 800afd2:	e7f6      	b.n	800afc2 <_printf_i+0x196>
 800afd4:	4616      	mov	r6, r2
 800afd6:	e7bd      	b.n	800af54 <_printf_i+0x128>
 800afd8:	6833      	ldr	r3, [r6, #0]
 800afda:	6825      	ldr	r5, [r4, #0]
 800afdc:	6961      	ldr	r1, [r4, #20]
 800afde:	1d18      	adds	r0, r3, #4
 800afe0:	6030      	str	r0, [r6, #0]
 800afe2:	062e      	lsls	r6, r5, #24
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	d501      	bpl.n	800afec <_printf_i+0x1c0>
 800afe8:	6019      	str	r1, [r3, #0]
 800afea:	e002      	b.n	800aff2 <_printf_i+0x1c6>
 800afec:	0668      	lsls	r0, r5, #25
 800afee:	d5fb      	bpl.n	800afe8 <_printf_i+0x1bc>
 800aff0:	8019      	strh	r1, [r3, #0]
 800aff2:	2300      	movs	r3, #0
 800aff4:	6123      	str	r3, [r4, #16]
 800aff6:	4616      	mov	r6, r2
 800aff8:	e7bc      	b.n	800af74 <_printf_i+0x148>
 800affa:	6833      	ldr	r3, [r6, #0]
 800affc:	1d1a      	adds	r2, r3, #4
 800affe:	6032      	str	r2, [r6, #0]
 800b000:	681e      	ldr	r6, [r3, #0]
 800b002:	6862      	ldr	r2, [r4, #4]
 800b004:	2100      	movs	r1, #0
 800b006:	4630      	mov	r0, r6
 800b008:	f7f5 f8ea 	bl	80001e0 <memchr>
 800b00c:	b108      	cbz	r0, 800b012 <_printf_i+0x1e6>
 800b00e:	1b80      	subs	r0, r0, r6
 800b010:	6060      	str	r0, [r4, #4]
 800b012:	6863      	ldr	r3, [r4, #4]
 800b014:	6123      	str	r3, [r4, #16]
 800b016:	2300      	movs	r3, #0
 800b018:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b01c:	e7aa      	b.n	800af74 <_printf_i+0x148>
 800b01e:	6923      	ldr	r3, [r4, #16]
 800b020:	4632      	mov	r2, r6
 800b022:	4649      	mov	r1, r9
 800b024:	4640      	mov	r0, r8
 800b026:	47d0      	blx	sl
 800b028:	3001      	adds	r0, #1
 800b02a:	d0ad      	beq.n	800af88 <_printf_i+0x15c>
 800b02c:	6823      	ldr	r3, [r4, #0]
 800b02e:	079b      	lsls	r3, r3, #30
 800b030:	d413      	bmi.n	800b05a <_printf_i+0x22e>
 800b032:	68e0      	ldr	r0, [r4, #12]
 800b034:	9b03      	ldr	r3, [sp, #12]
 800b036:	4298      	cmp	r0, r3
 800b038:	bfb8      	it	lt
 800b03a:	4618      	movlt	r0, r3
 800b03c:	e7a6      	b.n	800af8c <_printf_i+0x160>
 800b03e:	2301      	movs	r3, #1
 800b040:	4632      	mov	r2, r6
 800b042:	4649      	mov	r1, r9
 800b044:	4640      	mov	r0, r8
 800b046:	47d0      	blx	sl
 800b048:	3001      	adds	r0, #1
 800b04a:	d09d      	beq.n	800af88 <_printf_i+0x15c>
 800b04c:	3501      	adds	r5, #1
 800b04e:	68e3      	ldr	r3, [r4, #12]
 800b050:	9903      	ldr	r1, [sp, #12]
 800b052:	1a5b      	subs	r3, r3, r1
 800b054:	42ab      	cmp	r3, r5
 800b056:	dcf2      	bgt.n	800b03e <_printf_i+0x212>
 800b058:	e7eb      	b.n	800b032 <_printf_i+0x206>
 800b05a:	2500      	movs	r5, #0
 800b05c:	f104 0619 	add.w	r6, r4, #25
 800b060:	e7f5      	b.n	800b04e <_printf_i+0x222>
 800b062:	bf00      	nop
 800b064:	0800e700 	.word	0x0800e700
 800b068:	0800e711 	.word	0x0800e711

0800b06c <_scanf_float>:
 800b06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b070:	b087      	sub	sp, #28
 800b072:	4617      	mov	r7, r2
 800b074:	9303      	str	r3, [sp, #12]
 800b076:	688b      	ldr	r3, [r1, #8]
 800b078:	1e5a      	subs	r2, r3, #1
 800b07a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b07e:	bf81      	itttt	hi
 800b080:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b084:	eb03 0b05 	addhi.w	fp, r3, r5
 800b088:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b08c:	608b      	strhi	r3, [r1, #8]
 800b08e:	680b      	ldr	r3, [r1, #0]
 800b090:	460a      	mov	r2, r1
 800b092:	f04f 0500 	mov.w	r5, #0
 800b096:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b09a:	f842 3b1c 	str.w	r3, [r2], #28
 800b09e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b0a2:	4680      	mov	r8, r0
 800b0a4:	460c      	mov	r4, r1
 800b0a6:	bf98      	it	ls
 800b0a8:	f04f 0b00 	movls.w	fp, #0
 800b0ac:	9201      	str	r2, [sp, #4]
 800b0ae:	4616      	mov	r6, r2
 800b0b0:	46aa      	mov	sl, r5
 800b0b2:	46a9      	mov	r9, r5
 800b0b4:	9502      	str	r5, [sp, #8]
 800b0b6:	68a2      	ldr	r2, [r4, #8]
 800b0b8:	b152      	cbz	r2, 800b0d0 <_scanf_float+0x64>
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	2b4e      	cmp	r3, #78	@ 0x4e
 800b0c0:	d864      	bhi.n	800b18c <_scanf_float+0x120>
 800b0c2:	2b40      	cmp	r3, #64	@ 0x40
 800b0c4:	d83c      	bhi.n	800b140 <_scanf_float+0xd4>
 800b0c6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b0ca:	b2c8      	uxtb	r0, r1
 800b0cc:	280e      	cmp	r0, #14
 800b0ce:	d93a      	bls.n	800b146 <_scanf_float+0xda>
 800b0d0:	f1b9 0f00 	cmp.w	r9, #0
 800b0d4:	d003      	beq.n	800b0de <_scanf_float+0x72>
 800b0d6:	6823      	ldr	r3, [r4, #0]
 800b0d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0dc:	6023      	str	r3, [r4, #0]
 800b0de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0e2:	f1ba 0f01 	cmp.w	sl, #1
 800b0e6:	f200 8117 	bhi.w	800b318 <_scanf_float+0x2ac>
 800b0ea:	9b01      	ldr	r3, [sp, #4]
 800b0ec:	429e      	cmp	r6, r3
 800b0ee:	f200 8108 	bhi.w	800b302 <_scanf_float+0x296>
 800b0f2:	2001      	movs	r0, #1
 800b0f4:	b007      	add	sp, #28
 800b0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0fa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b0fe:	2a0d      	cmp	r2, #13
 800b100:	d8e6      	bhi.n	800b0d0 <_scanf_float+0x64>
 800b102:	a101      	add	r1, pc, #4	@ (adr r1, 800b108 <_scanf_float+0x9c>)
 800b104:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b108:	0800b24f 	.word	0x0800b24f
 800b10c:	0800b0d1 	.word	0x0800b0d1
 800b110:	0800b0d1 	.word	0x0800b0d1
 800b114:	0800b0d1 	.word	0x0800b0d1
 800b118:	0800b2af 	.word	0x0800b2af
 800b11c:	0800b287 	.word	0x0800b287
 800b120:	0800b0d1 	.word	0x0800b0d1
 800b124:	0800b0d1 	.word	0x0800b0d1
 800b128:	0800b25d 	.word	0x0800b25d
 800b12c:	0800b0d1 	.word	0x0800b0d1
 800b130:	0800b0d1 	.word	0x0800b0d1
 800b134:	0800b0d1 	.word	0x0800b0d1
 800b138:	0800b0d1 	.word	0x0800b0d1
 800b13c:	0800b215 	.word	0x0800b215
 800b140:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b144:	e7db      	b.n	800b0fe <_scanf_float+0x92>
 800b146:	290e      	cmp	r1, #14
 800b148:	d8c2      	bhi.n	800b0d0 <_scanf_float+0x64>
 800b14a:	a001      	add	r0, pc, #4	@ (adr r0, 800b150 <_scanf_float+0xe4>)
 800b14c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b150:	0800b205 	.word	0x0800b205
 800b154:	0800b0d1 	.word	0x0800b0d1
 800b158:	0800b205 	.word	0x0800b205
 800b15c:	0800b29b 	.word	0x0800b29b
 800b160:	0800b0d1 	.word	0x0800b0d1
 800b164:	0800b1ad 	.word	0x0800b1ad
 800b168:	0800b1eb 	.word	0x0800b1eb
 800b16c:	0800b1eb 	.word	0x0800b1eb
 800b170:	0800b1eb 	.word	0x0800b1eb
 800b174:	0800b1eb 	.word	0x0800b1eb
 800b178:	0800b1eb 	.word	0x0800b1eb
 800b17c:	0800b1eb 	.word	0x0800b1eb
 800b180:	0800b1eb 	.word	0x0800b1eb
 800b184:	0800b1eb 	.word	0x0800b1eb
 800b188:	0800b1eb 	.word	0x0800b1eb
 800b18c:	2b6e      	cmp	r3, #110	@ 0x6e
 800b18e:	d809      	bhi.n	800b1a4 <_scanf_float+0x138>
 800b190:	2b60      	cmp	r3, #96	@ 0x60
 800b192:	d8b2      	bhi.n	800b0fa <_scanf_float+0x8e>
 800b194:	2b54      	cmp	r3, #84	@ 0x54
 800b196:	d07b      	beq.n	800b290 <_scanf_float+0x224>
 800b198:	2b59      	cmp	r3, #89	@ 0x59
 800b19a:	d199      	bne.n	800b0d0 <_scanf_float+0x64>
 800b19c:	2d07      	cmp	r5, #7
 800b19e:	d197      	bne.n	800b0d0 <_scanf_float+0x64>
 800b1a0:	2508      	movs	r5, #8
 800b1a2:	e02c      	b.n	800b1fe <_scanf_float+0x192>
 800b1a4:	2b74      	cmp	r3, #116	@ 0x74
 800b1a6:	d073      	beq.n	800b290 <_scanf_float+0x224>
 800b1a8:	2b79      	cmp	r3, #121	@ 0x79
 800b1aa:	e7f6      	b.n	800b19a <_scanf_float+0x12e>
 800b1ac:	6821      	ldr	r1, [r4, #0]
 800b1ae:	05c8      	lsls	r0, r1, #23
 800b1b0:	d51b      	bpl.n	800b1ea <_scanf_float+0x17e>
 800b1b2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b1b6:	6021      	str	r1, [r4, #0]
 800b1b8:	f109 0901 	add.w	r9, r9, #1
 800b1bc:	f1bb 0f00 	cmp.w	fp, #0
 800b1c0:	d003      	beq.n	800b1ca <_scanf_float+0x15e>
 800b1c2:	3201      	adds	r2, #1
 800b1c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b1c8:	60a2      	str	r2, [r4, #8]
 800b1ca:	68a3      	ldr	r3, [r4, #8]
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	60a3      	str	r3, [r4, #8]
 800b1d0:	6923      	ldr	r3, [r4, #16]
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	6123      	str	r3, [r4, #16]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	3b01      	subs	r3, #1
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	607b      	str	r3, [r7, #4]
 800b1de:	f340 8087 	ble.w	800b2f0 <_scanf_float+0x284>
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	603b      	str	r3, [r7, #0]
 800b1e8:	e765      	b.n	800b0b6 <_scanf_float+0x4a>
 800b1ea:	eb1a 0105 	adds.w	r1, sl, r5
 800b1ee:	f47f af6f 	bne.w	800b0d0 <_scanf_float+0x64>
 800b1f2:	6822      	ldr	r2, [r4, #0]
 800b1f4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b1f8:	6022      	str	r2, [r4, #0]
 800b1fa:	460d      	mov	r5, r1
 800b1fc:	468a      	mov	sl, r1
 800b1fe:	f806 3b01 	strb.w	r3, [r6], #1
 800b202:	e7e2      	b.n	800b1ca <_scanf_float+0x15e>
 800b204:	6822      	ldr	r2, [r4, #0]
 800b206:	0610      	lsls	r0, r2, #24
 800b208:	f57f af62 	bpl.w	800b0d0 <_scanf_float+0x64>
 800b20c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b210:	6022      	str	r2, [r4, #0]
 800b212:	e7f4      	b.n	800b1fe <_scanf_float+0x192>
 800b214:	f1ba 0f00 	cmp.w	sl, #0
 800b218:	d10e      	bne.n	800b238 <_scanf_float+0x1cc>
 800b21a:	f1b9 0f00 	cmp.w	r9, #0
 800b21e:	d10e      	bne.n	800b23e <_scanf_float+0x1d2>
 800b220:	6822      	ldr	r2, [r4, #0]
 800b222:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b226:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b22a:	d108      	bne.n	800b23e <_scanf_float+0x1d2>
 800b22c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b230:	6022      	str	r2, [r4, #0]
 800b232:	f04f 0a01 	mov.w	sl, #1
 800b236:	e7e2      	b.n	800b1fe <_scanf_float+0x192>
 800b238:	f1ba 0f02 	cmp.w	sl, #2
 800b23c:	d055      	beq.n	800b2ea <_scanf_float+0x27e>
 800b23e:	2d01      	cmp	r5, #1
 800b240:	d002      	beq.n	800b248 <_scanf_float+0x1dc>
 800b242:	2d04      	cmp	r5, #4
 800b244:	f47f af44 	bne.w	800b0d0 <_scanf_float+0x64>
 800b248:	3501      	adds	r5, #1
 800b24a:	b2ed      	uxtb	r5, r5
 800b24c:	e7d7      	b.n	800b1fe <_scanf_float+0x192>
 800b24e:	f1ba 0f01 	cmp.w	sl, #1
 800b252:	f47f af3d 	bne.w	800b0d0 <_scanf_float+0x64>
 800b256:	f04f 0a02 	mov.w	sl, #2
 800b25a:	e7d0      	b.n	800b1fe <_scanf_float+0x192>
 800b25c:	b97d      	cbnz	r5, 800b27e <_scanf_float+0x212>
 800b25e:	f1b9 0f00 	cmp.w	r9, #0
 800b262:	f47f af38 	bne.w	800b0d6 <_scanf_float+0x6a>
 800b266:	6822      	ldr	r2, [r4, #0]
 800b268:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b26c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b270:	f040 8108 	bne.w	800b484 <_scanf_float+0x418>
 800b274:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b278:	6022      	str	r2, [r4, #0]
 800b27a:	2501      	movs	r5, #1
 800b27c:	e7bf      	b.n	800b1fe <_scanf_float+0x192>
 800b27e:	2d03      	cmp	r5, #3
 800b280:	d0e2      	beq.n	800b248 <_scanf_float+0x1dc>
 800b282:	2d05      	cmp	r5, #5
 800b284:	e7de      	b.n	800b244 <_scanf_float+0x1d8>
 800b286:	2d02      	cmp	r5, #2
 800b288:	f47f af22 	bne.w	800b0d0 <_scanf_float+0x64>
 800b28c:	2503      	movs	r5, #3
 800b28e:	e7b6      	b.n	800b1fe <_scanf_float+0x192>
 800b290:	2d06      	cmp	r5, #6
 800b292:	f47f af1d 	bne.w	800b0d0 <_scanf_float+0x64>
 800b296:	2507      	movs	r5, #7
 800b298:	e7b1      	b.n	800b1fe <_scanf_float+0x192>
 800b29a:	6822      	ldr	r2, [r4, #0]
 800b29c:	0591      	lsls	r1, r2, #22
 800b29e:	f57f af17 	bpl.w	800b0d0 <_scanf_float+0x64>
 800b2a2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b2a6:	6022      	str	r2, [r4, #0]
 800b2a8:	f8cd 9008 	str.w	r9, [sp, #8]
 800b2ac:	e7a7      	b.n	800b1fe <_scanf_float+0x192>
 800b2ae:	6822      	ldr	r2, [r4, #0]
 800b2b0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b2b4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b2b8:	d006      	beq.n	800b2c8 <_scanf_float+0x25c>
 800b2ba:	0550      	lsls	r0, r2, #21
 800b2bc:	f57f af08 	bpl.w	800b0d0 <_scanf_float+0x64>
 800b2c0:	f1b9 0f00 	cmp.w	r9, #0
 800b2c4:	f000 80de 	beq.w	800b484 <_scanf_float+0x418>
 800b2c8:	0591      	lsls	r1, r2, #22
 800b2ca:	bf58      	it	pl
 800b2cc:	9902      	ldrpl	r1, [sp, #8]
 800b2ce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b2d2:	bf58      	it	pl
 800b2d4:	eba9 0101 	subpl.w	r1, r9, r1
 800b2d8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b2dc:	bf58      	it	pl
 800b2de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b2e2:	6022      	str	r2, [r4, #0]
 800b2e4:	f04f 0900 	mov.w	r9, #0
 800b2e8:	e789      	b.n	800b1fe <_scanf_float+0x192>
 800b2ea:	f04f 0a03 	mov.w	sl, #3
 800b2ee:	e786      	b.n	800b1fe <_scanf_float+0x192>
 800b2f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b2f4:	4639      	mov	r1, r7
 800b2f6:	4640      	mov	r0, r8
 800b2f8:	4798      	blx	r3
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	f43f aedb 	beq.w	800b0b6 <_scanf_float+0x4a>
 800b300:	e6e6      	b.n	800b0d0 <_scanf_float+0x64>
 800b302:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b306:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b30a:	463a      	mov	r2, r7
 800b30c:	4640      	mov	r0, r8
 800b30e:	4798      	blx	r3
 800b310:	6923      	ldr	r3, [r4, #16]
 800b312:	3b01      	subs	r3, #1
 800b314:	6123      	str	r3, [r4, #16]
 800b316:	e6e8      	b.n	800b0ea <_scanf_float+0x7e>
 800b318:	1e6b      	subs	r3, r5, #1
 800b31a:	2b06      	cmp	r3, #6
 800b31c:	d824      	bhi.n	800b368 <_scanf_float+0x2fc>
 800b31e:	2d02      	cmp	r5, #2
 800b320:	d836      	bhi.n	800b390 <_scanf_float+0x324>
 800b322:	9b01      	ldr	r3, [sp, #4]
 800b324:	429e      	cmp	r6, r3
 800b326:	f67f aee4 	bls.w	800b0f2 <_scanf_float+0x86>
 800b32a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b32e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b332:	463a      	mov	r2, r7
 800b334:	4640      	mov	r0, r8
 800b336:	4798      	blx	r3
 800b338:	6923      	ldr	r3, [r4, #16]
 800b33a:	3b01      	subs	r3, #1
 800b33c:	6123      	str	r3, [r4, #16]
 800b33e:	e7f0      	b.n	800b322 <_scanf_float+0x2b6>
 800b340:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b344:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b348:	463a      	mov	r2, r7
 800b34a:	4640      	mov	r0, r8
 800b34c:	4798      	blx	r3
 800b34e:	6923      	ldr	r3, [r4, #16]
 800b350:	3b01      	subs	r3, #1
 800b352:	6123      	str	r3, [r4, #16]
 800b354:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b358:	fa5f fa8a 	uxtb.w	sl, sl
 800b35c:	f1ba 0f02 	cmp.w	sl, #2
 800b360:	d1ee      	bne.n	800b340 <_scanf_float+0x2d4>
 800b362:	3d03      	subs	r5, #3
 800b364:	b2ed      	uxtb	r5, r5
 800b366:	1b76      	subs	r6, r6, r5
 800b368:	6823      	ldr	r3, [r4, #0]
 800b36a:	05da      	lsls	r2, r3, #23
 800b36c:	d530      	bpl.n	800b3d0 <_scanf_float+0x364>
 800b36e:	055b      	lsls	r3, r3, #21
 800b370:	d511      	bpl.n	800b396 <_scanf_float+0x32a>
 800b372:	9b01      	ldr	r3, [sp, #4]
 800b374:	429e      	cmp	r6, r3
 800b376:	f67f aebc 	bls.w	800b0f2 <_scanf_float+0x86>
 800b37a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b37e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b382:	463a      	mov	r2, r7
 800b384:	4640      	mov	r0, r8
 800b386:	4798      	blx	r3
 800b388:	6923      	ldr	r3, [r4, #16]
 800b38a:	3b01      	subs	r3, #1
 800b38c:	6123      	str	r3, [r4, #16]
 800b38e:	e7f0      	b.n	800b372 <_scanf_float+0x306>
 800b390:	46aa      	mov	sl, r5
 800b392:	46b3      	mov	fp, r6
 800b394:	e7de      	b.n	800b354 <_scanf_float+0x2e8>
 800b396:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b39a:	6923      	ldr	r3, [r4, #16]
 800b39c:	2965      	cmp	r1, #101	@ 0x65
 800b39e:	f103 33ff 	add.w	r3, r3, #4294967295
 800b3a2:	f106 35ff 	add.w	r5, r6, #4294967295
 800b3a6:	6123      	str	r3, [r4, #16]
 800b3a8:	d00c      	beq.n	800b3c4 <_scanf_float+0x358>
 800b3aa:	2945      	cmp	r1, #69	@ 0x45
 800b3ac:	d00a      	beq.n	800b3c4 <_scanf_float+0x358>
 800b3ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b3b2:	463a      	mov	r2, r7
 800b3b4:	4640      	mov	r0, r8
 800b3b6:	4798      	blx	r3
 800b3b8:	6923      	ldr	r3, [r4, #16]
 800b3ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b3be:	3b01      	subs	r3, #1
 800b3c0:	1eb5      	subs	r5, r6, #2
 800b3c2:	6123      	str	r3, [r4, #16]
 800b3c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b3c8:	463a      	mov	r2, r7
 800b3ca:	4640      	mov	r0, r8
 800b3cc:	4798      	blx	r3
 800b3ce:	462e      	mov	r6, r5
 800b3d0:	6822      	ldr	r2, [r4, #0]
 800b3d2:	f012 0210 	ands.w	r2, r2, #16
 800b3d6:	d001      	beq.n	800b3dc <_scanf_float+0x370>
 800b3d8:	2000      	movs	r0, #0
 800b3da:	e68b      	b.n	800b0f4 <_scanf_float+0x88>
 800b3dc:	7032      	strb	r2, [r6, #0]
 800b3de:	6823      	ldr	r3, [r4, #0]
 800b3e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b3e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3e8:	d11c      	bne.n	800b424 <_scanf_float+0x3b8>
 800b3ea:	9b02      	ldr	r3, [sp, #8]
 800b3ec:	454b      	cmp	r3, r9
 800b3ee:	eba3 0209 	sub.w	r2, r3, r9
 800b3f2:	d123      	bne.n	800b43c <_scanf_float+0x3d0>
 800b3f4:	9901      	ldr	r1, [sp, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	4640      	mov	r0, r8
 800b3fa:	f7ff f905 	bl	800a608 <_strtod_r>
 800b3fe:	9b03      	ldr	r3, [sp, #12]
 800b400:	6821      	ldr	r1, [r4, #0]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f011 0f02 	tst.w	r1, #2
 800b408:	ec57 6b10 	vmov	r6, r7, d0
 800b40c:	f103 0204 	add.w	r2, r3, #4
 800b410:	d01f      	beq.n	800b452 <_scanf_float+0x3e6>
 800b412:	9903      	ldr	r1, [sp, #12]
 800b414:	600a      	str	r2, [r1, #0]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	e9c3 6700 	strd	r6, r7, [r3]
 800b41c:	68e3      	ldr	r3, [r4, #12]
 800b41e:	3301      	adds	r3, #1
 800b420:	60e3      	str	r3, [r4, #12]
 800b422:	e7d9      	b.n	800b3d8 <_scanf_float+0x36c>
 800b424:	9b04      	ldr	r3, [sp, #16]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d0e4      	beq.n	800b3f4 <_scanf_float+0x388>
 800b42a:	9905      	ldr	r1, [sp, #20]
 800b42c:	230a      	movs	r3, #10
 800b42e:	3101      	adds	r1, #1
 800b430:	4640      	mov	r0, r8
 800b432:	f7ff f975 	bl	800a720 <_strtol_r>
 800b436:	9b04      	ldr	r3, [sp, #16]
 800b438:	9e05      	ldr	r6, [sp, #20]
 800b43a:	1ac2      	subs	r2, r0, r3
 800b43c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b440:	429e      	cmp	r6, r3
 800b442:	bf28      	it	cs
 800b444:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b448:	4910      	ldr	r1, [pc, #64]	@ (800b48c <_scanf_float+0x420>)
 800b44a:	4630      	mov	r0, r6
 800b44c:	f000 f8e4 	bl	800b618 <siprintf>
 800b450:	e7d0      	b.n	800b3f4 <_scanf_float+0x388>
 800b452:	f011 0f04 	tst.w	r1, #4
 800b456:	9903      	ldr	r1, [sp, #12]
 800b458:	600a      	str	r2, [r1, #0]
 800b45a:	d1dc      	bne.n	800b416 <_scanf_float+0x3aa>
 800b45c:	681d      	ldr	r5, [r3, #0]
 800b45e:	4632      	mov	r2, r6
 800b460:	463b      	mov	r3, r7
 800b462:	4630      	mov	r0, r6
 800b464:	4639      	mov	r1, r7
 800b466:	f7f5 fb69 	bl	8000b3c <__aeabi_dcmpun>
 800b46a:	b128      	cbz	r0, 800b478 <_scanf_float+0x40c>
 800b46c:	4808      	ldr	r0, [pc, #32]	@ (800b490 <_scanf_float+0x424>)
 800b46e:	f000 fa8b 	bl	800b988 <nanf>
 800b472:	ed85 0a00 	vstr	s0, [r5]
 800b476:	e7d1      	b.n	800b41c <_scanf_float+0x3b0>
 800b478:	4630      	mov	r0, r6
 800b47a:	4639      	mov	r1, r7
 800b47c:	f7f5 fbbc 	bl	8000bf8 <__aeabi_d2f>
 800b480:	6028      	str	r0, [r5, #0]
 800b482:	e7cb      	b.n	800b41c <_scanf_float+0x3b0>
 800b484:	f04f 0900 	mov.w	r9, #0
 800b488:	e629      	b.n	800b0de <_scanf_float+0x72>
 800b48a:	bf00      	nop
 800b48c:	0800e722 	.word	0x0800e722
 800b490:	0800e7db 	.word	0x0800e7db

0800b494 <std>:
 800b494:	2300      	movs	r3, #0
 800b496:	b510      	push	{r4, lr}
 800b498:	4604      	mov	r4, r0
 800b49a:	e9c0 3300 	strd	r3, r3, [r0]
 800b49e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4a2:	6083      	str	r3, [r0, #8]
 800b4a4:	8181      	strh	r1, [r0, #12]
 800b4a6:	6643      	str	r3, [r0, #100]	@ 0x64
 800b4a8:	81c2      	strh	r2, [r0, #14]
 800b4aa:	6183      	str	r3, [r0, #24]
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	2208      	movs	r2, #8
 800b4b0:	305c      	adds	r0, #92	@ 0x5c
 800b4b2:	f000 f914 	bl	800b6de <memset>
 800b4b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b4ec <std+0x58>)
 800b4b8:	6263      	str	r3, [r4, #36]	@ 0x24
 800b4ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b4f0 <std+0x5c>)
 800b4bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b4be:	4b0d      	ldr	r3, [pc, #52]	@ (800b4f4 <std+0x60>)
 800b4c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b4c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b4f8 <std+0x64>)
 800b4c4:	6323      	str	r3, [r4, #48]	@ 0x30
 800b4c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b4fc <std+0x68>)
 800b4c8:	6224      	str	r4, [r4, #32]
 800b4ca:	429c      	cmp	r4, r3
 800b4cc:	d006      	beq.n	800b4dc <std+0x48>
 800b4ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b4d2:	4294      	cmp	r4, r2
 800b4d4:	d002      	beq.n	800b4dc <std+0x48>
 800b4d6:	33d0      	adds	r3, #208	@ 0xd0
 800b4d8:	429c      	cmp	r4, r3
 800b4da:	d105      	bne.n	800b4e8 <std+0x54>
 800b4dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b4e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4e4:	f000 ba2e 	b.w	800b944 <__retarget_lock_init_recursive>
 800b4e8:	bd10      	pop	{r4, pc}
 800b4ea:	bf00      	nop
 800b4ec:	0800b659 	.word	0x0800b659
 800b4f0:	0800b67b 	.word	0x0800b67b
 800b4f4:	0800b6b3 	.word	0x0800b6b3
 800b4f8:	0800b6d7 	.word	0x0800b6d7
 800b4fc:	20004880 	.word	0x20004880

0800b500 <stdio_exit_handler>:
 800b500:	4a02      	ldr	r2, [pc, #8]	@ (800b50c <stdio_exit_handler+0xc>)
 800b502:	4903      	ldr	r1, [pc, #12]	@ (800b510 <stdio_exit_handler+0x10>)
 800b504:	4803      	ldr	r0, [pc, #12]	@ (800b514 <stdio_exit_handler+0x14>)
 800b506:	f000 b869 	b.w	800b5dc <_fwalk_sglue>
 800b50a:	bf00      	nop
 800b50c:	20000020 	.word	0x20000020
 800b510:	0800dc35 	.word	0x0800dc35
 800b514:	2000019c 	.word	0x2000019c

0800b518 <cleanup_stdio>:
 800b518:	6841      	ldr	r1, [r0, #4]
 800b51a:	4b0c      	ldr	r3, [pc, #48]	@ (800b54c <cleanup_stdio+0x34>)
 800b51c:	4299      	cmp	r1, r3
 800b51e:	b510      	push	{r4, lr}
 800b520:	4604      	mov	r4, r0
 800b522:	d001      	beq.n	800b528 <cleanup_stdio+0x10>
 800b524:	f002 fb86 	bl	800dc34 <_fflush_r>
 800b528:	68a1      	ldr	r1, [r4, #8]
 800b52a:	4b09      	ldr	r3, [pc, #36]	@ (800b550 <cleanup_stdio+0x38>)
 800b52c:	4299      	cmp	r1, r3
 800b52e:	d002      	beq.n	800b536 <cleanup_stdio+0x1e>
 800b530:	4620      	mov	r0, r4
 800b532:	f002 fb7f 	bl	800dc34 <_fflush_r>
 800b536:	68e1      	ldr	r1, [r4, #12]
 800b538:	4b06      	ldr	r3, [pc, #24]	@ (800b554 <cleanup_stdio+0x3c>)
 800b53a:	4299      	cmp	r1, r3
 800b53c:	d004      	beq.n	800b548 <cleanup_stdio+0x30>
 800b53e:	4620      	mov	r0, r4
 800b540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b544:	f002 bb76 	b.w	800dc34 <_fflush_r>
 800b548:	bd10      	pop	{r4, pc}
 800b54a:	bf00      	nop
 800b54c:	20004880 	.word	0x20004880
 800b550:	200048e8 	.word	0x200048e8
 800b554:	20004950 	.word	0x20004950

0800b558 <global_stdio_init.part.0>:
 800b558:	b510      	push	{r4, lr}
 800b55a:	4b0b      	ldr	r3, [pc, #44]	@ (800b588 <global_stdio_init.part.0+0x30>)
 800b55c:	4c0b      	ldr	r4, [pc, #44]	@ (800b58c <global_stdio_init.part.0+0x34>)
 800b55e:	4a0c      	ldr	r2, [pc, #48]	@ (800b590 <global_stdio_init.part.0+0x38>)
 800b560:	601a      	str	r2, [r3, #0]
 800b562:	4620      	mov	r0, r4
 800b564:	2200      	movs	r2, #0
 800b566:	2104      	movs	r1, #4
 800b568:	f7ff ff94 	bl	800b494 <std>
 800b56c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b570:	2201      	movs	r2, #1
 800b572:	2109      	movs	r1, #9
 800b574:	f7ff ff8e 	bl	800b494 <std>
 800b578:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b57c:	2202      	movs	r2, #2
 800b57e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b582:	2112      	movs	r1, #18
 800b584:	f7ff bf86 	b.w	800b494 <std>
 800b588:	200049b8 	.word	0x200049b8
 800b58c:	20004880 	.word	0x20004880
 800b590:	0800b501 	.word	0x0800b501

0800b594 <__sfp_lock_acquire>:
 800b594:	4801      	ldr	r0, [pc, #4]	@ (800b59c <__sfp_lock_acquire+0x8>)
 800b596:	f000 b9d6 	b.w	800b946 <__retarget_lock_acquire_recursive>
 800b59a:	bf00      	nop
 800b59c:	200049c1 	.word	0x200049c1

0800b5a0 <__sfp_lock_release>:
 800b5a0:	4801      	ldr	r0, [pc, #4]	@ (800b5a8 <__sfp_lock_release+0x8>)
 800b5a2:	f000 b9d1 	b.w	800b948 <__retarget_lock_release_recursive>
 800b5a6:	bf00      	nop
 800b5a8:	200049c1 	.word	0x200049c1

0800b5ac <__sinit>:
 800b5ac:	b510      	push	{r4, lr}
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	f7ff fff0 	bl	800b594 <__sfp_lock_acquire>
 800b5b4:	6a23      	ldr	r3, [r4, #32]
 800b5b6:	b11b      	cbz	r3, 800b5c0 <__sinit+0x14>
 800b5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5bc:	f7ff bff0 	b.w	800b5a0 <__sfp_lock_release>
 800b5c0:	4b04      	ldr	r3, [pc, #16]	@ (800b5d4 <__sinit+0x28>)
 800b5c2:	6223      	str	r3, [r4, #32]
 800b5c4:	4b04      	ldr	r3, [pc, #16]	@ (800b5d8 <__sinit+0x2c>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d1f5      	bne.n	800b5b8 <__sinit+0xc>
 800b5cc:	f7ff ffc4 	bl	800b558 <global_stdio_init.part.0>
 800b5d0:	e7f2      	b.n	800b5b8 <__sinit+0xc>
 800b5d2:	bf00      	nop
 800b5d4:	0800b519 	.word	0x0800b519
 800b5d8:	200049b8 	.word	0x200049b8

0800b5dc <_fwalk_sglue>:
 800b5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5e0:	4607      	mov	r7, r0
 800b5e2:	4688      	mov	r8, r1
 800b5e4:	4614      	mov	r4, r2
 800b5e6:	2600      	movs	r6, #0
 800b5e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5ec:	f1b9 0901 	subs.w	r9, r9, #1
 800b5f0:	d505      	bpl.n	800b5fe <_fwalk_sglue+0x22>
 800b5f2:	6824      	ldr	r4, [r4, #0]
 800b5f4:	2c00      	cmp	r4, #0
 800b5f6:	d1f7      	bne.n	800b5e8 <_fwalk_sglue+0xc>
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5fe:	89ab      	ldrh	r3, [r5, #12]
 800b600:	2b01      	cmp	r3, #1
 800b602:	d907      	bls.n	800b614 <_fwalk_sglue+0x38>
 800b604:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b608:	3301      	adds	r3, #1
 800b60a:	d003      	beq.n	800b614 <_fwalk_sglue+0x38>
 800b60c:	4629      	mov	r1, r5
 800b60e:	4638      	mov	r0, r7
 800b610:	47c0      	blx	r8
 800b612:	4306      	orrs	r6, r0
 800b614:	3568      	adds	r5, #104	@ 0x68
 800b616:	e7e9      	b.n	800b5ec <_fwalk_sglue+0x10>

0800b618 <siprintf>:
 800b618:	b40e      	push	{r1, r2, r3}
 800b61a:	b500      	push	{lr}
 800b61c:	b09c      	sub	sp, #112	@ 0x70
 800b61e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b620:	9002      	str	r0, [sp, #8]
 800b622:	9006      	str	r0, [sp, #24]
 800b624:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b628:	4809      	ldr	r0, [pc, #36]	@ (800b650 <siprintf+0x38>)
 800b62a:	9107      	str	r1, [sp, #28]
 800b62c:	9104      	str	r1, [sp, #16]
 800b62e:	4909      	ldr	r1, [pc, #36]	@ (800b654 <siprintf+0x3c>)
 800b630:	f853 2b04 	ldr.w	r2, [r3], #4
 800b634:	9105      	str	r1, [sp, #20]
 800b636:	6800      	ldr	r0, [r0, #0]
 800b638:	9301      	str	r3, [sp, #4]
 800b63a:	a902      	add	r1, sp, #8
 800b63c:	f002 f97a 	bl	800d934 <_svfiprintf_r>
 800b640:	9b02      	ldr	r3, [sp, #8]
 800b642:	2200      	movs	r2, #0
 800b644:	701a      	strb	r2, [r3, #0]
 800b646:	b01c      	add	sp, #112	@ 0x70
 800b648:	f85d eb04 	ldr.w	lr, [sp], #4
 800b64c:	b003      	add	sp, #12
 800b64e:	4770      	bx	lr
 800b650:	20000198 	.word	0x20000198
 800b654:	ffff0208 	.word	0xffff0208

0800b658 <__sread>:
 800b658:	b510      	push	{r4, lr}
 800b65a:	460c      	mov	r4, r1
 800b65c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b660:	f000 f922 	bl	800b8a8 <_read_r>
 800b664:	2800      	cmp	r0, #0
 800b666:	bfab      	itete	ge
 800b668:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b66a:	89a3      	ldrhlt	r3, [r4, #12]
 800b66c:	181b      	addge	r3, r3, r0
 800b66e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b672:	bfac      	ite	ge
 800b674:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b676:	81a3      	strhlt	r3, [r4, #12]
 800b678:	bd10      	pop	{r4, pc}

0800b67a <__swrite>:
 800b67a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b67e:	461f      	mov	r7, r3
 800b680:	898b      	ldrh	r3, [r1, #12]
 800b682:	05db      	lsls	r3, r3, #23
 800b684:	4605      	mov	r5, r0
 800b686:	460c      	mov	r4, r1
 800b688:	4616      	mov	r6, r2
 800b68a:	d505      	bpl.n	800b698 <__swrite+0x1e>
 800b68c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b690:	2302      	movs	r3, #2
 800b692:	2200      	movs	r2, #0
 800b694:	f000 f8f6 	bl	800b884 <_lseek_r>
 800b698:	89a3      	ldrh	r3, [r4, #12]
 800b69a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b69e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b6a2:	81a3      	strh	r3, [r4, #12]
 800b6a4:	4632      	mov	r2, r6
 800b6a6:	463b      	mov	r3, r7
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ae:	f000 b90d 	b.w	800b8cc <_write_r>

0800b6b2 <__sseek>:
 800b6b2:	b510      	push	{r4, lr}
 800b6b4:	460c      	mov	r4, r1
 800b6b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6ba:	f000 f8e3 	bl	800b884 <_lseek_r>
 800b6be:	1c43      	adds	r3, r0, #1
 800b6c0:	89a3      	ldrh	r3, [r4, #12]
 800b6c2:	bf15      	itete	ne
 800b6c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b6c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b6ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b6ce:	81a3      	strheq	r3, [r4, #12]
 800b6d0:	bf18      	it	ne
 800b6d2:	81a3      	strhne	r3, [r4, #12]
 800b6d4:	bd10      	pop	{r4, pc}

0800b6d6 <__sclose>:
 800b6d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6da:	f000 b8c3 	b.w	800b864 <_close_r>

0800b6de <memset>:
 800b6de:	4402      	add	r2, r0
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d100      	bne.n	800b6e8 <memset+0xa>
 800b6e6:	4770      	bx	lr
 800b6e8:	f803 1b01 	strb.w	r1, [r3], #1
 800b6ec:	e7f9      	b.n	800b6e2 <memset+0x4>

0800b6ee <strcat>:
 800b6ee:	b510      	push	{r4, lr}
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	7814      	ldrb	r4, [r2, #0]
 800b6f4:	4613      	mov	r3, r2
 800b6f6:	3201      	adds	r2, #1
 800b6f8:	2c00      	cmp	r4, #0
 800b6fa:	d1fa      	bne.n	800b6f2 <strcat+0x4>
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b702:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b706:	2a00      	cmp	r2, #0
 800b708:	d1f9      	bne.n	800b6fe <strcat+0x10>
 800b70a:	bd10      	pop	{r4, pc}

0800b70c <strchr>:
 800b70c:	b2c9      	uxtb	r1, r1
 800b70e:	4603      	mov	r3, r0
 800b710:	4618      	mov	r0, r3
 800b712:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b716:	b112      	cbz	r2, 800b71e <strchr+0x12>
 800b718:	428a      	cmp	r2, r1
 800b71a:	d1f9      	bne.n	800b710 <strchr+0x4>
 800b71c:	4770      	bx	lr
 800b71e:	2900      	cmp	r1, #0
 800b720:	bf18      	it	ne
 800b722:	2000      	movne	r0, #0
 800b724:	4770      	bx	lr

0800b726 <strncmp>:
 800b726:	b510      	push	{r4, lr}
 800b728:	b16a      	cbz	r2, 800b746 <strncmp+0x20>
 800b72a:	3901      	subs	r1, #1
 800b72c:	1884      	adds	r4, r0, r2
 800b72e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b732:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b736:	429a      	cmp	r2, r3
 800b738:	d103      	bne.n	800b742 <strncmp+0x1c>
 800b73a:	42a0      	cmp	r0, r4
 800b73c:	d001      	beq.n	800b742 <strncmp+0x1c>
 800b73e:	2a00      	cmp	r2, #0
 800b740:	d1f5      	bne.n	800b72e <strncmp+0x8>
 800b742:	1ad0      	subs	r0, r2, r3
 800b744:	bd10      	pop	{r4, pc}
 800b746:	4610      	mov	r0, r2
 800b748:	e7fc      	b.n	800b744 <strncmp+0x1e>

0800b74a <strncpy>:
 800b74a:	b510      	push	{r4, lr}
 800b74c:	3901      	subs	r1, #1
 800b74e:	4603      	mov	r3, r0
 800b750:	b132      	cbz	r2, 800b760 <strncpy+0x16>
 800b752:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b756:	f803 4b01 	strb.w	r4, [r3], #1
 800b75a:	3a01      	subs	r2, #1
 800b75c:	2c00      	cmp	r4, #0
 800b75e:	d1f7      	bne.n	800b750 <strncpy+0x6>
 800b760:	441a      	add	r2, r3
 800b762:	2100      	movs	r1, #0
 800b764:	4293      	cmp	r3, r2
 800b766:	d100      	bne.n	800b76a <strncpy+0x20>
 800b768:	bd10      	pop	{r4, pc}
 800b76a:	f803 1b01 	strb.w	r1, [r3], #1
 800b76e:	e7f9      	b.n	800b764 <strncpy+0x1a>

0800b770 <strtok>:
 800b770:	4b16      	ldr	r3, [pc, #88]	@ (800b7cc <strtok+0x5c>)
 800b772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b776:	681f      	ldr	r7, [r3, #0]
 800b778:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b77a:	4605      	mov	r5, r0
 800b77c:	460e      	mov	r6, r1
 800b77e:	b9ec      	cbnz	r4, 800b7bc <strtok+0x4c>
 800b780:	2050      	movs	r0, #80	@ 0x50
 800b782:	f001 faf5 	bl	800cd70 <malloc>
 800b786:	4602      	mov	r2, r0
 800b788:	6478      	str	r0, [r7, #68]	@ 0x44
 800b78a:	b920      	cbnz	r0, 800b796 <strtok+0x26>
 800b78c:	4b10      	ldr	r3, [pc, #64]	@ (800b7d0 <strtok+0x60>)
 800b78e:	4811      	ldr	r0, [pc, #68]	@ (800b7d4 <strtok+0x64>)
 800b790:	215b      	movs	r1, #91	@ 0x5b
 800b792:	f000 f8ff 	bl	800b994 <__assert_func>
 800b796:	e9c0 4400 	strd	r4, r4, [r0]
 800b79a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b79e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b7a2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b7a6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b7aa:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b7ae:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b7b2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b7b6:	6184      	str	r4, [r0, #24]
 800b7b8:	7704      	strb	r4, [r0, #28]
 800b7ba:	6244      	str	r4, [r0, #36]	@ 0x24
 800b7bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7be:	4631      	mov	r1, r6
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c8:	f000 b806 	b.w	800b7d8 <__strtok_r>
 800b7cc:	20000198 	.word	0x20000198
 800b7d0:	0800e727 	.word	0x0800e727
 800b7d4:	0800e73e 	.word	0x0800e73e

0800b7d8 <__strtok_r>:
 800b7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7da:	4604      	mov	r4, r0
 800b7dc:	b908      	cbnz	r0, 800b7e2 <__strtok_r+0xa>
 800b7de:	6814      	ldr	r4, [r2, #0]
 800b7e0:	b144      	cbz	r4, 800b7f4 <__strtok_r+0x1c>
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b7e8:	460f      	mov	r7, r1
 800b7ea:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b7ee:	b91e      	cbnz	r6, 800b7f8 <__strtok_r+0x20>
 800b7f0:	b965      	cbnz	r5, 800b80c <__strtok_r+0x34>
 800b7f2:	6015      	str	r5, [r2, #0]
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	e005      	b.n	800b804 <__strtok_r+0x2c>
 800b7f8:	42b5      	cmp	r5, r6
 800b7fa:	d1f6      	bne.n	800b7ea <__strtok_r+0x12>
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d1f0      	bne.n	800b7e2 <__strtok_r+0xa>
 800b800:	6014      	str	r4, [r2, #0]
 800b802:	7003      	strb	r3, [r0, #0]
 800b804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b806:	461c      	mov	r4, r3
 800b808:	e00c      	b.n	800b824 <__strtok_r+0x4c>
 800b80a:	b915      	cbnz	r5, 800b812 <__strtok_r+0x3a>
 800b80c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b810:	460e      	mov	r6, r1
 800b812:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b816:	42ab      	cmp	r3, r5
 800b818:	d1f7      	bne.n	800b80a <__strtok_r+0x32>
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d0f3      	beq.n	800b806 <__strtok_r+0x2e>
 800b81e:	2300      	movs	r3, #0
 800b820:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b824:	6014      	str	r4, [r2, #0]
 800b826:	e7ed      	b.n	800b804 <__strtok_r+0x2c>

0800b828 <strtok_r>:
 800b828:	2301      	movs	r3, #1
 800b82a:	f7ff bfd5 	b.w	800b7d8 <__strtok_r>

0800b82e <strstr>:
 800b82e:	780a      	ldrb	r2, [r1, #0]
 800b830:	b570      	push	{r4, r5, r6, lr}
 800b832:	b96a      	cbnz	r2, 800b850 <strstr+0x22>
 800b834:	bd70      	pop	{r4, r5, r6, pc}
 800b836:	429a      	cmp	r2, r3
 800b838:	d109      	bne.n	800b84e <strstr+0x20>
 800b83a:	460c      	mov	r4, r1
 800b83c:	4605      	mov	r5, r0
 800b83e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b842:	2b00      	cmp	r3, #0
 800b844:	d0f6      	beq.n	800b834 <strstr+0x6>
 800b846:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b84a:	429e      	cmp	r6, r3
 800b84c:	d0f7      	beq.n	800b83e <strstr+0x10>
 800b84e:	3001      	adds	r0, #1
 800b850:	7803      	ldrb	r3, [r0, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d1ef      	bne.n	800b836 <strstr+0x8>
 800b856:	4618      	mov	r0, r3
 800b858:	e7ec      	b.n	800b834 <strstr+0x6>
	...

0800b85c <_localeconv_r>:
 800b85c:	4800      	ldr	r0, [pc, #0]	@ (800b860 <_localeconv_r+0x4>)
 800b85e:	4770      	bx	lr
 800b860:	2000011c 	.word	0x2000011c

0800b864 <_close_r>:
 800b864:	b538      	push	{r3, r4, r5, lr}
 800b866:	4d06      	ldr	r5, [pc, #24]	@ (800b880 <_close_r+0x1c>)
 800b868:	2300      	movs	r3, #0
 800b86a:	4604      	mov	r4, r0
 800b86c:	4608      	mov	r0, r1
 800b86e:	602b      	str	r3, [r5, #0]
 800b870:	f7f8 f8ea 	bl	8003a48 <_close>
 800b874:	1c43      	adds	r3, r0, #1
 800b876:	d102      	bne.n	800b87e <_close_r+0x1a>
 800b878:	682b      	ldr	r3, [r5, #0]
 800b87a:	b103      	cbz	r3, 800b87e <_close_r+0x1a>
 800b87c:	6023      	str	r3, [r4, #0]
 800b87e:	bd38      	pop	{r3, r4, r5, pc}
 800b880:	200049bc 	.word	0x200049bc

0800b884 <_lseek_r>:
 800b884:	b538      	push	{r3, r4, r5, lr}
 800b886:	4d07      	ldr	r5, [pc, #28]	@ (800b8a4 <_lseek_r+0x20>)
 800b888:	4604      	mov	r4, r0
 800b88a:	4608      	mov	r0, r1
 800b88c:	4611      	mov	r1, r2
 800b88e:	2200      	movs	r2, #0
 800b890:	602a      	str	r2, [r5, #0]
 800b892:	461a      	mov	r2, r3
 800b894:	f7f8 f8ff 	bl	8003a96 <_lseek>
 800b898:	1c43      	adds	r3, r0, #1
 800b89a:	d102      	bne.n	800b8a2 <_lseek_r+0x1e>
 800b89c:	682b      	ldr	r3, [r5, #0]
 800b89e:	b103      	cbz	r3, 800b8a2 <_lseek_r+0x1e>
 800b8a0:	6023      	str	r3, [r4, #0]
 800b8a2:	bd38      	pop	{r3, r4, r5, pc}
 800b8a4:	200049bc 	.word	0x200049bc

0800b8a8 <_read_r>:
 800b8a8:	b538      	push	{r3, r4, r5, lr}
 800b8aa:	4d07      	ldr	r5, [pc, #28]	@ (800b8c8 <_read_r+0x20>)
 800b8ac:	4604      	mov	r4, r0
 800b8ae:	4608      	mov	r0, r1
 800b8b0:	4611      	mov	r1, r2
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	602a      	str	r2, [r5, #0]
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	f7f8 f88d 	bl	80039d6 <_read>
 800b8bc:	1c43      	adds	r3, r0, #1
 800b8be:	d102      	bne.n	800b8c6 <_read_r+0x1e>
 800b8c0:	682b      	ldr	r3, [r5, #0]
 800b8c2:	b103      	cbz	r3, 800b8c6 <_read_r+0x1e>
 800b8c4:	6023      	str	r3, [r4, #0]
 800b8c6:	bd38      	pop	{r3, r4, r5, pc}
 800b8c8:	200049bc 	.word	0x200049bc

0800b8cc <_write_r>:
 800b8cc:	b538      	push	{r3, r4, r5, lr}
 800b8ce:	4d07      	ldr	r5, [pc, #28]	@ (800b8ec <_write_r+0x20>)
 800b8d0:	4604      	mov	r4, r0
 800b8d2:	4608      	mov	r0, r1
 800b8d4:	4611      	mov	r1, r2
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	602a      	str	r2, [r5, #0]
 800b8da:	461a      	mov	r2, r3
 800b8dc:	f7f8 f898 	bl	8003a10 <_write>
 800b8e0:	1c43      	adds	r3, r0, #1
 800b8e2:	d102      	bne.n	800b8ea <_write_r+0x1e>
 800b8e4:	682b      	ldr	r3, [r5, #0]
 800b8e6:	b103      	cbz	r3, 800b8ea <_write_r+0x1e>
 800b8e8:	6023      	str	r3, [r4, #0]
 800b8ea:	bd38      	pop	{r3, r4, r5, pc}
 800b8ec:	200049bc 	.word	0x200049bc

0800b8f0 <__errno>:
 800b8f0:	4b01      	ldr	r3, [pc, #4]	@ (800b8f8 <__errno+0x8>)
 800b8f2:	6818      	ldr	r0, [r3, #0]
 800b8f4:	4770      	bx	lr
 800b8f6:	bf00      	nop
 800b8f8:	20000198 	.word	0x20000198

0800b8fc <__libc_init_array>:
 800b8fc:	b570      	push	{r4, r5, r6, lr}
 800b8fe:	4d0d      	ldr	r5, [pc, #52]	@ (800b934 <__libc_init_array+0x38>)
 800b900:	4c0d      	ldr	r4, [pc, #52]	@ (800b938 <__libc_init_array+0x3c>)
 800b902:	1b64      	subs	r4, r4, r5
 800b904:	10a4      	asrs	r4, r4, #2
 800b906:	2600      	movs	r6, #0
 800b908:	42a6      	cmp	r6, r4
 800b90a:	d109      	bne.n	800b920 <__libc_init_array+0x24>
 800b90c:	4d0b      	ldr	r5, [pc, #44]	@ (800b93c <__libc_init_array+0x40>)
 800b90e:	4c0c      	ldr	r4, [pc, #48]	@ (800b940 <__libc_init_array+0x44>)
 800b910:	f002 fce2 	bl	800e2d8 <_init>
 800b914:	1b64      	subs	r4, r4, r5
 800b916:	10a4      	asrs	r4, r4, #2
 800b918:	2600      	movs	r6, #0
 800b91a:	42a6      	cmp	r6, r4
 800b91c:	d105      	bne.n	800b92a <__libc_init_array+0x2e>
 800b91e:	bd70      	pop	{r4, r5, r6, pc}
 800b920:	f855 3b04 	ldr.w	r3, [r5], #4
 800b924:	4798      	blx	r3
 800b926:	3601      	adds	r6, #1
 800b928:	e7ee      	b.n	800b908 <__libc_init_array+0xc>
 800b92a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b92e:	4798      	blx	r3
 800b930:	3601      	adds	r6, #1
 800b932:	e7f2      	b.n	800b91a <__libc_init_array+0x1e>
 800b934:	0800ea24 	.word	0x0800ea24
 800b938:	0800ea24 	.word	0x0800ea24
 800b93c:	0800ea24 	.word	0x0800ea24
 800b940:	0800ea28 	.word	0x0800ea28

0800b944 <__retarget_lock_init_recursive>:
 800b944:	4770      	bx	lr

0800b946 <__retarget_lock_acquire_recursive>:
 800b946:	4770      	bx	lr

0800b948 <__retarget_lock_release_recursive>:
 800b948:	4770      	bx	lr

0800b94a <strcpy>:
 800b94a:	4603      	mov	r3, r0
 800b94c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b950:	f803 2b01 	strb.w	r2, [r3], #1
 800b954:	2a00      	cmp	r2, #0
 800b956:	d1f9      	bne.n	800b94c <strcpy+0x2>
 800b958:	4770      	bx	lr

0800b95a <memcpy>:
 800b95a:	440a      	add	r2, r1
 800b95c:	4291      	cmp	r1, r2
 800b95e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b962:	d100      	bne.n	800b966 <memcpy+0xc>
 800b964:	4770      	bx	lr
 800b966:	b510      	push	{r4, lr}
 800b968:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b96c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b970:	4291      	cmp	r1, r2
 800b972:	d1f9      	bne.n	800b968 <memcpy+0xe>
 800b974:	bd10      	pop	{r4, pc}
	...

0800b978 <nan>:
 800b978:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b980 <nan+0x8>
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	00000000 	.word	0x00000000
 800b984:	7ff80000 	.word	0x7ff80000

0800b988 <nanf>:
 800b988:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b990 <nanf+0x8>
 800b98c:	4770      	bx	lr
 800b98e:	bf00      	nop
 800b990:	7fc00000 	.word	0x7fc00000

0800b994 <__assert_func>:
 800b994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b996:	4614      	mov	r4, r2
 800b998:	461a      	mov	r2, r3
 800b99a:	4b09      	ldr	r3, [pc, #36]	@ (800b9c0 <__assert_func+0x2c>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4605      	mov	r5, r0
 800b9a0:	68d8      	ldr	r0, [r3, #12]
 800b9a2:	b954      	cbnz	r4, 800b9ba <__assert_func+0x26>
 800b9a4:	4b07      	ldr	r3, [pc, #28]	@ (800b9c4 <__assert_func+0x30>)
 800b9a6:	461c      	mov	r4, r3
 800b9a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b9ac:	9100      	str	r1, [sp, #0]
 800b9ae:	462b      	mov	r3, r5
 800b9b0:	4905      	ldr	r1, [pc, #20]	@ (800b9c8 <__assert_func+0x34>)
 800b9b2:	f002 f967 	bl	800dc84 <fiprintf>
 800b9b6:	f002 f9a1 	bl	800dcfc <abort>
 800b9ba:	4b04      	ldr	r3, [pc, #16]	@ (800b9cc <__assert_func+0x38>)
 800b9bc:	e7f4      	b.n	800b9a8 <__assert_func+0x14>
 800b9be:	bf00      	nop
 800b9c0:	20000198 	.word	0x20000198
 800b9c4:	0800e7db 	.word	0x0800e7db
 800b9c8:	0800e7ad 	.word	0x0800e7ad
 800b9cc:	0800e7a0 	.word	0x0800e7a0

0800b9d0 <quorem>:
 800b9d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d4:	6903      	ldr	r3, [r0, #16]
 800b9d6:	690c      	ldr	r4, [r1, #16]
 800b9d8:	42a3      	cmp	r3, r4
 800b9da:	4607      	mov	r7, r0
 800b9dc:	db7e      	blt.n	800badc <quorem+0x10c>
 800b9de:	3c01      	subs	r4, #1
 800b9e0:	f101 0814 	add.w	r8, r1, #20
 800b9e4:	00a3      	lsls	r3, r4, #2
 800b9e6:	f100 0514 	add.w	r5, r0, #20
 800b9ea:	9300      	str	r3, [sp, #0]
 800b9ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9f0:	9301      	str	r3, [sp, #4]
 800b9f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b9f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ba02:	fbb2 f6f3 	udiv	r6, r2, r3
 800ba06:	d32e      	bcc.n	800ba66 <quorem+0x96>
 800ba08:	f04f 0a00 	mov.w	sl, #0
 800ba0c:	46c4      	mov	ip, r8
 800ba0e:	46ae      	mov	lr, r5
 800ba10:	46d3      	mov	fp, sl
 800ba12:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ba16:	b298      	uxth	r0, r3
 800ba18:	fb06 a000 	mla	r0, r6, r0, sl
 800ba1c:	0c02      	lsrs	r2, r0, #16
 800ba1e:	0c1b      	lsrs	r3, r3, #16
 800ba20:	fb06 2303 	mla	r3, r6, r3, r2
 800ba24:	f8de 2000 	ldr.w	r2, [lr]
 800ba28:	b280      	uxth	r0, r0
 800ba2a:	b292      	uxth	r2, r2
 800ba2c:	1a12      	subs	r2, r2, r0
 800ba2e:	445a      	add	r2, fp
 800ba30:	f8de 0000 	ldr.w	r0, [lr]
 800ba34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ba3e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ba42:	b292      	uxth	r2, r2
 800ba44:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ba48:	45e1      	cmp	r9, ip
 800ba4a:	f84e 2b04 	str.w	r2, [lr], #4
 800ba4e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ba52:	d2de      	bcs.n	800ba12 <quorem+0x42>
 800ba54:	9b00      	ldr	r3, [sp, #0]
 800ba56:	58eb      	ldr	r3, [r5, r3]
 800ba58:	b92b      	cbnz	r3, 800ba66 <quorem+0x96>
 800ba5a:	9b01      	ldr	r3, [sp, #4]
 800ba5c:	3b04      	subs	r3, #4
 800ba5e:	429d      	cmp	r5, r3
 800ba60:	461a      	mov	r2, r3
 800ba62:	d32f      	bcc.n	800bac4 <quorem+0xf4>
 800ba64:	613c      	str	r4, [r7, #16]
 800ba66:	4638      	mov	r0, r7
 800ba68:	f001 fd0e 	bl	800d488 <__mcmp>
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	db25      	blt.n	800babc <quorem+0xec>
 800ba70:	4629      	mov	r1, r5
 800ba72:	2000      	movs	r0, #0
 800ba74:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba78:	f8d1 c000 	ldr.w	ip, [r1]
 800ba7c:	fa1f fe82 	uxth.w	lr, r2
 800ba80:	fa1f f38c 	uxth.w	r3, ip
 800ba84:	eba3 030e 	sub.w	r3, r3, lr
 800ba88:	4403      	add	r3, r0
 800ba8a:	0c12      	lsrs	r2, r2, #16
 800ba8c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ba90:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba9a:	45c1      	cmp	r9, r8
 800ba9c:	f841 3b04 	str.w	r3, [r1], #4
 800baa0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800baa4:	d2e6      	bcs.n	800ba74 <quorem+0xa4>
 800baa6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800baaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800baae:	b922      	cbnz	r2, 800baba <quorem+0xea>
 800bab0:	3b04      	subs	r3, #4
 800bab2:	429d      	cmp	r5, r3
 800bab4:	461a      	mov	r2, r3
 800bab6:	d30b      	bcc.n	800bad0 <quorem+0x100>
 800bab8:	613c      	str	r4, [r7, #16]
 800baba:	3601      	adds	r6, #1
 800babc:	4630      	mov	r0, r6
 800babe:	b003      	add	sp, #12
 800bac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bac4:	6812      	ldr	r2, [r2, #0]
 800bac6:	3b04      	subs	r3, #4
 800bac8:	2a00      	cmp	r2, #0
 800baca:	d1cb      	bne.n	800ba64 <quorem+0x94>
 800bacc:	3c01      	subs	r4, #1
 800bace:	e7c6      	b.n	800ba5e <quorem+0x8e>
 800bad0:	6812      	ldr	r2, [r2, #0]
 800bad2:	3b04      	subs	r3, #4
 800bad4:	2a00      	cmp	r2, #0
 800bad6:	d1ef      	bne.n	800bab8 <quorem+0xe8>
 800bad8:	3c01      	subs	r4, #1
 800bada:	e7ea      	b.n	800bab2 <quorem+0xe2>
 800badc:	2000      	movs	r0, #0
 800bade:	e7ee      	b.n	800babe <quorem+0xee>

0800bae0 <_dtoa_r>:
 800bae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae4:	69c7      	ldr	r7, [r0, #28]
 800bae6:	b099      	sub	sp, #100	@ 0x64
 800bae8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800baec:	ec55 4b10 	vmov	r4, r5, d0
 800baf0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800baf2:	9109      	str	r1, [sp, #36]	@ 0x24
 800baf4:	4683      	mov	fp, r0
 800baf6:	920e      	str	r2, [sp, #56]	@ 0x38
 800baf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bafa:	b97f      	cbnz	r7, 800bb1c <_dtoa_r+0x3c>
 800bafc:	2010      	movs	r0, #16
 800bafe:	f001 f937 	bl	800cd70 <malloc>
 800bb02:	4602      	mov	r2, r0
 800bb04:	f8cb 001c 	str.w	r0, [fp, #28]
 800bb08:	b920      	cbnz	r0, 800bb14 <_dtoa_r+0x34>
 800bb0a:	4ba7      	ldr	r3, [pc, #668]	@ (800bda8 <_dtoa_r+0x2c8>)
 800bb0c:	21ef      	movs	r1, #239	@ 0xef
 800bb0e:	48a7      	ldr	r0, [pc, #668]	@ (800bdac <_dtoa_r+0x2cc>)
 800bb10:	f7ff ff40 	bl	800b994 <__assert_func>
 800bb14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bb18:	6007      	str	r7, [r0, #0]
 800bb1a:	60c7      	str	r7, [r0, #12]
 800bb1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bb20:	6819      	ldr	r1, [r3, #0]
 800bb22:	b159      	cbz	r1, 800bb3c <_dtoa_r+0x5c>
 800bb24:	685a      	ldr	r2, [r3, #4]
 800bb26:	604a      	str	r2, [r1, #4]
 800bb28:	2301      	movs	r3, #1
 800bb2a:	4093      	lsls	r3, r2
 800bb2c:	608b      	str	r3, [r1, #8]
 800bb2e:	4658      	mov	r0, fp
 800bb30:	f001 fa26 	bl	800cf80 <_Bfree>
 800bb34:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	601a      	str	r2, [r3, #0]
 800bb3c:	1e2b      	subs	r3, r5, #0
 800bb3e:	bfb9      	ittee	lt
 800bb40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bb44:	9303      	strlt	r3, [sp, #12]
 800bb46:	2300      	movge	r3, #0
 800bb48:	6033      	strge	r3, [r6, #0]
 800bb4a:	9f03      	ldr	r7, [sp, #12]
 800bb4c:	4b98      	ldr	r3, [pc, #608]	@ (800bdb0 <_dtoa_r+0x2d0>)
 800bb4e:	bfbc      	itt	lt
 800bb50:	2201      	movlt	r2, #1
 800bb52:	6032      	strlt	r2, [r6, #0]
 800bb54:	43bb      	bics	r3, r7
 800bb56:	d112      	bne.n	800bb7e <_dtoa_r+0x9e>
 800bb58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bb5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bb5e:	6013      	str	r3, [r2, #0]
 800bb60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bb64:	4323      	orrs	r3, r4
 800bb66:	f000 854d 	beq.w	800c604 <_dtoa_r+0xb24>
 800bb6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb6c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bdc4 <_dtoa_r+0x2e4>
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f000 854f 	beq.w	800c614 <_dtoa_r+0xb34>
 800bb76:	f10a 0303 	add.w	r3, sl, #3
 800bb7a:	f000 bd49 	b.w	800c610 <_dtoa_r+0xb30>
 800bb7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb82:	2200      	movs	r2, #0
 800bb84:	ec51 0b17 	vmov	r0, r1, d7
 800bb88:	2300      	movs	r3, #0
 800bb8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bb8e:	f7f4 ffa3 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb92:	4680      	mov	r8, r0
 800bb94:	b158      	cbz	r0, 800bbae <_dtoa_r+0xce>
 800bb96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bb98:	2301      	movs	r3, #1
 800bb9a:	6013      	str	r3, [r2, #0]
 800bb9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb9e:	b113      	cbz	r3, 800bba6 <_dtoa_r+0xc6>
 800bba0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bba2:	4b84      	ldr	r3, [pc, #528]	@ (800bdb4 <_dtoa_r+0x2d4>)
 800bba4:	6013      	str	r3, [r2, #0]
 800bba6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bdc8 <_dtoa_r+0x2e8>
 800bbaa:	f000 bd33 	b.w	800c614 <_dtoa_r+0xb34>
 800bbae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bbb2:	aa16      	add	r2, sp, #88	@ 0x58
 800bbb4:	a917      	add	r1, sp, #92	@ 0x5c
 800bbb6:	4658      	mov	r0, fp
 800bbb8:	f001 fd86 	bl	800d6c8 <__d2b>
 800bbbc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bbc0:	4681      	mov	r9, r0
 800bbc2:	2e00      	cmp	r6, #0
 800bbc4:	d077      	beq.n	800bcb6 <_dtoa_r+0x1d6>
 800bbc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bbc8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bbcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbd4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bbd8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bbdc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	4b74      	ldr	r3, [pc, #464]	@ (800bdb8 <_dtoa_r+0x2d8>)
 800bbe6:	f7f4 fb57 	bl	8000298 <__aeabi_dsub>
 800bbea:	a369      	add	r3, pc, #420	@ (adr r3, 800bd90 <_dtoa_r+0x2b0>)
 800bbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf0:	f7f4 fd0a 	bl	8000608 <__aeabi_dmul>
 800bbf4:	a368      	add	r3, pc, #416	@ (adr r3, 800bd98 <_dtoa_r+0x2b8>)
 800bbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfa:	f7f4 fb4f 	bl	800029c <__adddf3>
 800bbfe:	4604      	mov	r4, r0
 800bc00:	4630      	mov	r0, r6
 800bc02:	460d      	mov	r5, r1
 800bc04:	f7f4 fc96 	bl	8000534 <__aeabi_i2d>
 800bc08:	a365      	add	r3, pc, #404	@ (adr r3, 800bda0 <_dtoa_r+0x2c0>)
 800bc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0e:	f7f4 fcfb 	bl	8000608 <__aeabi_dmul>
 800bc12:	4602      	mov	r2, r0
 800bc14:	460b      	mov	r3, r1
 800bc16:	4620      	mov	r0, r4
 800bc18:	4629      	mov	r1, r5
 800bc1a:	f7f4 fb3f 	bl	800029c <__adddf3>
 800bc1e:	4604      	mov	r4, r0
 800bc20:	460d      	mov	r5, r1
 800bc22:	f7f4 ffa1 	bl	8000b68 <__aeabi_d2iz>
 800bc26:	2200      	movs	r2, #0
 800bc28:	4607      	mov	r7, r0
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	4629      	mov	r1, r5
 800bc30:	f7f4 ff5c 	bl	8000aec <__aeabi_dcmplt>
 800bc34:	b140      	cbz	r0, 800bc48 <_dtoa_r+0x168>
 800bc36:	4638      	mov	r0, r7
 800bc38:	f7f4 fc7c 	bl	8000534 <__aeabi_i2d>
 800bc3c:	4622      	mov	r2, r4
 800bc3e:	462b      	mov	r3, r5
 800bc40:	f7f4 ff4a 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc44:	b900      	cbnz	r0, 800bc48 <_dtoa_r+0x168>
 800bc46:	3f01      	subs	r7, #1
 800bc48:	2f16      	cmp	r7, #22
 800bc4a:	d851      	bhi.n	800bcf0 <_dtoa_r+0x210>
 800bc4c:	4b5b      	ldr	r3, [pc, #364]	@ (800bdbc <_dtoa_r+0x2dc>)
 800bc4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc5a:	f7f4 ff47 	bl	8000aec <__aeabi_dcmplt>
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	d048      	beq.n	800bcf4 <_dtoa_r+0x214>
 800bc62:	3f01      	subs	r7, #1
 800bc64:	2300      	movs	r3, #0
 800bc66:	9312      	str	r3, [sp, #72]	@ 0x48
 800bc68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bc6a:	1b9b      	subs	r3, r3, r6
 800bc6c:	1e5a      	subs	r2, r3, #1
 800bc6e:	bf44      	itt	mi
 800bc70:	f1c3 0801 	rsbmi	r8, r3, #1
 800bc74:	2300      	movmi	r3, #0
 800bc76:	9208      	str	r2, [sp, #32]
 800bc78:	bf54      	ite	pl
 800bc7a:	f04f 0800 	movpl.w	r8, #0
 800bc7e:	9308      	strmi	r3, [sp, #32]
 800bc80:	2f00      	cmp	r7, #0
 800bc82:	db39      	blt.n	800bcf8 <_dtoa_r+0x218>
 800bc84:	9b08      	ldr	r3, [sp, #32]
 800bc86:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bc88:	443b      	add	r3, r7
 800bc8a:	9308      	str	r3, [sp, #32]
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc92:	2b09      	cmp	r3, #9
 800bc94:	d864      	bhi.n	800bd60 <_dtoa_r+0x280>
 800bc96:	2b05      	cmp	r3, #5
 800bc98:	bfc4      	itt	gt
 800bc9a:	3b04      	subgt	r3, #4
 800bc9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bc9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bca0:	f1a3 0302 	sub.w	r3, r3, #2
 800bca4:	bfcc      	ite	gt
 800bca6:	2400      	movgt	r4, #0
 800bca8:	2401      	movle	r4, #1
 800bcaa:	2b03      	cmp	r3, #3
 800bcac:	d863      	bhi.n	800bd76 <_dtoa_r+0x296>
 800bcae:	e8df f003 	tbb	[pc, r3]
 800bcb2:	372a      	.short	0x372a
 800bcb4:	5535      	.short	0x5535
 800bcb6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bcba:	441e      	add	r6, r3
 800bcbc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bcc0:	2b20      	cmp	r3, #32
 800bcc2:	bfc1      	itttt	gt
 800bcc4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bcc8:	409f      	lslgt	r7, r3
 800bcca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bcce:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bcd2:	bfd6      	itet	le
 800bcd4:	f1c3 0320 	rsble	r3, r3, #32
 800bcd8:	ea47 0003 	orrgt.w	r0, r7, r3
 800bcdc:	fa04 f003 	lslle.w	r0, r4, r3
 800bce0:	f7f4 fc18 	bl	8000514 <__aeabi_ui2d>
 800bce4:	2201      	movs	r2, #1
 800bce6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bcea:	3e01      	subs	r6, #1
 800bcec:	9214      	str	r2, [sp, #80]	@ 0x50
 800bcee:	e777      	b.n	800bbe0 <_dtoa_r+0x100>
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	e7b8      	b.n	800bc66 <_dtoa_r+0x186>
 800bcf4:	9012      	str	r0, [sp, #72]	@ 0x48
 800bcf6:	e7b7      	b.n	800bc68 <_dtoa_r+0x188>
 800bcf8:	427b      	negs	r3, r7
 800bcfa:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	eba8 0807 	sub.w	r8, r8, r7
 800bd02:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd04:	e7c4      	b.n	800bc90 <_dtoa_r+0x1b0>
 800bd06:	2300      	movs	r3, #0
 800bd08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	dc35      	bgt.n	800bd7c <_dtoa_r+0x29c>
 800bd10:	2301      	movs	r3, #1
 800bd12:	9300      	str	r3, [sp, #0]
 800bd14:	9307      	str	r3, [sp, #28]
 800bd16:	461a      	mov	r2, r3
 800bd18:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd1a:	e00b      	b.n	800bd34 <_dtoa_r+0x254>
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	e7f3      	b.n	800bd08 <_dtoa_r+0x228>
 800bd20:	2300      	movs	r3, #0
 800bd22:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd26:	18fb      	adds	r3, r7, r3
 800bd28:	9300      	str	r3, [sp, #0]
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	9307      	str	r3, [sp, #28]
 800bd30:	bfb8      	it	lt
 800bd32:	2301      	movlt	r3, #1
 800bd34:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bd38:	2100      	movs	r1, #0
 800bd3a:	2204      	movs	r2, #4
 800bd3c:	f102 0514 	add.w	r5, r2, #20
 800bd40:	429d      	cmp	r5, r3
 800bd42:	d91f      	bls.n	800bd84 <_dtoa_r+0x2a4>
 800bd44:	6041      	str	r1, [r0, #4]
 800bd46:	4658      	mov	r0, fp
 800bd48:	f001 f8da 	bl	800cf00 <_Balloc>
 800bd4c:	4682      	mov	sl, r0
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	d13c      	bne.n	800bdcc <_dtoa_r+0x2ec>
 800bd52:	4b1b      	ldr	r3, [pc, #108]	@ (800bdc0 <_dtoa_r+0x2e0>)
 800bd54:	4602      	mov	r2, r0
 800bd56:	f240 11af 	movw	r1, #431	@ 0x1af
 800bd5a:	e6d8      	b.n	800bb0e <_dtoa_r+0x2e>
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	e7e0      	b.n	800bd22 <_dtoa_r+0x242>
 800bd60:	2401      	movs	r4, #1
 800bd62:	2300      	movs	r3, #0
 800bd64:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd66:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bd68:	f04f 33ff 	mov.w	r3, #4294967295
 800bd6c:	9300      	str	r3, [sp, #0]
 800bd6e:	9307      	str	r3, [sp, #28]
 800bd70:	2200      	movs	r2, #0
 800bd72:	2312      	movs	r3, #18
 800bd74:	e7d0      	b.n	800bd18 <_dtoa_r+0x238>
 800bd76:	2301      	movs	r3, #1
 800bd78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd7a:	e7f5      	b.n	800bd68 <_dtoa_r+0x288>
 800bd7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd7e:	9300      	str	r3, [sp, #0]
 800bd80:	9307      	str	r3, [sp, #28]
 800bd82:	e7d7      	b.n	800bd34 <_dtoa_r+0x254>
 800bd84:	3101      	adds	r1, #1
 800bd86:	0052      	lsls	r2, r2, #1
 800bd88:	e7d8      	b.n	800bd3c <_dtoa_r+0x25c>
 800bd8a:	bf00      	nop
 800bd8c:	f3af 8000 	nop.w
 800bd90:	636f4361 	.word	0x636f4361
 800bd94:	3fd287a7 	.word	0x3fd287a7
 800bd98:	8b60c8b3 	.word	0x8b60c8b3
 800bd9c:	3fc68a28 	.word	0x3fc68a28
 800bda0:	509f79fb 	.word	0x509f79fb
 800bda4:	3fd34413 	.word	0x3fd34413
 800bda8:	0800e727 	.word	0x0800e727
 800bdac:	0800e7e9 	.word	0x0800e7e9
 800bdb0:	7ff00000 	.word	0x7ff00000
 800bdb4:	0800e6ff 	.word	0x0800e6ff
 800bdb8:	3ff80000 	.word	0x3ff80000
 800bdbc:	0800e940 	.word	0x0800e940
 800bdc0:	0800e841 	.word	0x0800e841
 800bdc4:	0800e7e5 	.word	0x0800e7e5
 800bdc8:	0800e6fe 	.word	0x0800e6fe
 800bdcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bdd0:	6018      	str	r0, [r3, #0]
 800bdd2:	9b07      	ldr	r3, [sp, #28]
 800bdd4:	2b0e      	cmp	r3, #14
 800bdd6:	f200 80a4 	bhi.w	800bf22 <_dtoa_r+0x442>
 800bdda:	2c00      	cmp	r4, #0
 800bddc:	f000 80a1 	beq.w	800bf22 <_dtoa_r+0x442>
 800bde0:	2f00      	cmp	r7, #0
 800bde2:	dd33      	ble.n	800be4c <_dtoa_r+0x36c>
 800bde4:	4bad      	ldr	r3, [pc, #692]	@ (800c09c <_dtoa_r+0x5bc>)
 800bde6:	f007 020f 	and.w	r2, r7, #15
 800bdea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bdee:	ed93 7b00 	vldr	d7, [r3]
 800bdf2:	05f8      	lsls	r0, r7, #23
 800bdf4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bdf8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bdfc:	d516      	bpl.n	800be2c <_dtoa_r+0x34c>
 800bdfe:	4ba8      	ldr	r3, [pc, #672]	@ (800c0a0 <_dtoa_r+0x5c0>)
 800be00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800be08:	f7f4 fd28 	bl	800085c <__aeabi_ddiv>
 800be0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be10:	f004 040f 	and.w	r4, r4, #15
 800be14:	2603      	movs	r6, #3
 800be16:	4da2      	ldr	r5, [pc, #648]	@ (800c0a0 <_dtoa_r+0x5c0>)
 800be18:	b954      	cbnz	r4, 800be30 <_dtoa_r+0x350>
 800be1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be22:	f7f4 fd1b 	bl	800085c <__aeabi_ddiv>
 800be26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be2a:	e028      	b.n	800be7e <_dtoa_r+0x39e>
 800be2c:	2602      	movs	r6, #2
 800be2e:	e7f2      	b.n	800be16 <_dtoa_r+0x336>
 800be30:	07e1      	lsls	r1, r4, #31
 800be32:	d508      	bpl.n	800be46 <_dtoa_r+0x366>
 800be34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be38:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be3c:	f7f4 fbe4 	bl	8000608 <__aeabi_dmul>
 800be40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be44:	3601      	adds	r6, #1
 800be46:	1064      	asrs	r4, r4, #1
 800be48:	3508      	adds	r5, #8
 800be4a:	e7e5      	b.n	800be18 <_dtoa_r+0x338>
 800be4c:	f000 80d2 	beq.w	800bff4 <_dtoa_r+0x514>
 800be50:	427c      	negs	r4, r7
 800be52:	4b92      	ldr	r3, [pc, #584]	@ (800c09c <_dtoa_r+0x5bc>)
 800be54:	4d92      	ldr	r5, [pc, #584]	@ (800c0a0 <_dtoa_r+0x5c0>)
 800be56:	f004 020f 	and.w	r2, r4, #15
 800be5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be66:	f7f4 fbcf 	bl	8000608 <__aeabi_dmul>
 800be6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be6e:	1124      	asrs	r4, r4, #4
 800be70:	2300      	movs	r3, #0
 800be72:	2602      	movs	r6, #2
 800be74:	2c00      	cmp	r4, #0
 800be76:	f040 80b2 	bne.w	800bfde <_dtoa_r+0x4fe>
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d1d3      	bne.n	800be26 <_dtoa_r+0x346>
 800be7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800be80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800be84:	2b00      	cmp	r3, #0
 800be86:	f000 80b7 	beq.w	800bff8 <_dtoa_r+0x518>
 800be8a:	4b86      	ldr	r3, [pc, #536]	@ (800c0a4 <_dtoa_r+0x5c4>)
 800be8c:	2200      	movs	r2, #0
 800be8e:	4620      	mov	r0, r4
 800be90:	4629      	mov	r1, r5
 800be92:	f7f4 fe2b 	bl	8000aec <__aeabi_dcmplt>
 800be96:	2800      	cmp	r0, #0
 800be98:	f000 80ae 	beq.w	800bff8 <_dtoa_r+0x518>
 800be9c:	9b07      	ldr	r3, [sp, #28]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	f000 80aa 	beq.w	800bff8 <_dtoa_r+0x518>
 800bea4:	9b00      	ldr	r3, [sp, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	dd37      	ble.n	800bf1a <_dtoa_r+0x43a>
 800beaa:	1e7b      	subs	r3, r7, #1
 800beac:	9304      	str	r3, [sp, #16]
 800beae:	4620      	mov	r0, r4
 800beb0:	4b7d      	ldr	r3, [pc, #500]	@ (800c0a8 <_dtoa_r+0x5c8>)
 800beb2:	2200      	movs	r2, #0
 800beb4:	4629      	mov	r1, r5
 800beb6:	f7f4 fba7 	bl	8000608 <__aeabi_dmul>
 800beba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bebe:	9c00      	ldr	r4, [sp, #0]
 800bec0:	3601      	adds	r6, #1
 800bec2:	4630      	mov	r0, r6
 800bec4:	f7f4 fb36 	bl	8000534 <__aeabi_i2d>
 800bec8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800becc:	f7f4 fb9c 	bl	8000608 <__aeabi_dmul>
 800bed0:	4b76      	ldr	r3, [pc, #472]	@ (800c0ac <_dtoa_r+0x5cc>)
 800bed2:	2200      	movs	r2, #0
 800bed4:	f7f4 f9e2 	bl	800029c <__adddf3>
 800bed8:	4605      	mov	r5, r0
 800beda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bede:	2c00      	cmp	r4, #0
 800bee0:	f040 808d 	bne.w	800bffe <_dtoa_r+0x51e>
 800bee4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bee8:	4b71      	ldr	r3, [pc, #452]	@ (800c0b0 <_dtoa_r+0x5d0>)
 800beea:	2200      	movs	r2, #0
 800beec:	f7f4 f9d4 	bl	8000298 <__aeabi_dsub>
 800bef0:	4602      	mov	r2, r0
 800bef2:	460b      	mov	r3, r1
 800bef4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bef8:	462a      	mov	r2, r5
 800befa:	4633      	mov	r3, r6
 800befc:	f7f4 fe14 	bl	8000b28 <__aeabi_dcmpgt>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	f040 828b 	bne.w	800c41c <_dtoa_r+0x93c>
 800bf06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf0a:	462a      	mov	r2, r5
 800bf0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bf10:	f7f4 fdec 	bl	8000aec <__aeabi_dcmplt>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	f040 8128 	bne.w	800c16a <_dtoa_r+0x68a>
 800bf1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bf1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bf22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	f2c0 815a 	blt.w	800c1de <_dtoa_r+0x6fe>
 800bf2a:	2f0e      	cmp	r7, #14
 800bf2c:	f300 8157 	bgt.w	800c1de <_dtoa_r+0x6fe>
 800bf30:	4b5a      	ldr	r3, [pc, #360]	@ (800c09c <_dtoa_r+0x5bc>)
 800bf32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bf36:	ed93 7b00 	vldr	d7, [r3]
 800bf3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	ed8d 7b00 	vstr	d7, [sp]
 800bf42:	da03      	bge.n	800bf4c <_dtoa_r+0x46c>
 800bf44:	9b07      	ldr	r3, [sp, #28]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	f340 8101 	ble.w	800c14e <_dtoa_r+0x66e>
 800bf4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bf50:	4656      	mov	r6, sl
 800bf52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf56:	4620      	mov	r0, r4
 800bf58:	4629      	mov	r1, r5
 800bf5a:	f7f4 fc7f 	bl	800085c <__aeabi_ddiv>
 800bf5e:	f7f4 fe03 	bl	8000b68 <__aeabi_d2iz>
 800bf62:	4680      	mov	r8, r0
 800bf64:	f7f4 fae6 	bl	8000534 <__aeabi_i2d>
 800bf68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf6c:	f7f4 fb4c 	bl	8000608 <__aeabi_dmul>
 800bf70:	4602      	mov	r2, r0
 800bf72:	460b      	mov	r3, r1
 800bf74:	4620      	mov	r0, r4
 800bf76:	4629      	mov	r1, r5
 800bf78:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bf7c:	f7f4 f98c 	bl	8000298 <__aeabi_dsub>
 800bf80:	f806 4b01 	strb.w	r4, [r6], #1
 800bf84:	9d07      	ldr	r5, [sp, #28]
 800bf86:	eba6 040a 	sub.w	r4, r6, sl
 800bf8a:	42a5      	cmp	r5, r4
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	460b      	mov	r3, r1
 800bf90:	f040 8117 	bne.w	800c1c2 <_dtoa_r+0x6e2>
 800bf94:	f7f4 f982 	bl	800029c <__adddf3>
 800bf98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf9c:	4604      	mov	r4, r0
 800bf9e:	460d      	mov	r5, r1
 800bfa0:	f7f4 fdc2 	bl	8000b28 <__aeabi_dcmpgt>
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	f040 80f9 	bne.w	800c19c <_dtoa_r+0x6bc>
 800bfaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfae:	4620      	mov	r0, r4
 800bfb0:	4629      	mov	r1, r5
 800bfb2:	f7f4 fd91 	bl	8000ad8 <__aeabi_dcmpeq>
 800bfb6:	b118      	cbz	r0, 800bfc0 <_dtoa_r+0x4e0>
 800bfb8:	f018 0f01 	tst.w	r8, #1
 800bfbc:	f040 80ee 	bne.w	800c19c <_dtoa_r+0x6bc>
 800bfc0:	4649      	mov	r1, r9
 800bfc2:	4658      	mov	r0, fp
 800bfc4:	f000 ffdc 	bl	800cf80 <_Bfree>
 800bfc8:	2300      	movs	r3, #0
 800bfca:	7033      	strb	r3, [r6, #0]
 800bfcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bfce:	3701      	adds	r7, #1
 800bfd0:	601f      	str	r7, [r3, #0]
 800bfd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	f000 831d 	beq.w	800c614 <_dtoa_r+0xb34>
 800bfda:	601e      	str	r6, [r3, #0]
 800bfdc:	e31a      	b.n	800c614 <_dtoa_r+0xb34>
 800bfde:	07e2      	lsls	r2, r4, #31
 800bfe0:	d505      	bpl.n	800bfee <_dtoa_r+0x50e>
 800bfe2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bfe6:	f7f4 fb0f 	bl	8000608 <__aeabi_dmul>
 800bfea:	3601      	adds	r6, #1
 800bfec:	2301      	movs	r3, #1
 800bfee:	1064      	asrs	r4, r4, #1
 800bff0:	3508      	adds	r5, #8
 800bff2:	e73f      	b.n	800be74 <_dtoa_r+0x394>
 800bff4:	2602      	movs	r6, #2
 800bff6:	e742      	b.n	800be7e <_dtoa_r+0x39e>
 800bff8:	9c07      	ldr	r4, [sp, #28]
 800bffa:	9704      	str	r7, [sp, #16]
 800bffc:	e761      	b.n	800bec2 <_dtoa_r+0x3e2>
 800bffe:	4b27      	ldr	r3, [pc, #156]	@ (800c09c <_dtoa_r+0x5bc>)
 800c000:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c002:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c006:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c00a:	4454      	add	r4, sl
 800c00c:	2900      	cmp	r1, #0
 800c00e:	d053      	beq.n	800c0b8 <_dtoa_r+0x5d8>
 800c010:	4928      	ldr	r1, [pc, #160]	@ (800c0b4 <_dtoa_r+0x5d4>)
 800c012:	2000      	movs	r0, #0
 800c014:	f7f4 fc22 	bl	800085c <__aeabi_ddiv>
 800c018:	4633      	mov	r3, r6
 800c01a:	462a      	mov	r2, r5
 800c01c:	f7f4 f93c 	bl	8000298 <__aeabi_dsub>
 800c020:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c024:	4656      	mov	r6, sl
 800c026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c02a:	f7f4 fd9d 	bl	8000b68 <__aeabi_d2iz>
 800c02e:	4605      	mov	r5, r0
 800c030:	f7f4 fa80 	bl	8000534 <__aeabi_i2d>
 800c034:	4602      	mov	r2, r0
 800c036:	460b      	mov	r3, r1
 800c038:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c03c:	f7f4 f92c 	bl	8000298 <__aeabi_dsub>
 800c040:	3530      	adds	r5, #48	@ 0x30
 800c042:	4602      	mov	r2, r0
 800c044:	460b      	mov	r3, r1
 800c046:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c04a:	f806 5b01 	strb.w	r5, [r6], #1
 800c04e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c052:	f7f4 fd4b 	bl	8000aec <__aeabi_dcmplt>
 800c056:	2800      	cmp	r0, #0
 800c058:	d171      	bne.n	800c13e <_dtoa_r+0x65e>
 800c05a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c05e:	4911      	ldr	r1, [pc, #68]	@ (800c0a4 <_dtoa_r+0x5c4>)
 800c060:	2000      	movs	r0, #0
 800c062:	f7f4 f919 	bl	8000298 <__aeabi_dsub>
 800c066:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c06a:	f7f4 fd3f 	bl	8000aec <__aeabi_dcmplt>
 800c06e:	2800      	cmp	r0, #0
 800c070:	f040 8095 	bne.w	800c19e <_dtoa_r+0x6be>
 800c074:	42a6      	cmp	r6, r4
 800c076:	f43f af50 	beq.w	800bf1a <_dtoa_r+0x43a>
 800c07a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c07e:	4b0a      	ldr	r3, [pc, #40]	@ (800c0a8 <_dtoa_r+0x5c8>)
 800c080:	2200      	movs	r2, #0
 800c082:	f7f4 fac1 	bl	8000608 <__aeabi_dmul>
 800c086:	4b08      	ldr	r3, [pc, #32]	@ (800c0a8 <_dtoa_r+0x5c8>)
 800c088:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c08c:	2200      	movs	r2, #0
 800c08e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c092:	f7f4 fab9 	bl	8000608 <__aeabi_dmul>
 800c096:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c09a:	e7c4      	b.n	800c026 <_dtoa_r+0x546>
 800c09c:	0800e940 	.word	0x0800e940
 800c0a0:	0800e918 	.word	0x0800e918
 800c0a4:	3ff00000 	.word	0x3ff00000
 800c0a8:	40240000 	.word	0x40240000
 800c0ac:	401c0000 	.word	0x401c0000
 800c0b0:	40140000 	.word	0x40140000
 800c0b4:	3fe00000 	.word	0x3fe00000
 800c0b8:	4631      	mov	r1, r6
 800c0ba:	4628      	mov	r0, r5
 800c0bc:	f7f4 faa4 	bl	8000608 <__aeabi_dmul>
 800c0c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c0c4:	9415      	str	r4, [sp, #84]	@ 0x54
 800c0c6:	4656      	mov	r6, sl
 800c0c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0cc:	f7f4 fd4c 	bl	8000b68 <__aeabi_d2iz>
 800c0d0:	4605      	mov	r5, r0
 800c0d2:	f7f4 fa2f 	bl	8000534 <__aeabi_i2d>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	460b      	mov	r3, r1
 800c0da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0de:	f7f4 f8db 	bl	8000298 <__aeabi_dsub>
 800c0e2:	3530      	adds	r5, #48	@ 0x30
 800c0e4:	f806 5b01 	strb.w	r5, [r6], #1
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	42a6      	cmp	r6, r4
 800c0ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0f2:	f04f 0200 	mov.w	r2, #0
 800c0f6:	d124      	bne.n	800c142 <_dtoa_r+0x662>
 800c0f8:	4bac      	ldr	r3, [pc, #688]	@ (800c3ac <_dtoa_r+0x8cc>)
 800c0fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c0fe:	f7f4 f8cd 	bl	800029c <__adddf3>
 800c102:	4602      	mov	r2, r0
 800c104:	460b      	mov	r3, r1
 800c106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c10a:	f7f4 fd0d 	bl	8000b28 <__aeabi_dcmpgt>
 800c10e:	2800      	cmp	r0, #0
 800c110:	d145      	bne.n	800c19e <_dtoa_r+0x6be>
 800c112:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c116:	49a5      	ldr	r1, [pc, #660]	@ (800c3ac <_dtoa_r+0x8cc>)
 800c118:	2000      	movs	r0, #0
 800c11a:	f7f4 f8bd 	bl	8000298 <__aeabi_dsub>
 800c11e:	4602      	mov	r2, r0
 800c120:	460b      	mov	r3, r1
 800c122:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c126:	f7f4 fce1 	bl	8000aec <__aeabi_dcmplt>
 800c12a:	2800      	cmp	r0, #0
 800c12c:	f43f aef5 	beq.w	800bf1a <_dtoa_r+0x43a>
 800c130:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c132:	1e73      	subs	r3, r6, #1
 800c134:	9315      	str	r3, [sp, #84]	@ 0x54
 800c136:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c13a:	2b30      	cmp	r3, #48	@ 0x30
 800c13c:	d0f8      	beq.n	800c130 <_dtoa_r+0x650>
 800c13e:	9f04      	ldr	r7, [sp, #16]
 800c140:	e73e      	b.n	800bfc0 <_dtoa_r+0x4e0>
 800c142:	4b9b      	ldr	r3, [pc, #620]	@ (800c3b0 <_dtoa_r+0x8d0>)
 800c144:	f7f4 fa60 	bl	8000608 <__aeabi_dmul>
 800c148:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c14c:	e7bc      	b.n	800c0c8 <_dtoa_r+0x5e8>
 800c14e:	d10c      	bne.n	800c16a <_dtoa_r+0x68a>
 800c150:	4b98      	ldr	r3, [pc, #608]	@ (800c3b4 <_dtoa_r+0x8d4>)
 800c152:	2200      	movs	r2, #0
 800c154:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c158:	f7f4 fa56 	bl	8000608 <__aeabi_dmul>
 800c15c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c160:	f7f4 fcd8 	bl	8000b14 <__aeabi_dcmpge>
 800c164:	2800      	cmp	r0, #0
 800c166:	f000 8157 	beq.w	800c418 <_dtoa_r+0x938>
 800c16a:	2400      	movs	r4, #0
 800c16c:	4625      	mov	r5, r4
 800c16e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c170:	43db      	mvns	r3, r3
 800c172:	9304      	str	r3, [sp, #16]
 800c174:	4656      	mov	r6, sl
 800c176:	2700      	movs	r7, #0
 800c178:	4621      	mov	r1, r4
 800c17a:	4658      	mov	r0, fp
 800c17c:	f000 ff00 	bl	800cf80 <_Bfree>
 800c180:	2d00      	cmp	r5, #0
 800c182:	d0dc      	beq.n	800c13e <_dtoa_r+0x65e>
 800c184:	b12f      	cbz	r7, 800c192 <_dtoa_r+0x6b2>
 800c186:	42af      	cmp	r7, r5
 800c188:	d003      	beq.n	800c192 <_dtoa_r+0x6b2>
 800c18a:	4639      	mov	r1, r7
 800c18c:	4658      	mov	r0, fp
 800c18e:	f000 fef7 	bl	800cf80 <_Bfree>
 800c192:	4629      	mov	r1, r5
 800c194:	4658      	mov	r0, fp
 800c196:	f000 fef3 	bl	800cf80 <_Bfree>
 800c19a:	e7d0      	b.n	800c13e <_dtoa_r+0x65e>
 800c19c:	9704      	str	r7, [sp, #16]
 800c19e:	4633      	mov	r3, r6
 800c1a0:	461e      	mov	r6, r3
 800c1a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1a6:	2a39      	cmp	r2, #57	@ 0x39
 800c1a8:	d107      	bne.n	800c1ba <_dtoa_r+0x6da>
 800c1aa:	459a      	cmp	sl, r3
 800c1ac:	d1f8      	bne.n	800c1a0 <_dtoa_r+0x6c0>
 800c1ae:	9a04      	ldr	r2, [sp, #16]
 800c1b0:	3201      	adds	r2, #1
 800c1b2:	9204      	str	r2, [sp, #16]
 800c1b4:	2230      	movs	r2, #48	@ 0x30
 800c1b6:	f88a 2000 	strb.w	r2, [sl]
 800c1ba:	781a      	ldrb	r2, [r3, #0]
 800c1bc:	3201      	adds	r2, #1
 800c1be:	701a      	strb	r2, [r3, #0]
 800c1c0:	e7bd      	b.n	800c13e <_dtoa_r+0x65e>
 800c1c2:	4b7b      	ldr	r3, [pc, #492]	@ (800c3b0 <_dtoa_r+0x8d0>)
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	f7f4 fa1f 	bl	8000608 <__aeabi_dmul>
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	460d      	mov	r5, r1
 800c1d2:	f7f4 fc81 	bl	8000ad8 <__aeabi_dcmpeq>
 800c1d6:	2800      	cmp	r0, #0
 800c1d8:	f43f aebb 	beq.w	800bf52 <_dtoa_r+0x472>
 800c1dc:	e6f0      	b.n	800bfc0 <_dtoa_r+0x4e0>
 800c1de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c1e0:	2a00      	cmp	r2, #0
 800c1e2:	f000 80db 	beq.w	800c39c <_dtoa_r+0x8bc>
 800c1e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1e8:	2a01      	cmp	r2, #1
 800c1ea:	f300 80bf 	bgt.w	800c36c <_dtoa_r+0x88c>
 800c1ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c1f0:	2a00      	cmp	r2, #0
 800c1f2:	f000 80b7 	beq.w	800c364 <_dtoa_r+0x884>
 800c1f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c1fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c1fc:	4646      	mov	r6, r8
 800c1fe:	9a08      	ldr	r2, [sp, #32]
 800c200:	2101      	movs	r1, #1
 800c202:	441a      	add	r2, r3
 800c204:	4658      	mov	r0, fp
 800c206:	4498      	add	r8, r3
 800c208:	9208      	str	r2, [sp, #32]
 800c20a:	f000 ffb7 	bl	800d17c <__i2b>
 800c20e:	4605      	mov	r5, r0
 800c210:	b15e      	cbz	r6, 800c22a <_dtoa_r+0x74a>
 800c212:	9b08      	ldr	r3, [sp, #32]
 800c214:	2b00      	cmp	r3, #0
 800c216:	dd08      	ble.n	800c22a <_dtoa_r+0x74a>
 800c218:	42b3      	cmp	r3, r6
 800c21a:	9a08      	ldr	r2, [sp, #32]
 800c21c:	bfa8      	it	ge
 800c21e:	4633      	movge	r3, r6
 800c220:	eba8 0803 	sub.w	r8, r8, r3
 800c224:	1af6      	subs	r6, r6, r3
 800c226:	1ad3      	subs	r3, r2, r3
 800c228:	9308      	str	r3, [sp, #32]
 800c22a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c22c:	b1f3      	cbz	r3, 800c26c <_dtoa_r+0x78c>
 800c22e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c230:	2b00      	cmp	r3, #0
 800c232:	f000 80b7 	beq.w	800c3a4 <_dtoa_r+0x8c4>
 800c236:	b18c      	cbz	r4, 800c25c <_dtoa_r+0x77c>
 800c238:	4629      	mov	r1, r5
 800c23a:	4622      	mov	r2, r4
 800c23c:	4658      	mov	r0, fp
 800c23e:	f001 f85d 	bl	800d2fc <__pow5mult>
 800c242:	464a      	mov	r2, r9
 800c244:	4601      	mov	r1, r0
 800c246:	4605      	mov	r5, r0
 800c248:	4658      	mov	r0, fp
 800c24a:	f000 ffad 	bl	800d1a8 <__multiply>
 800c24e:	4649      	mov	r1, r9
 800c250:	9004      	str	r0, [sp, #16]
 800c252:	4658      	mov	r0, fp
 800c254:	f000 fe94 	bl	800cf80 <_Bfree>
 800c258:	9b04      	ldr	r3, [sp, #16]
 800c25a:	4699      	mov	r9, r3
 800c25c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c25e:	1b1a      	subs	r2, r3, r4
 800c260:	d004      	beq.n	800c26c <_dtoa_r+0x78c>
 800c262:	4649      	mov	r1, r9
 800c264:	4658      	mov	r0, fp
 800c266:	f001 f849 	bl	800d2fc <__pow5mult>
 800c26a:	4681      	mov	r9, r0
 800c26c:	2101      	movs	r1, #1
 800c26e:	4658      	mov	r0, fp
 800c270:	f000 ff84 	bl	800d17c <__i2b>
 800c274:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c276:	4604      	mov	r4, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	f000 81cf 	beq.w	800c61c <_dtoa_r+0xb3c>
 800c27e:	461a      	mov	r2, r3
 800c280:	4601      	mov	r1, r0
 800c282:	4658      	mov	r0, fp
 800c284:	f001 f83a 	bl	800d2fc <__pow5mult>
 800c288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	4604      	mov	r4, r0
 800c28e:	f300 8095 	bgt.w	800c3bc <_dtoa_r+0x8dc>
 800c292:	9b02      	ldr	r3, [sp, #8]
 800c294:	2b00      	cmp	r3, #0
 800c296:	f040 8087 	bne.w	800c3a8 <_dtoa_r+0x8c8>
 800c29a:	9b03      	ldr	r3, [sp, #12]
 800c29c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	f040 8089 	bne.w	800c3b8 <_dtoa_r+0x8d8>
 800c2a6:	9b03      	ldr	r3, [sp, #12]
 800c2a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c2ac:	0d1b      	lsrs	r3, r3, #20
 800c2ae:	051b      	lsls	r3, r3, #20
 800c2b0:	b12b      	cbz	r3, 800c2be <_dtoa_r+0x7de>
 800c2b2:	9b08      	ldr	r3, [sp, #32]
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	9308      	str	r3, [sp, #32]
 800c2b8:	f108 0801 	add.w	r8, r8, #1
 800c2bc:	2301      	movs	r3, #1
 800c2be:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	f000 81b0 	beq.w	800c628 <_dtoa_r+0xb48>
 800c2c8:	6923      	ldr	r3, [r4, #16]
 800c2ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c2ce:	6918      	ldr	r0, [r3, #16]
 800c2d0:	f000 ff08 	bl	800d0e4 <__hi0bits>
 800c2d4:	f1c0 0020 	rsb	r0, r0, #32
 800c2d8:	9b08      	ldr	r3, [sp, #32]
 800c2da:	4418      	add	r0, r3
 800c2dc:	f010 001f 	ands.w	r0, r0, #31
 800c2e0:	d077      	beq.n	800c3d2 <_dtoa_r+0x8f2>
 800c2e2:	f1c0 0320 	rsb	r3, r0, #32
 800c2e6:	2b04      	cmp	r3, #4
 800c2e8:	dd6b      	ble.n	800c3c2 <_dtoa_r+0x8e2>
 800c2ea:	9b08      	ldr	r3, [sp, #32]
 800c2ec:	f1c0 001c 	rsb	r0, r0, #28
 800c2f0:	4403      	add	r3, r0
 800c2f2:	4480      	add	r8, r0
 800c2f4:	4406      	add	r6, r0
 800c2f6:	9308      	str	r3, [sp, #32]
 800c2f8:	f1b8 0f00 	cmp.w	r8, #0
 800c2fc:	dd05      	ble.n	800c30a <_dtoa_r+0x82a>
 800c2fe:	4649      	mov	r1, r9
 800c300:	4642      	mov	r2, r8
 800c302:	4658      	mov	r0, fp
 800c304:	f001 f854 	bl	800d3b0 <__lshift>
 800c308:	4681      	mov	r9, r0
 800c30a:	9b08      	ldr	r3, [sp, #32]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	dd05      	ble.n	800c31c <_dtoa_r+0x83c>
 800c310:	4621      	mov	r1, r4
 800c312:	461a      	mov	r2, r3
 800c314:	4658      	mov	r0, fp
 800c316:	f001 f84b 	bl	800d3b0 <__lshift>
 800c31a:	4604      	mov	r4, r0
 800c31c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d059      	beq.n	800c3d6 <_dtoa_r+0x8f6>
 800c322:	4621      	mov	r1, r4
 800c324:	4648      	mov	r0, r9
 800c326:	f001 f8af 	bl	800d488 <__mcmp>
 800c32a:	2800      	cmp	r0, #0
 800c32c:	da53      	bge.n	800c3d6 <_dtoa_r+0x8f6>
 800c32e:	1e7b      	subs	r3, r7, #1
 800c330:	9304      	str	r3, [sp, #16]
 800c332:	4649      	mov	r1, r9
 800c334:	2300      	movs	r3, #0
 800c336:	220a      	movs	r2, #10
 800c338:	4658      	mov	r0, fp
 800c33a:	f000 fe43 	bl	800cfc4 <__multadd>
 800c33e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c340:	4681      	mov	r9, r0
 800c342:	2b00      	cmp	r3, #0
 800c344:	f000 8172 	beq.w	800c62c <_dtoa_r+0xb4c>
 800c348:	2300      	movs	r3, #0
 800c34a:	4629      	mov	r1, r5
 800c34c:	220a      	movs	r2, #10
 800c34e:	4658      	mov	r0, fp
 800c350:	f000 fe38 	bl	800cfc4 <__multadd>
 800c354:	9b00      	ldr	r3, [sp, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	4605      	mov	r5, r0
 800c35a:	dc67      	bgt.n	800c42c <_dtoa_r+0x94c>
 800c35c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c35e:	2b02      	cmp	r3, #2
 800c360:	dc41      	bgt.n	800c3e6 <_dtoa_r+0x906>
 800c362:	e063      	b.n	800c42c <_dtoa_r+0x94c>
 800c364:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c366:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c36a:	e746      	b.n	800c1fa <_dtoa_r+0x71a>
 800c36c:	9b07      	ldr	r3, [sp, #28]
 800c36e:	1e5c      	subs	r4, r3, #1
 800c370:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c372:	42a3      	cmp	r3, r4
 800c374:	bfbf      	itttt	lt
 800c376:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c378:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c37a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c37c:	1ae3      	sublt	r3, r4, r3
 800c37e:	bfb4      	ite	lt
 800c380:	18d2      	addlt	r2, r2, r3
 800c382:	1b1c      	subge	r4, r3, r4
 800c384:	9b07      	ldr	r3, [sp, #28]
 800c386:	bfbc      	itt	lt
 800c388:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c38a:	2400      	movlt	r4, #0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	bfb5      	itete	lt
 800c390:	eba8 0603 	sublt.w	r6, r8, r3
 800c394:	9b07      	ldrge	r3, [sp, #28]
 800c396:	2300      	movlt	r3, #0
 800c398:	4646      	movge	r6, r8
 800c39a:	e730      	b.n	800c1fe <_dtoa_r+0x71e>
 800c39c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c39e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c3a0:	4646      	mov	r6, r8
 800c3a2:	e735      	b.n	800c210 <_dtoa_r+0x730>
 800c3a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c3a6:	e75c      	b.n	800c262 <_dtoa_r+0x782>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	e788      	b.n	800c2be <_dtoa_r+0x7de>
 800c3ac:	3fe00000 	.word	0x3fe00000
 800c3b0:	40240000 	.word	0x40240000
 800c3b4:	40140000 	.word	0x40140000
 800c3b8:	9b02      	ldr	r3, [sp, #8]
 800c3ba:	e780      	b.n	800c2be <_dtoa_r+0x7de>
 800c3bc:	2300      	movs	r3, #0
 800c3be:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3c0:	e782      	b.n	800c2c8 <_dtoa_r+0x7e8>
 800c3c2:	d099      	beq.n	800c2f8 <_dtoa_r+0x818>
 800c3c4:	9a08      	ldr	r2, [sp, #32]
 800c3c6:	331c      	adds	r3, #28
 800c3c8:	441a      	add	r2, r3
 800c3ca:	4498      	add	r8, r3
 800c3cc:	441e      	add	r6, r3
 800c3ce:	9208      	str	r2, [sp, #32]
 800c3d0:	e792      	b.n	800c2f8 <_dtoa_r+0x818>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	e7f6      	b.n	800c3c4 <_dtoa_r+0x8e4>
 800c3d6:	9b07      	ldr	r3, [sp, #28]
 800c3d8:	9704      	str	r7, [sp, #16]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	dc20      	bgt.n	800c420 <_dtoa_r+0x940>
 800c3de:	9300      	str	r3, [sp, #0]
 800c3e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3e2:	2b02      	cmp	r3, #2
 800c3e4:	dd1e      	ble.n	800c424 <_dtoa_r+0x944>
 800c3e6:	9b00      	ldr	r3, [sp, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	f47f aec0 	bne.w	800c16e <_dtoa_r+0x68e>
 800c3ee:	4621      	mov	r1, r4
 800c3f0:	2205      	movs	r2, #5
 800c3f2:	4658      	mov	r0, fp
 800c3f4:	f000 fde6 	bl	800cfc4 <__multadd>
 800c3f8:	4601      	mov	r1, r0
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	4648      	mov	r0, r9
 800c3fe:	f001 f843 	bl	800d488 <__mcmp>
 800c402:	2800      	cmp	r0, #0
 800c404:	f77f aeb3 	ble.w	800c16e <_dtoa_r+0x68e>
 800c408:	4656      	mov	r6, sl
 800c40a:	2331      	movs	r3, #49	@ 0x31
 800c40c:	f806 3b01 	strb.w	r3, [r6], #1
 800c410:	9b04      	ldr	r3, [sp, #16]
 800c412:	3301      	adds	r3, #1
 800c414:	9304      	str	r3, [sp, #16]
 800c416:	e6ae      	b.n	800c176 <_dtoa_r+0x696>
 800c418:	9c07      	ldr	r4, [sp, #28]
 800c41a:	9704      	str	r7, [sp, #16]
 800c41c:	4625      	mov	r5, r4
 800c41e:	e7f3      	b.n	800c408 <_dtoa_r+0x928>
 800c420:	9b07      	ldr	r3, [sp, #28]
 800c422:	9300      	str	r3, [sp, #0]
 800c424:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c426:	2b00      	cmp	r3, #0
 800c428:	f000 8104 	beq.w	800c634 <_dtoa_r+0xb54>
 800c42c:	2e00      	cmp	r6, #0
 800c42e:	dd05      	ble.n	800c43c <_dtoa_r+0x95c>
 800c430:	4629      	mov	r1, r5
 800c432:	4632      	mov	r2, r6
 800c434:	4658      	mov	r0, fp
 800c436:	f000 ffbb 	bl	800d3b0 <__lshift>
 800c43a:	4605      	mov	r5, r0
 800c43c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d05a      	beq.n	800c4f8 <_dtoa_r+0xa18>
 800c442:	6869      	ldr	r1, [r5, #4]
 800c444:	4658      	mov	r0, fp
 800c446:	f000 fd5b 	bl	800cf00 <_Balloc>
 800c44a:	4606      	mov	r6, r0
 800c44c:	b928      	cbnz	r0, 800c45a <_dtoa_r+0x97a>
 800c44e:	4b84      	ldr	r3, [pc, #528]	@ (800c660 <_dtoa_r+0xb80>)
 800c450:	4602      	mov	r2, r0
 800c452:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c456:	f7ff bb5a 	b.w	800bb0e <_dtoa_r+0x2e>
 800c45a:	692a      	ldr	r2, [r5, #16]
 800c45c:	3202      	adds	r2, #2
 800c45e:	0092      	lsls	r2, r2, #2
 800c460:	f105 010c 	add.w	r1, r5, #12
 800c464:	300c      	adds	r0, #12
 800c466:	f7ff fa78 	bl	800b95a <memcpy>
 800c46a:	2201      	movs	r2, #1
 800c46c:	4631      	mov	r1, r6
 800c46e:	4658      	mov	r0, fp
 800c470:	f000 ff9e 	bl	800d3b0 <__lshift>
 800c474:	f10a 0301 	add.w	r3, sl, #1
 800c478:	9307      	str	r3, [sp, #28]
 800c47a:	9b00      	ldr	r3, [sp, #0]
 800c47c:	4453      	add	r3, sl
 800c47e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c480:	9b02      	ldr	r3, [sp, #8]
 800c482:	f003 0301 	and.w	r3, r3, #1
 800c486:	462f      	mov	r7, r5
 800c488:	930a      	str	r3, [sp, #40]	@ 0x28
 800c48a:	4605      	mov	r5, r0
 800c48c:	9b07      	ldr	r3, [sp, #28]
 800c48e:	4621      	mov	r1, r4
 800c490:	3b01      	subs	r3, #1
 800c492:	4648      	mov	r0, r9
 800c494:	9300      	str	r3, [sp, #0]
 800c496:	f7ff fa9b 	bl	800b9d0 <quorem>
 800c49a:	4639      	mov	r1, r7
 800c49c:	9002      	str	r0, [sp, #8]
 800c49e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c4a2:	4648      	mov	r0, r9
 800c4a4:	f000 fff0 	bl	800d488 <__mcmp>
 800c4a8:	462a      	mov	r2, r5
 800c4aa:	9008      	str	r0, [sp, #32]
 800c4ac:	4621      	mov	r1, r4
 800c4ae:	4658      	mov	r0, fp
 800c4b0:	f001 f806 	bl	800d4c0 <__mdiff>
 800c4b4:	68c2      	ldr	r2, [r0, #12]
 800c4b6:	4606      	mov	r6, r0
 800c4b8:	bb02      	cbnz	r2, 800c4fc <_dtoa_r+0xa1c>
 800c4ba:	4601      	mov	r1, r0
 800c4bc:	4648      	mov	r0, r9
 800c4be:	f000 ffe3 	bl	800d488 <__mcmp>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	4631      	mov	r1, r6
 800c4c6:	4658      	mov	r0, fp
 800c4c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c4ca:	f000 fd59 	bl	800cf80 <_Bfree>
 800c4ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c4d2:	9e07      	ldr	r6, [sp, #28]
 800c4d4:	ea43 0102 	orr.w	r1, r3, r2
 800c4d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4da:	4319      	orrs	r1, r3
 800c4dc:	d110      	bne.n	800c500 <_dtoa_r+0xa20>
 800c4de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c4e2:	d029      	beq.n	800c538 <_dtoa_r+0xa58>
 800c4e4:	9b08      	ldr	r3, [sp, #32]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	dd02      	ble.n	800c4f0 <_dtoa_r+0xa10>
 800c4ea:	9b02      	ldr	r3, [sp, #8]
 800c4ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c4f0:	9b00      	ldr	r3, [sp, #0]
 800c4f2:	f883 8000 	strb.w	r8, [r3]
 800c4f6:	e63f      	b.n	800c178 <_dtoa_r+0x698>
 800c4f8:	4628      	mov	r0, r5
 800c4fa:	e7bb      	b.n	800c474 <_dtoa_r+0x994>
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	e7e1      	b.n	800c4c4 <_dtoa_r+0x9e4>
 800c500:	9b08      	ldr	r3, [sp, #32]
 800c502:	2b00      	cmp	r3, #0
 800c504:	db04      	blt.n	800c510 <_dtoa_r+0xa30>
 800c506:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c508:	430b      	orrs	r3, r1
 800c50a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c50c:	430b      	orrs	r3, r1
 800c50e:	d120      	bne.n	800c552 <_dtoa_r+0xa72>
 800c510:	2a00      	cmp	r2, #0
 800c512:	dded      	ble.n	800c4f0 <_dtoa_r+0xa10>
 800c514:	4649      	mov	r1, r9
 800c516:	2201      	movs	r2, #1
 800c518:	4658      	mov	r0, fp
 800c51a:	f000 ff49 	bl	800d3b0 <__lshift>
 800c51e:	4621      	mov	r1, r4
 800c520:	4681      	mov	r9, r0
 800c522:	f000 ffb1 	bl	800d488 <__mcmp>
 800c526:	2800      	cmp	r0, #0
 800c528:	dc03      	bgt.n	800c532 <_dtoa_r+0xa52>
 800c52a:	d1e1      	bne.n	800c4f0 <_dtoa_r+0xa10>
 800c52c:	f018 0f01 	tst.w	r8, #1
 800c530:	d0de      	beq.n	800c4f0 <_dtoa_r+0xa10>
 800c532:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c536:	d1d8      	bne.n	800c4ea <_dtoa_r+0xa0a>
 800c538:	9a00      	ldr	r2, [sp, #0]
 800c53a:	2339      	movs	r3, #57	@ 0x39
 800c53c:	7013      	strb	r3, [r2, #0]
 800c53e:	4633      	mov	r3, r6
 800c540:	461e      	mov	r6, r3
 800c542:	3b01      	subs	r3, #1
 800c544:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c548:	2a39      	cmp	r2, #57	@ 0x39
 800c54a:	d052      	beq.n	800c5f2 <_dtoa_r+0xb12>
 800c54c:	3201      	adds	r2, #1
 800c54e:	701a      	strb	r2, [r3, #0]
 800c550:	e612      	b.n	800c178 <_dtoa_r+0x698>
 800c552:	2a00      	cmp	r2, #0
 800c554:	dd07      	ble.n	800c566 <_dtoa_r+0xa86>
 800c556:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c55a:	d0ed      	beq.n	800c538 <_dtoa_r+0xa58>
 800c55c:	9a00      	ldr	r2, [sp, #0]
 800c55e:	f108 0301 	add.w	r3, r8, #1
 800c562:	7013      	strb	r3, [r2, #0]
 800c564:	e608      	b.n	800c178 <_dtoa_r+0x698>
 800c566:	9b07      	ldr	r3, [sp, #28]
 800c568:	9a07      	ldr	r2, [sp, #28]
 800c56a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c56e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c570:	4293      	cmp	r3, r2
 800c572:	d028      	beq.n	800c5c6 <_dtoa_r+0xae6>
 800c574:	4649      	mov	r1, r9
 800c576:	2300      	movs	r3, #0
 800c578:	220a      	movs	r2, #10
 800c57a:	4658      	mov	r0, fp
 800c57c:	f000 fd22 	bl	800cfc4 <__multadd>
 800c580:	42af      	cmp	r7, r5
 800c582:	4681      	mov	r9, r0
 800c584:	f04f 0300 	mov.w	r3, #0
 800c588:	f04f 020a 	mov.w	r2, #10
 800c58c:	4639      	mov	r1, r7
 800c58e:	4658      	mov	r0, fp
 800c590:	d107      	bne.n	800c5a2 <_dtoa_r+0xac2>
 800c592:	f000 fd17 	bl	800cfc4 <__multadd>
 800c596:	4607      	mov	r7, r0
 800c598:	4605      	mov	r5, r0
 800c59a:	9b07      	ldr	r3, [sp, #28]
 800c59c:	3301      	adds	r3, #1
 800c59e:	9307      	str	r3, [sp, #28]
 800c5a0:	e774      	b.n	800c48c <_dtoa_r+0x9ac>
 800c5a2:	f000 fd0f 	bl	800cfc4 <__multadd>
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	4607      	mov	r7, r0
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	220a      	movs	r2, #10
 800c5ae:	4658      	mov	r0, fp
 800c5b0:	f000 fd08 	bl	800cfc4 <__multadd>
 800c5b4:	4605      	mov	r5, r0
 800c5b6:	e7f0      	b.n	800c59a <_dtoa_r+0xaba>
 800c5b8:	9b00      	ldr	r3, [sp, #0]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	bfcc      	ite	gt
 800c5be:	461e      	movgt	r6, r3
 800c5c0:	2601      	movle	r6, #1
 800c5c2:	4456      	add	r6, sl
 800c5c4:	2700      	movs	r7, #0
 800c5c6:	4649      	mov	r1, r9
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	4658      	mov	r0, fp
 800c5cc:	f000 fef0 	bl	800d3b0 <__lshift>
 800c5d0:	4621      	mov	r1, r4
 800c5d2:	4681      	mov	r9, r0
 800c5d4:	f000 ff58 	bl	800d488 <__mcmp>
 800c5d8:	2800      	cmp	r0, #0
 800c5da:	dcb0      	bgt.n	800c53e <_dtoa_r+0xa5e>
 800c5dc:	d102      	bne.n	800c5e4 <_dtoa_r+0xb04>
 800c5de:	f018 0f01 	tst.w	r8, #1
 800c5e2:	d1ac      	bne.n	800c53e <_dtoa_r+0xa5e>
 800c5e4:	4633      	mov	r3, r6
 800c5e6:	461e      	mov	r6, r3
 800c5e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5ec:	2a30      	cmp	r2, #48	@ 0x30
 800c5ee:	d0fa      	beq.n	800c5e6 <_dtoa_r+0xb06>
 800c5f0:	e5c2      	b.n	800c178 <_dtoa_r+0x698>
 800c5f2:	459a      	cmp	sl, r3
 800c5f4:	d1a4      	bne.n	800c540 <_dtoa_r+0xa60>
 800c5f6:	9b04      	ldr	r3, [sp, #16]
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	9304      	str	r3, [sp, #16]
 800c5fc:	2331      	movs	r3, #49	@ 0x31
 800c5fe:	f88a 3000 	strb.w	r3, [sl]
 800c602:	e5b9      	b.n	800c178 <_dtoa_r+0x698>
 800c604:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c606:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c664 <_dtoa_r+0xb84>
 800c60a:	b11b      	cbz	r3, 800c614 <_dtoa_r+0xb34>
 800c60c:	f10a 0308 	add.w	r3, sl, #8
 800c610:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c612:	6013      	str	r3, [r2, #0]
 800c614:	4650      	mov	r0, sl
 800c616:	b019      	add	sp, #100	@ 0x64
 800c618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c61c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c61e:	2b01      	cmp	r3, #1
 800c620:	f77f ae37 	ble.w	800c292 <_dtoa_r+0x7b2>
 800c624:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c626:	930a      	str	r3, [sp, #40]	@ 0x28
 800c628:	2001      	movs	r0, #1
 800c62a:	e655      	b.n	800c2d8 <_dtoa_r+0x7f8>
 800c62c:	9b00      	ldr	r3, [sp, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	f77f aed6 	ble.w	800c3e0 <_dtoa_r+0x900>
 800c634:	4656      	mov	r6, sl
 800c636:	4621      	mov	r1, r4
 800c638:	4648      	mov	r0, r9
 800c63a:	f7ff f9c9 	bl	800b9d0 <quorem>
 800c63e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c642:	f806 8b01 	strb.w	r8, [r6], #1
 800c646:	9b00      	ldr	r3, [sp, #0]
 800c648:	eba6 020a 	sub.w	r2, r6, sl
 800c64c:	4293      	cmp	r3, r2
 800c64e:	ddb3      	ble.n	800c5b8 <_dtoa_r+0xad8>
 800c650:	4649      	mov	r1, r9
 800c652:	2300      	movs	r3, #0
 800c654:	220a      	movs	r2, #10
 800c656:	4658      	mov	r0, fp
 800c658:	f000 fcb4 	bl	800cfc4 <__multadd>
 800c65c:	4681      	mov	r9, r0
 800c65e:	e7ea      	b.n	800c636 <_dtoa_r+0xb56>
 800c660:	0800e841 	.word	0x0800e841
 800c664:	0800e7dc 	.word	0x0800e7dc

0800c668 <_free_r>:
 800c668:	b538      	push	{r3, r4, r5, lr}
 800c66a:	4605      	mov	r5, r0
 800c66c:	2900      	cmp	r1, #0
 800c66e:	d041      	beq.n	800c6f4 <_free_r+0x8c>
 800c670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c674:	1f0c      	subs	r4, r1, #4
 800c676:	2b00      	cmp	r3, #0
 800c678:	bfb8      	it	lt
 800c67a:	18e4      	addlt	r4, r4, r3
 800c67c:	f000 fc34 	bl	800cee8 <__malloc_lock>
 800c680:	4a1d      	ldr	r2, [pc, #116]	@ (800c6f8 <_free_r+0x90>)
 800c682:	6813      	ldr	r3, [r2, #0]
 800c684:	b933      	cbnz	r3, 800c694 <_free_r+0x2c>
 800c686:	6063      	str	r3, [r4, #4]
 800c688:	6014      	str	r4, [r2, #0]
 800c68a:	4628      	mov	r0, r5
 800c68c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c690:	f000 bc30 	b.w	800cef4 <__malloc_unlock>
 800c694:	42a3      	cmp	r3, r4
 800c696:	d908      	bls.n	800c6aa <_free_r+0x42>
 800c698:	6820      	ldr	r0, [r4, #0]
 800c69a:	1821      	adds	r1, r4, r0
 800c69c:	428b      	cmp	r3, r1
 800c69e:	bf01      	itttt	eq
 800c6a0:	6819      	ldreq	r1, [r3, #0]
 800c6a2:	685b      	ldreq	r3, [r3, #4]
 800c6a4:	1809      	addeq	r1, r1, r0
 800c6a6:	6021      	streq	r1, [r4, #0]
 800c6a8:	e7ed      	b.n	800c686 <_free_r+0x1e>
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	b10b      	cbz	r3, 800c6b4 <_free_r+0x4c>
 800c6b0:	42a3      	cmp	r3, r4
 800c6b2:	d9fa      	bls.n	800c6aa <_free_r+0x42>
 800c6b4:	6811      	ldr	r1, [r2, #0]
 800c6b6:	1850      	adds	r0, r2, r1
 800c6b8:	42a0      	cmp	r0, r4
 800c6ba:	d10b      	bne.n	800c6d4 <_free_r+0x6c>
 800c6bc:	6820      	ldr	r0, [r4, #0]
 800c6be:	4401      	add	r1, r0
 800c6c0:	1850      	adds	r0, r2, r1
 800c6c2:	4283      	cmp	r3, r0
 800c6c4:	6011      	str	r1, [r2, #0]
 800c6c6:	d1e0      	bne.n	800c68a <_free_r+0x22>
 800c6c8:	6818      	ldr	r0, [r3, #0]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	6053      	str	r3, [r2, #4]
 800c6ce:	4408      	add	r0, r1
 800c6d0:	6010      	str	r0, [r2, #0]
 800c6d2:	e7da      	b.n	800c68a <_free_r+0x22>
 800c6d4:	d902      	bls.n	800c6dc <_free_r+0x74>
 800c6d6:	230c      	movs	r3, #12
 800c6d8:	602b      	str	r3, [r5, #0]
 800c6da:	e7d6      	b.n	800c68a <_free_r+0x22>
 800c6dc:	6820      	ldr	r0, [r4, #0]
 800c6de:	1821      	adds	r1, r4, r0
 800c6e0:	428b      	cmp	r3, r1
 800c6e2:	bf04      	itt	eq
 800c6e4:	6819      	ldreq	r1, [r3, #0]
 800c6e6:	685b      	ldreq	r3, [r3, #4]
 800c6e8:	6063      	str	r3, [r4, #4]
 800c6ea:	bf04      	itt	eq
 800c6ec:	1809      	addeq	r1, r1, r0
 800c6ee:	6021      	streq	r1, [r4, #0]
 800c6f0:	6054      	str	r4, [r2, #4]
 800c6f2:	e7ca      	b.n	800c68a <_free_r+0x22>
 800c6f4:	bd38      	pop	{r3, r4, r5, pc}
 800c6f6:	bf00      	nop
 800c6f8:	200049c8 	.word	0x200049c8

0800c6fc <rshift>:
 800c6fc:	6903      	ldr	r3, [r0, #16]
 800c6fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c702:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c706:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c70a:	f100 0414 	add.w	r4, r0, #20
 800c70e:	dd45      	ble.n	800c79c <rshift+0xa0>
 800c710:	f011 011f 	ands.w	r1, r1, #31
 800c714:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c718:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c71c:	d10c      	bne.n	800c738 <rshift+0x3c>
 800c71e:	f100 0710 	add.w	r7, r0, #16
 800c722:	4629      	mov	r1, r5
 800c724:	42b1      	cmp	r1, r6
 800c726:	d334      	bcc.n	800c792 <rshift+0x96>
 800c728:	1a9b      	subs	r3, r3, r2
 800c72a:	009b      	lsls	r3, r3, #2
 800c72c:	1eea      	subs	r2, r5, #3
 800c72e:	4296      	cmp	r6, r2
 800c730:	bf38      	it	cc
 800c732:	2300      	movcc	r3, #0
 800c734:	4423      	add	r3, r4
 800c736:	e015      	b.n	800c764 <rshift+0x68>
 800c738:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c73c:	f1c1 0820 	rsb	r8, r1, #32
 800c740:	40cf      	lsrs	r7, r1
 800c742:	f105 0e04 	add.w	lr, r5, #4
 800c746:	46a1      	mov	r9, r4
 800c748:	4576      	cmp	r6, lr
 800c74a:	46f4      	mov	ip, lr
 800c74c:	d815      	bhi.n	800c77a <rshift+0x7e>
 800c74e:	1a9a      	subs	r2, r3, r2
 800c750:	0092      	lsls	r2, r2, #2
 800c752:	3a04      	subs	r2, #4
 800c754:	3501      	adds	r5, #1
 800c756:	42ae      	cmp	r6, r5
 800c758:	bf38      	it	cc
 800c75a:	2200      	movcc	r2, #0
 800c75c:	18a3      	adds	r3, r4, r2
 800c75e:	50a7      	str	r7, [r4, r2]
 800c760:	b107      	cbz	r7, 800c764 <rshift+0x68>
 800c762:	3304      	adds	r3, #4
 800c764:	1b1a      	subs	r2, r3, r4
 800c766:	42a3      	cmp	r3, r4
 800c768:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c76c:	bf08      	it	eq
 800c76e:	2300      	moveq	r3, #0
 800c770:	6102      	str	r2, [r0, #16]
 800c772:	bf08      	it	eq
 800c774:	6143      	streq	r3, [r0, #20]
 800c776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c77a:	f8dc c000 	ldr.w	ip, [ip]
 800c77e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c782:	ea4c 0707 	orr.w	r7, ip, r7
 800c786:	f849 7b04 	str.w	r7, [r9], #4
 800c78a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c78e:	40cf      	lsrs	r7, r1
 800c790:	e7da      	b.n	800c748 <rshift+0x4c>
 800c792:	f851 cb04 	ldr.w	ip, [r1], #4
 800c796:	f847 cf04 	str.w	ip, [r7, #4]!
 800c79a:	e7c3      	b.n	800c724 <rshift+0x28>
 800c79c:	4623      	mov	r3, r4
 800c79e:	e7e1      	b.n	800c764 <rshift+0x68>

0800c7a0 <__hexdig_fun>:
 800c7a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c7a4:	2b09      	cmp	r3, #9
 800c7a6:	d802      	bhi.n	800c7ae <__hexdig_fun+0xe>
 800c7a8:	3820      	subs	r0, #32
 800c7aa:	b2c0      	uxtb	r0, r0
 800c7ac:	4770      	bx	lr
 800c7ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c7b2:	2b05      	cmp	r3, #5
 800c7b4:	d801      	bhi.n	800c7ba <__hexdig_fun+0x1a>
 800c7b6:	3847      	subs	r0, #71	@ 0x47
 800c7b8:	e7f7      	b.n	800c7aa <__hexdig_fun+0xa>
 800c7ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c7be:	2b05      	cmp	r3, #5
 800c7c0:	d801      	bhi.n	800c7c6 <__hexdig_fun+0x26>
 800c7c2:	3827      	subs	r0, #39	@ 0x27
 800c7c4:	e7f1      	b.n	800c7aa <__hexdig_fun+0xa>
 800c7c6:	2000      	movs	r0, #0
 800c7c8:	4770      	bx	lr
	...

0800c7cc <__gethex>:
 800c7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d0:	b085      	sub	sp, #20
 800c7d2:	468a      	mov	sl, r1
 800c7d4:	9302      	str	r3, [sp, #8]
 800c7d6:	680b      	ldr	r3, [r1, #0]
 800c7d8:	9001      	str	r0, [sp, #4]
 800c7da:	4690      	mov	r8, r2
 800c7dc:	1c9c      	adds	r4, r3, #2
 800c7de:	46a1      	mov	r9, r4
 800c7e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c7e4:	2830      	cmp	r0, #48	@ 0x30
 800c7e6:	d0fa      	beq.n	800c7de <__gethex+0x12>
 800c7e8:	eba9 0303 	sub.w	r3, r9, r3
 800c7ec:	f1a3 0b02 	sub.w	fp, r3, #2
 800c7f0:	f7ff ffd6 	bl	800c7a0 <__hexdig_fun>
 800c7f4:	4605      	mov	r5, r0
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d168      	bne.n	800c8cc <__gethex+0x100>
 800c7fa:	49a0      	ldr	r1, [pc, #640]	@ (800ca7c <__gethex+0x2b0>)
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	4648      	mov	r0, r9
 800c800:	f7fe ff91 	bl	800b726 <strncmp>
 800c804:	4607      	mov	r7, r0
 800c806:	2800      	cmp	r0, #0
 800c808:	d167      	bne.n	800c8da <__gethex+0x10e>
 800c80a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c80e:	4626      	mov	r6, r4
 800c810:	f7ff ffc6 	bl	800c7a0 <__hexdig_fun>
 800c814:	2800      	cmp	r0, #0
 800c816:	d062      	beq.n	800c8de <__gethex+0x112>
 800c818:	4623      	mov	r3, r4
 800c81a:	7818      	ldrb	r0, [r3, #0]
 800c81c:	2830      	cmp	r0, #48	@ 0x30
 800c81e:	4699      	mov	r9, r3
 800c820:	f103 0301 	add.w	r3, r3, #1
 800c824:	d0f9      	beq.n	800c81a <__gethex+0x4e>
 800c826:	f7ff ffbb 	bl	800c7a0 <__hexdig_fun>
 800c82a:	fab0 f580 	clz	r5, r0
 800c82e:	096d      	lsrs	r5, r5, #5
 800c830:	f04f 0b01 	mov.w	fp, #1
 800c834:	464a      	mov	r2, r9
 800c836:	4616      	mov	r6, r2
 800c838:	3201      	adds	r2, #1
 800c83a:	7830      	ldrb	r0, [r6, #0]
 800c83c:	f7ff ffb0 	bl	800c7a0 <__hexdig_fun>
 800c840:	2800      	cmp	r0, #0
 800c842:	d1f8      	bne.n	800c836 <__gethex+0x6a>
 800c844:	498d      	ldr	r1, [pc, #564]	@ (800ca7c <__gethex+0x2b0>)
 800c846:	2201      	movs	r2, #1
 800c848:	4630      	mov	r0, r6
 800c84a:	f7fe ff6c 	bl	800b726 <strncmp>
 800c84e:	2800      	cmp	r0, #0
 800c850:	d13f      	bne.n	800c8d2 <__gethex+0x106>
 800c852:	b944      	cbnz	r4, 800c866 <__gethex+0x9a>
 800c854:	1c74      	adds	r4, r6, #1
 800c856:	4622      	mov	r2, r4
 800c858:	4616      	mov	r6, r2
 800c85a:	3201      	adds	r2, #1
 800c85c:	7830      	ldrb	r0, [r6, #0]
 800c85e:	f7ff ff9f 	bl	800c7a0 <__hexdig_fun>
 800c862:	2800      	cmp	r0, #0
 800c864:	d1f8      	bne.n	800c858 <__gethex+0x8c>
 800c866:	1ba4      	subs	r4, r4, r6
 800c868:	00a7      	lsls	r7, r4, #2
 800c86a:	7833      	ldrb	r3, [r6, #0]
 800c86c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c870:	2b50      	cmp	r3, #80	@ 0x50
 800c872:	d13e      	bne.n	800c8f2 <__gethex+0x126>
 800c874:	7873      	ldrb	r3, [r6, #1]
 800c876:	2b2b      	cmp	r3, #43	@ 0x2b
 800c878:	d033      	beq.n	800c8e2 <__gethex+0x116>
 800c87a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c87c:	d034      	beq.n	800c8e8 <__gethex+0x11c>
 800c87e:	1c71      	adds	r1, r6, #1
 800c880:	2400      	movs	r4, #0
 800c882:	7808      	ldrb	r0, [r1, #0]
 800c884:	f7ff ff8c 	bl	800c7a0 <__hexdig_fun>
 800c888:	1e43      	subs	r3, r0, #1
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	2b18      	cmp	r3, #24
 800c88e:	d830      	bhi.n	800c8f2 <__gethex+0x126>
 800c890:	f1a0 0210 	sub.w	r2, r0, #16
 800c894:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c898:	f7ff ff82 	bl	800c7a0 <__hexdig_fun>
 800c89c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c8a0:	fa5f fc8c 	uxtb.w	ip, ip
 800c8a4:	f1bc 0f18 	cmp.w	ip, #24
 800c8a8:	f04f 030a 	mov.w	r3, #10
 800c8ac:	d91e      	bls.n	800c8ec <__gethex+0x120>
 800c8ae:	b104      	cbz	r4, 800c8b2 <__gethex+0xe6>
 800c8b0:	4252      	negs	r2, r2
 800c8b2:	4417      	add	r7, r2
 800c8b4:	f8ca 1000 	str.w	r1, [sl]
 800c8b8:	b1ed      	cbz	r5, 800c8f6 <__gethex+0x12a>
 800c8ba:	f1bb 0f00 	cmp.w	fp, #0
 800c8be:	bf0c      	ite	eq
 800c8c0:	2506      	moveq	r5, #6
 800c8c2:	2500      	movne	r5, #0
 800c8c4:	4628      	mov	r0, r5
 800c8c6:	b005      	add	sp, #20
 800c8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8cc:	2500      	movs	r5, #0
 800c8ce:	462c      	mov	r4, r5
 800c8d0:	e7b0      	b.n	800c834 <__gethex+0x68>
 800c8d2:	2c00      	cmp	r4, #0
 800c8d4:	d1c7      	bne.n	800c866 <__gethex+0x9a>
 800c8d6:	4627      	mov	r7, r4
 800c8d8:	e7c7      	b.n	800c86a <__gethex+0x9e>
 800c8da:	464e      	mov	r6, r9
 800c8dc:	462f      	mov	r7, r5
 800c8de:	2501      	movs	r5, #1
 800c8e0:	e7c3      	b.n	800c86a <__gethex+0x9e>
 800c8e2:	2400      	movs	r4, #0
 800c8e4:	1cb1      	adds	r1, r6, #2
 800c8e6:	e7cc      	b.n	800c882 <__gethex+0xb6>
 800c8e8:	2401      	movs	r4, #1
 800c8ea:	e7fb      	b.n	800c8e4 <__gethex+0x118>
 800c8ec:	fb03 0002 	mla	r0, r3, r2, r0
 800c8f0:	e7ce      	b.n	800c890 <__gethex+0xc4>
 800c8f2:	4631      	mov	r1, r6
 800c8f4:	e7de      	b.n	800c8b4 <__gethex+0xe8>
 800c8f6:	eba6 0309 	sub.w	r3, r6, r9
 800c8fa:	3b01      	subs	r3, #1
 800c8fc:	4629      	mov	r1, r5
 800c8fe:	2b07      	cmp	r3, #7
 800c900:	dc0a      	bgt.n	800c918 <__gethex+0x14c>
 800c902:	9801      	ldr	r0, [sp, #4]
 800c904:	f000 fafc 	bl	800cf00 <_Balloc>
 800c908:	4604      	mov	r4, r0
 800c90a:	b940      	cbnz	r0, 800c91e <__gethex+0x152>
 800c90c:	4b5c      	ldr	r3, [pc, #368]	@ (800ca80 <__gethex+0x2b4>)
 800c90e:	4602      	mov	r2, r0
 800c910:	21e4      	movs	r1, #228	@ 0xe4
 800c912:	485c      	ldr	r0, [pc, #368]	@ (800ca84 <__gethex+0x2b8>)
 800c914:	f7ff f83e 	bl	800b994 <__assert_func>
 800c918:	3101      	adds	r1, #1
 800c91a:	105b      	asrs	r3, r3, #1
 800c91c:	e7ef      	b.n	800c8fe <__gethex+0x132>
 800c91e:	f100 0a14 	add.w	sl, r0, #20
 800c922:	2300      	movs	r3, #0
 800c924:	4655      	mov	r5, sl
 800c926:	469b      	mov	fp, r3
 800c928:	45b1      	cmp	r9, r6
 800c92a:	d337      	bcc.n	800c99c <__gethex+0x1d0>
 800c92c:	f845 bb04 	str.w	fp, [r5], #4
 800c930:	eba5 050a 	sub.w	r5, r5, sl
 800c934:	10ad      	asrs	r5, r5, #2
 800c936:	6125      	str	r5, [r4, #16]
 800c938:	4658      	mov	r0, fp
 800c93a:	f000 fbd3 	bl	800d0e4 <__hi0bits>
 800c93e:	016d      	lsls	r5, r5, #5
 800c940:	f8d8 6000 	ldr.w	r6, [r8]
 800c944:	1a2d      	subs	r5, r5, r0
 800c946:	42b5      	cmp	r5, r6
 800c948:	dd54      	ble.n	800c9f4 <__gethex+0x228>
 800c94a:	1bad      	subs	r5, r5, r6
 800c94c:	4629      	mov	r1, r5
 800c94e:	4620      	mov	r0, r4
 800c950:	f000 ff67 	bl	800d822 <__any_on>
 800c954:	4681      	mov	r9, r0
 800c956:	b178      	cbz	r0, 800c978 <__gethex+0x1ac>
 800c958:	1e6b      	subs	r3, r5, #1
 800c95a:	1159      	asrs	r1, r3, #5
 800c95c:	f003 021f 	and.w	r2, r3, #31
 800c960:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c964:	f04f 0901 	mov.w	r9, #1
 800c968:	fa09 f202 	lsl.w	r2, r9, r2
 800c96c:	420a      	tst	r2, r1
 800c96e:	d003      	beq.n	800c978 <__gethex+0x1ac>
 800c970:	454b      	cmp	r3, r9
 800c972:	dc36      	bgt.n	800c9e2 <__gethex+0x216>
 800c974:	f04f 0902 	mov.w	r9, #2
 800c978:	4629      	mov	r1, r5
 800c97a:	4620      	mov	r0, r4
 800c97c:	f7ff febe 	bl	800c6fc <rshift>
 800c980:	442f      	add	r7, r5
 800c982:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c986:	42bb      	cmp	r3, r7
 800c988:	da42      	bge.n	800ca10 <__gethex+0x244>
 800c98a:	9801      	ldr	r0, [sp, #4]
 800c98c:	4621      	mov	r1, r4
 800c98e:	f000 faf7 	bl	800cf80 <_Bfree>
 800c992:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c994:	2300      	movs	r3, #0
 800c996:	6013      	str	r3, [r2, #0]
 800c998:	25a3      	movs	r5, #163	@ 0xa3
 800c99a:	e793      	b.n	800c8c4 <__gethex+0xf8>
 800c99c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c9a0:	2a2e      	cmp	r2, #46	@ 0x2e
 800c9a2:	d012      	beq.n	800c9ca <__gethex+0x1fe>
 800c9a4:	2b20      	cmp	r3, #32
 800c9a6:	d104      	bne.n	800c9b2 <__gethex+0x1e6>
 800c9a8:	f845 bb04 	str.w	fp, [r5], #4
 800c9ac:	f04f 0b00 	mov.w	fp, #0
 800c9b0:	465b      	mov	r3, fp
 800c9b2:	7830      	ldrb	r0, [r6, #0]
 800c9b4:	9303      	str	r3, [sp, #12]
 800c9b6:	f7ff fef3 	bl	800c7a0 <__hexdig_fun>
 800c9ba:	9b03      	ldr	r3, [sp, #12]
 800c9bc:	f000 000f 	and.w	r0, r0, #15
 800c9c0:	4098      	lsls	r0, r3
 800c9c2:	ea4b 0b00 	orr.w	fp, fp, r0
 800c9c6:	3304      	adds	r3, #4
 800c9c8:	e7ae      	b.n	800c928 <__gethex+0x15c>
 800c9ca:	45b1      	cmp	r9, r6
 800c9cc:	d8ea      	bhi.n	800c9a4 <__gethex+0x1d8>
 800c9ce:	492b      	ldr	r1, [pc, #172]	@ (800ca7c <__gethex+0x2b0>)
 800c9d0:	9303      	str	r3, [sp, #12]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	f7fe fea6 	bl	800b726 <strncmp>
 800c9da:	9b03      	ldr	r3, [sp, #12]
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	d1e1      	bne.n	800c9a4 <__gethex+0x1d8>
 800c9e0:	e7a2      	b.n	800c928 <__gethex+0x15c>
 800c9e2:	1ea9      	subs	r1, r5, #2
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	f000 ff1c 	bl	800d822 <__any_on>
 800c9ea:	2800      	cmp	r0, #0
 800c9ec:	d0c2      	beq.n	800c974 <__gethex+0x1a8>
 800c9ee:	f04f 0903 	mov.w	r9, #3
 800c9f2:	e7c1      	b.n	800c978 <__gethex+0x1ac>
 800c9f4:	da09      	bge.n	800ca0a <__gethex+0x23e>
 800c9f6:	1b75      	subs	r5, r6, r5
 800c9f8:	4621      	mov	r1, r4
 800c9fa:	9801      	ldr	r0, [sp, #4]
 800c9fc:	462a      	mov	r2, r5
 800c9fe:	f000 fcd7 	bl	800d3b0 <__lshift>
 800ca02:	1b7f      	subs	r7, r7, r5
 800ca04:	4604      	mov	r4, r0
 800ca06:	f100 0a14 	add.w	sl, r0, #20
 800ca0a:	f04f 0900 	mov.w	r9, #0
 800ca0e:	e7b8      	b.n	800c982 <__gethex+0x1b6>
 800ca10:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ca14:	42bd      	cmp	r5, r7
 800ca16:	dd6f      	ble.n	800caf8 <__gethex+0x32c>
 800ca18:	1bed      	subs	r5, r5, r7
 800ca1a:	42ae      	cmp	r6, r5
 800ca1c:	dc34      	bgt.n	800ca88 <__gethex+0x2bc>
 800ca1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ca22:	2b02      	cmp	r3, #2
 800ca24:	d022      	beq.n	800ca6c <__gethex+0x2a0>
 800ca26:	2b03      	cmp	r3, #3
 800ca28:	d024      	beq.n	800ca74 <__gethex+0x2a8>
 800ca2a:	2b01      	cmp	r3, #1
 800ca2c:	d115      	bne.n	800ca5a <__gethex+0x28e>
 800ca2e:	42ae      	cmp	r6, r5
 800ca30:	d113      	bne.n	800ca5a <__gethex+0x28e>
 800ca32:	2e01      	cmp	r6, #1
 800ca34:	d10b      	bne.n	800ca4e <__gethex+0x282>
 800ca36:	9a02      	ldr	r2, [sp, #8]
 800ca38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ca3c:	6013      	str	r3, [r2, #0]
 800ca3e:	2301      	movs	r3, #1
 800ca40:	6123      	str	r3, [r4, #16]
 800ca42:	f8ca 3000 	str.w	r3, [sl]
 800ca46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca48:	2562      	movs	r5, #98	@ 0x62
 800ca4a:	601c      	str	r4, [r3, #0]
 800ca4c:	e73a      	b.n	800c8c4 <__gethex+0xf8>
 800ca4e:	1e71      	subs	r1, r6, #1
 800ca50:	4620      	mov	r0, r4
 800ca52:	f000 fee6 	bl	800d822 <__any_on>
 800ca56:	2800      	cmp	r0, #0
 800ca58:	d1ed      	bne.n	800ca36 <__gethex+0x26a>
 800ca5a:	9801      	ldr	r0, [sp, #4]
 800ca5c:	4621      	mov	r1, r4
 800ca5e:	f000 fa8f 	bl	800cf80 <_Bfree>
 800ca62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca64:	2300      	movs	r3, #0
 800ca66:	6013      	str	r3, [r2, #0]
 800ca68:	2550      	movs	r5, #80	@ 0x50
 800ca6a:	e72b      	b.n	800c8c4 <__gethex+0xf8>
 800ca6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1f3      	bne.n	800ca5a <__gethex+0x28e>
 800ca72:	e7e0      	b.n	800ca36 <__gethex+0x26a>
 800ca74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1dd      	bne.n	800ca36 <__gethex+0x26a>
 800ca7a:	e7ee      	b.n	800ca5a <__gethex+0x28e>
 800ca7c:	0800e570 	.word	0x0800e570
 800ca80:	0800e841 	.word	0x0800e841
 800ca84:	0800e852 	.word	0x0800e852
 800ca88:	1e6f      	subs	r7, r5, #1
 800ca8a:	f1b9 0f00 	cmp.w	r9, #0
 800ca8e:	d130      	bne.n	800caf2 <__gethex+0x326>
 800ca90:	b127      	cbz	r7, 800ca9c <__gethex+0x2d0>
 800ca92:	4639      	mov	r1, r7
 800ca94:	4620      	mov	r0, r4
 800ca96:	f000 fec4 	bl	800d822 <__any_on>
 800ca9a:	4681      	mov	r9, r0
 800ca9c:	117a      	asrs	r2, r7, #5
 800ca9e:	2301      	movs	r3, #1
 800caa0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800caa4:	f007 071f 	and.w	r7, r7, #31
 800caa8:	40bb      	lsls	r3, r7
 800caaa:	4213      	tst	r3, r2
 800caac:	4629      	mov	r1, r5
 800caae:	4620      	mov	r0, r4
 800cab0:	bf18      	it	ne
 800cab2:	f049 0902 	orrne.w	r9, r9, #2
 800cab6:	f7ff fe21 	bl	800c6fc <rshift>
 800caba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cabe:	1b76      	subs	r6, r6, r5
 800cac0:	2502      	movs	r5, #2
 800cac2:	f1b9 0f00 	cmp.w	r9, #0
 800cac6:	d047      	beq.n	800cb58 <__gethex+0x38c>
 800cac8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cacc:	2b02      	cmp	r3, #2
 800cace:	d015      	beq.n	800cafc <__gethex+0x330>
 800cad0:	2b03      	cmp	r3, #3
 800cad2:	d017      	beq.n	800cb04 <__gethex+0x338>
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d109      	bne.n	800caec <__gethex+0x320>
 800cad8:	f019 0f02 	tst.w	r9, #2
 800cadc:	d006      	beq.n	800caec <__gethex+0x320>
 800cade:	f8da 3000 	ldr.w	r3, [sl]
 800cae2:	ea49 0903 	orr.w	r9, r9, r3
 800cae6:	f019 0f01 	tst.w	r9, #1
 800caea:	d10e      	bne.n	800cb0a <__gethex+0x33e>
 800caec:	f045 0510 	orr.w	r5, r5, #16
 800caf0:	e032      	b.n	800cb58 <__gethex+0x38c>
 800caf2:	f04f 0901 	mov.w	r9, #1
 800caf6:	e7d1      	b.n	800ca9c <__gethex+0x2d0>
 800caf8:	2501      	movs	r5, #1
 800cafa:	e7e2      	b.n	800cac2 <__gethex+0x2f6>
 800cafc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cafe:	f1c3 0301 	rsb	r3, r3, #1
 800cb02:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cb04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d0f0      	beq.n	800caec <__gethex+0x320>
 800cb0a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cb0e:	f104 0314 	add.w	r3, r4, #20
 800cb12:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cb16:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cb1a:	f04f 0c00 	mov.w	ip, #0
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb24:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cb28:	d01b      	beq.n	800cb62 <__gethex+0x396>
 800cb2a:	3201      	adds	r2, #1
 800cb2c:	6002      	str	r2, [r0, #0]
 800cb2e:	2d02      	cmp	r5, #2
 800cb30:	f104 0314 	add.w	r3, r4, #20
 800cb34:	d13c      	bne.n	800cbb0 <__gethex+0x3e4>
 800cb36:	f8d8 2000 	ldr.w	r2, [r8]
 800cb3a:	3a01      	subs	r2, #1
 800cb3c:	42b2      	cmp	r2, r6
 800cb3e:	d109      	bne.n	800cb54 <__gethex+0x388>
 800cb40:	1171      	asrs	r1, r6, #5
 800cb42:	2201      	movs	r2, #1
 800cb44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cb48:	f006 061f 	and.w	r6, r6, #31
 800cb4c:	fa02 f606 	lsl.w	r6, r2, r6
 800cb50:	421e      	tst	r6, r3
 800cb52:	d13a      	bne.n	800cbca <__gethex+0x3fe>
 800cb54:	f045 0520 	orr.w	r5, r5, #32
 800cb58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb5a:	601c      	str	r4, [r3, #0]
 800cb5c:	9b02      	ldr	r3, [sp, #8]
 800cb5e:	601f      	str	r7, [r3, #0]
 800cb60:	e6b0      	b.n	800c8c4 <__gethex+0xf8>
 800cb62:	4299      	cmp	r1, r3
 800cb64:	f843 cc04 	str.w	ip, [r3, #-4]
 800cb68:	d8d9      	bhi.n	800cb1e <__gethex+0x352>
 800cb6a:	68a3      	ldr	r3, [r4, #8]
 800cb6c:	459b      	cmp	fp, r3
 800cb6e:	db17      	blt.n	800cba0 <__gethex+0x3d4>
 800cb70:	6861      	ldr	r1, [r4, #4]
 800cb72:	9801      	ldr	r0, [sp, #4]
 800cb74:	3101      	adds	r1, #1
 800cb76:	f000 f9c3 	bl	800cf00 <_Balloc>
 800cb7a:	4681      	mov	r9, r0
 800cb7c:	b918      	cbnz	r0, 800cb86 <__gethex+0x3ba>
 800cb7e:	4b1a      	ldr	r3, [pc, #104]	@ (800cbe8 <__gethex+0x41c>)
 800cb80:	4602      	mov	r2, r0
 800cb82:	2184      	movs	r1, #132	@ 0x84
 800cb84:	e6c5      	b.n	800c912 <__gethex+0x146>
 800cb86:	6922      	ldr	r2, [r4, #16]
 800cb88:	3202      	adds	r2, #2
 800cb8a:	f104 010c 	add.w	r1, r4, #12
 800cb8e:	0092      	lsls	r2, r2, #2
 800cb90:	300c      	adds	r0, #12
 800cb92:	f7fe fee2 	bl	800b95a <memcpy>
 800cb96:	4621      	mov	r1, r4
 800cb98:	9801      	ldr	r0, [sp, #4]
 800cb9a:	f000 f9f1 	bl	800cf80 <_Bfree>
 800cb9e:	464c      	mov	r4, r9
 800cba0:	6923      	ldr	r3, [r4, #16]
 800cba2:	1c5a      	adds	r2, r3, #1
 800cba4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cba8:	6122      	str	r2, [r4, #16]
 800cbaa:	2201      	movs	r2, #1
 800cbac:	615a      	str	r2, [r3, #20]
 800cbae:	e7be      	b.n	800cb2e <__gethex+0x362>
 800cbb0:	6922      	ldr	r2, [r4, #16]
 800cbb2:	455a      	cmp	r2, fp
 800cbb4:	dd0b      	ble.n	800cbce <__gethex+0x402>
 800cbb6:	2101      	movs	r1, #1
 800cbb8:	4620      	mov	r0, r4
 800cbba:	f7ff fd9f 	bl	800c6fc <rshift>
 800cbbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cbc2:	3701      	adds	r7, #1
 800cbc4:	42bb      	cmp	r3, r7
 800cbc6:	f6ff aee0 	blt.w	800c98a <__gethex+0x1be>
 800cbca:	2501      	movs	r5, #1
 800cbcc:	e7c2      	b.n	800cb54 <__gethex+0x388>
 800cbce:	f016 061f 	ands.w	r6, r6, #31
 800cbd2:	d0fa      	beq.n	800cbca <__gethex+0x3fe>
 800cbd4:	4453      	add	r3, sl
 800cbd6:	f1c6 0620 	rsb	r6, r6, #32
 800cbda:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cbde:	f000 fa81 	bl	800d0e4 <__hi0bits>
 800cbe2:	42b0      	cmp	r0, r6
 800cbe4:	dbe7      	blt.n	800cbb6 <__gethex+0x3ea>
 800cbe6:	e7f0      	b.n	800cbca <__gethex+0x3fe>
 800cbe8:	0800e841 	.word	0x0800e841

0800cbec <L_shift>:
 800cbec:	f1c2 0208 	rsb	r2, r2, #8
 800cbf0:	0092      	lsls	r2, r2, #2
 800cbf2:	b570      	push	{r4, r5, r6, lr}
 800cbf4:	f1c2 0620 	rsb	r6, r2, #32
 800cbf8:	6843      	ldr	r3, [r0, #4]
 800cbfa:	6804      	ldr	r4, [r0, #0]
 800cbfc:	fa03 f506 	lsl.w	r5, r3, r6
 800cc00:	432c      	orrs	r4, r5
 800cc02:	40d3      	lsrs	r3, r2
 800cc04:	6004      	str	r4, [r0, #0]
 800cc06:	f840 3f04 	str.w	r3, [r0, #4]!
 800cc0a:	4288      	cmp	r0, r1
 800cc0c:	d3f4      	bcc.n	800cbf8 <L_shift+0xc>
 800cc0e:	bd70      	pop	{r4, r5, r6, pc}

0800cc10 <__match>:
 800cc10:	b530      	push	{r4, r5, lr}
 800cc12:	6803      	ldr	r3, [r0, #0]
 800cc14:	3301      	adds	r3, #1
 800cc16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc1a:	b914      	cbnz	r4, 800cc22 <__match+0x12>
 800cc1c:	6003      	str	r3, [r0, #0]
 800cc1e:	2001      	movs	r0, #1
 800cc20:	bd30      	pop	{r4, r5, pc}
 800cc22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc26:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cc2a:	2d19      	cmp	r5, #25
 800cc2c:	bf98      	it	ls
 800cc2e:	3220      	addls	r2, #32
 800cc30:	42a2      	cmp	r2, r4
 800cc32:	d0f0      	beq.n	800cc16 <__match+0x6>
 800cc34:	2000      	movs	r0, #0
 800cc36:	e7f3      	b.n	800cc20 <__match+0x10>

0800cc38 <__hexnan>:
 800cc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc3c:	680b      	ldr	r3, [r1, #0]
 800cc3e:	6801      	ldr	r1, [r0, #0]
 800cc40:	115e      	asrs	r6, r3, #5
 800cc42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cc46:	f013 031f 	ands.w	r3, r3, #31
 800cc4a:	b087      	sub	sp, #28
 800cc4c:	bf18      	it	ne
 800cc4e:	3604      	addne	r6, #4
 800cc50:	2500      	movs	r5, #0
 800cc52:	1f37      	subs	r7, r6, #4
 800cc54:	4682      	mov	sl, r0
 800cc56:	4690      	mov	r8, r2
 800cc58:	9301      	str	r3, [sp, #4]
 800cc5a:	f846 5c04 	str.w	r5, [r6, #-4]
 800cc5e:	46b9      	mov	r9, r7
 800cc60:	463c      	mov	r4, r7
 800cc62:	9502      	str	r5, [sp, #8]
 800cc64:	46ab      	mov	fp, r5
 800cc66:	784a      	ldrb	r2, [r1, #1]
 800cc68:	1c4b      	adds	r3, r1, #1
 800cc6a:	9303      	str	r3, [sp, #12]
 800cc6c:	b342      	cbz	r2, 800ccc0 <__hexnan+0x88>
 800cc6e:	4610      	mov	r0, r2
 800cc70:	9105      	str	r1, [sp, #20]
 800cc72:	9204      	str	r2, [sp, #16]
 800cc74:	f7ff fd94 	bl	800c7a0 <__hexdig_fun>
 800cc78:	2800      	cmp	r0, #0
 800cc7a:	d151      	bne.n	800cd20 <__hexnan+0xe8>
 800cc7c:	9a04      	ldr	r2, [sp, #16]
 800cc7e:	9905      	ldr	r1, [sp, #20]
 800cc80:	2a20      	cmp	r2, #32
 800cc82:	d818      	bhi.n	800ccb6 <__hexnan+0x7e>
 800cc84:	9b02      	ldr	r3, [sp, #8]
 800cc86:	459b      	cmp	fp, r3
 800cc88:	dd13      	ble.n	800ccb2 <__hexnan+0x7a>
 800cc8a:	454c      	cmp	r4, r9
 800cc8c:	d206      	bcs.n	800cc9c <__hexnan+0x64>
 800cc8e:	2d07      	cmp	r5, #7
 800cc90:	dc04      	bgt.n	800cc9c <__hexnan+0x64>
 800cc92:	462a      	mov	r2, r5
 800cc94:	4649      	mov	r1, r9
 800cc96:	4620      	mov	r0, r4
 800cc98:	f7ff ffa8 	bl	800cbec <L_shift>
 800cc9c:	4544      	cmp	r4, r8
 800cc9e:	d952      	bls.n	800cd46 <__hexnan+0x10e>
 800cca0:	2300      	movs	r3, #0
 800cca2:	f1a4 0904 	sub.w	r9, r4, #4
 800cca6:	f844 3c04 	str.w	r3, [r4, #-4]
 800ccaa:	f8cd b008 	str.w	fp, [sp, #8]
 800ccae:	464c      	mov	r4, r9
 800ccb0:	461d      	mov	r5, r3
 800ccb2:	9903      	ldr	r1, [sp, #12]
 800ccb4:	e7d7      	b.n	800cc66 <__hexnan+0x2e>
 800ccb6:	2a29      	cmp	r2, #41	@ 0x29
 800ccb8:	d157      	bne.n	800cd6a <__hexnan+0x132>
 800ccba:	3102      	adds	r1, #2
 800ccbc:	f8ca 1000 	str.w	r1, [sl]
 800ccc0:	f1bb 0f00 	cmp.w	fp, #0
 800ccc4:	d051      	beq.n	800cd6a <__hexnan+0x132>
 800ccc6:	454c      	cmp	r4, r9
 800ccc8:	d206      	bcs.n	800ccd8 <__hexnan+0xa0>
 800ccca:	2d07      	cmp	r5, #7
 800cccc:	dc04      	bgt.n	800ccd8 <__hexnan+0xa0>
 800ccce:	462a      	mov	r2, r5
 800ccd0:	4649      	mov	r1, r9
 800ccd2:	4620      	mov	r0, r4
 800ccd4:	f7ff ff8a 	bl	800cbec <L_shift>
 800ccd8:	4544      	cmp	r4, r8
 800ccda:	d936      	bls.n	800cd4a <__hexnan+0x112>
 800ccdc:	f1a8 0204 	sub.w	r2, r8, #4
 800cce0:	4623      	mov	r3, r4
 800cce2:	f853 1b04 	ldr.w	r1, [r3], #4
 800cce6:	f842 1f04 	str.w	r1, [r2, #4]!
 800ccea:	429f      	cmp	r7, r3
 800ccec:	d2f9      	bcs.n	800cce2 <__hexnan+0xaa>
 800ccee:	1b3b      	subs	r3, r7, r4
 800ccf0:	f023 0303 	bic.w	r3, r3, #3
 800ccf4:	3304      	adds	r3, #4
 800ccf6:	3401      	adds	r4, #1
 800ccf8:	3e03      	subs	r6, #3
 800ccfa:	42b4      	cmp	r4, r6
 800ccfc:	bf88      	it	hi
 800ccfe:	2304      	movhi	r3, #4
 800cd00:	4443      	add	r3, r8
 800cd02:	2200      	movs	r2, #0
 800cd04:	f843 2b04 	str.w	r2, [r3], #4
 800cd08:	429f      	cmp	r7, r3
 800cd0a:	d2fb      	bcs.n	800cd04 <__hexnan+0xcc>
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	b91b      	cbnz	r3, 800cd18 <__hexnan+0xe0>
 800cd10:	4547      	cmp	r7, r8
 800cd12:	d128      	bne.n	800cd66 <__hexnan+0x12e>
 800cd14:	2301      	movs	r3, #1
 800cd16:	603b      	str	r3, [r7, #0]
 800cd18:	2005      	movs	r0, #5
 800cd1a:	b007      	add	sp, #28
 800cd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd20:	3501      	adds	r5, #1
 800cd22:	2d08      	cmp	r5, #8
 800cd24:	f10b 0b01 	add.w	fp, fp, #1
 800cd28:	dd06      	ble.n	800cd38 <__hexnan+0x100>
 800cd2a:	4544      	cmp	r4, r8
 800cd2c:	d9c1      	bls.n	800ccb2 <__hexnan+0x7a>
 800cd2e:	2300      	movs	r3, #0
 800cd30:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd34:	2501      	movs	r5, #1
 800cd36:	3c04      	subs	r4, #4
 800cd38:	6822      	ldr	r2, [r4, #0]
 800cd3a:	f000 000f 	and.w	r0, r0, #15
 800cd3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cd42:	6020      	str	r0, [r4, #0]
 800cd44:	e7b5      	b.n	800ccb2 <__hexnan+0x7a>
 800cd46:	2508      	movs	r5, #8
 800cd48:	e7b3      	b.n	800ccb2 <__hexnan+0x7a>
 800cd4a:	9b01      	ldr	r3, [sp, #4]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d0dd      	beq.n	800cd0c <__hexnan+0xd4>
 800cd50:	f1c3 0320 	rsb	r3, r3, #32
 800cd54:	f04f 32ff 	mov.w	r2, #4294967295
 800cd58:	40da      	lsrs	r2, r3
 800cd5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cd5e:	4013      	ands	r3, r2
 800cd60:	f846 3c04 	str.w	r3, [r6, #-4]
 800cd64:	e7d2      	b.n	800cd0c <__hexnan+0xd4>
 800cd66:	3f04      	subs	r7, #4
 800cd68:	e7d0      	b.n	800cd0c <__hexnan+0xd4>
 800cd6a:	2004      	movs	r0, #4
 800cd6c:	e7d5      	b.n	800cd1a <__hexnan+0xe2>
	...

0800cd70 <malloc>:
 800cd70:	4b02      	ldr	r3, [pc, #8]	@ (800cd7c <malloc+0xc>)
 800cd72:	4601      	mov	r1, r0
 800cd74:	6818      	ldr	r0, [r3, #0]
 800cd76:	f000 b825 	b.w	800cdc4 <_malloc_r>
 800cd7a:	bf00      	nop
 800cd7c:	20000198 	.word	0x20000198

0800cd80 <sbrk_aligned>:
 800cd80:	b570      	push	{r4, r5, r6, lr}
 800cd82:	4e0f      	ldr	r6, [pc, #60]	@ (800cdc0 <sbrk_aligned+0x40>)
 800cd84:	460c      	mov	r4, r1
 800cd86:	6831      	ldr	r1, [r6, #0]
 800cd88:	4605      	mov	r5, r0
 800cd8a:	b911      	cbnz	r1, 800cd92 <sbrk_aligned+0x12>
 800cd8c:	f000 ffa6 	bl	800dcdc <_sbrk_r>
 800cd90:	6030      	str	r0, [r6, #0]
 800cd92:	4621      	mov	r1, r4
 800cd94:	4628      	mov	r0, r5
 800cd96:	f000 ffa1 	bl	800dcdc <_sbrk_r>
 800cd9a:	1c43      	adds	r3, r0, #1
 800cd9c:	d103      	bne.n	800cda6 <sbrk_aligned+0x26>
 800cd9e:	f04f 34ff 	mov.w	r4, #4294967295
 800cda2:	4620      	mov	r0, r4
 800cda4:	bd70      	pop	{r4, r5, r6, pc}
 800cda6:	1cc4      	adds	r4, r0, #3
 800cda8:	f024 0403 	bic.w	r4, r4, #3
 800cdac:	42a0      	cmp	r0, r4
 800cdae:	d0f8      	beq.n	800cda2 <sbrk_aligned+0x22>
 800cdb0:	1a21      	subs	r1, r4, r0
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	f000 ff92 	bl	800dcdc <_sbrk_r>
 800cdb8:	3001      	adds	r0, #1
 800cdba:	d1f2      	bne.n	800cda2 <sbrk_aligned+0x22>
 800cdbc:	e7ef      	b.n	800cd9e <sbrk_aligned+0x1e>
 800cdbe:	bf00      	nop
 800cdc0:	200049c4 	.word	0x200049c4

0800cdc4 <_malloc_r>:
 800cdc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdc8:	1ccd      	adds	r5, r1, #3
 800cdca:	f025 0503 	bic.w	r5, r5, #3
 800cdce:	3508      	adds	r5, #8
 800cdd0:	2d0c      	cmp	r5, #12
 800cdd2:	bf38      	it	cc
 800cdd4:	250c      	movcc	r5, #12
 800cdd6:	2d00      	cmp	r5, #0
 800cdd8:	4606      	mov	r6, r0
 800cdda:	db01      	blt.n	800cde0 <_malloc_r+0x1c>
 800cddc:	42a9      	cmp	r1, r5
 800cdde:	d904      	bls.n	800cdea <_malloc_r+0x26>
 800cde0:	230c      	movs	r3, #12
 800cde2:	6033      	str	r3, [r6, #0]
 800cde4:	2000      	movs	r0, #0
 800cde6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cec0 <_malloc_r+0xfc>
 800cdee:	f000 f87b 	bl	800cee8 <__malloc_lock>
 800cdf2:	f8d8 3000 	ldr.w	r3, [r8]
 800cdf6:	461c      	mov	r4, r3
 800cdf8:	bb44      	cbnz	r4, 800ce4c <_malloc_r+0x88>
 800cdfa:	4629      	mov	r1, r5
 800cdfc:	4630      	mov	r0, r6
 800cdfe:	f7ff ffbf 	bl	800cd80 <sbrk_aligned>
 800ce02:	1c43      	adds	r3, r0, #1
 800ce04:	4604      	mov	r4, r0
 800ce06:	d158      	bne.n	800ceba <_malloc_r+0xf6>
 800ce08:	f8d8 4000 	ldr.w	r4, [r8]
 800ce0c:	4627      	mov	r7, r4
 800ce0e:	2f00      	cmp	r7, #0
 800ce10:	d143      	bne.n	800ce9a <_malloc_r+0xd6>
 800ce12:	2c00      	cmp	r4, #0
 800ce14:	d04b      	beq.n	800ceae <_malloc_r+0xea>
 800ce16:	6823      	ldr	r3, [r4, #0]
 800ce18:	4639      	mov	r1, r7
 800ce1a:	4630      	mov	r0, r6
 800ce1c:	eb04 0903 	add.w	r9, r4, r3
 800ce20:	f000 ff5c 	bl	800dcdc <_sbrk_r>
 800ce24:	4581      	cmp	r9, r0
 800ce26:	d142      	bne.n	800ceae <_malloc_r+0xea>
 800ce28:	6821      	ldr	r1, [r4, #0]
 800ce2a:	1a6d      	subs	r5, r5, r1
 800ce2c:	4629      	mov	r1, r5
 800ce2e:	4630      	mov	r0, r6
 800ce30:	f7ff ffa6 	bl	800cd80 <sbrk_aligned>
 800ce34:	3001      	adds	r0, #1
 800ce36:	d03a      	beq.n	800ceae <_malloc_r+0xea>
 800ce38:	6823      	ldr	r3, [r4, #0]
 800ce3a:	442b      	add	r3, r5
 800ce3c:	6023      	str	r3, [r4, #0]
 800ce3e:	f8d8 3000 	ldr.w	r3, [r8]
 800ce42:	685a      	ldr	r2, [r3, #4]
 800ce44:	bb62      	cbnz	r2, 800cea0 <_malloc_r+0xdc>
 800ce46:	f8c8 7000 	str.w	r7, [r8]
 800ce4a:	e00f      	b.n	800ce6c <_malloc_r+0xa8>
 800ce4c:	6822      	ldr	r2, [r4, #0]
 800ce4e:	1b52      	subs	r2, r2, r5
 800ce50:	d420      	bmi.n	800ce94 <_malloc_r+0xd0>
 800ce52:	2a0b      	cmp	r2, #11
 800ce54:	d917      	bls.n	800ce86 <_malloc_r+0xc2>
 800ce56:	1961      	adds	r1, r4, r5
 800ce58:	42a3      	cmp	r3, r4
 800ce5a:	6025      	str	r5, [r4, #0]
 800ce5c:	bf18      	it	ne
 800ce5e:	6059      	strne	r1, [r3, #4]
 800ce60:	6863      	ldr	r3, [r4, #4]
 800ce62:	bf08      	it	eq
 800ce64:	f8c8 1000 	streq.w	r1, [r8]
 800ce68:	5162      	str	r2, [r4, r5]
 800ce6a:	604b      	str	r3, [r1, #4]
 800ce6c:	4630      	mov	r0, r6
 800ce6e:	f000 f841 	bl	800cef4 <__malloc_unlock>
 800ce72:	f104 000b 	add.w	r0, r4, #11
 800ce76:	1d23      	adds	r3, r4, #4
 800ce78:	f020 0007 	bic.w	r0, r0, #7
 800ce7c:	1ac2      	subs	r2, r0, r3
 800ce7e:	bf1c      	itt	ne
 800ce80:	1a1b      	subne	r3, r3, r0
 800ce82:	50a3      	strne	r3, [r4, r2]
 800ce84:	e7af      	b.n	800cde6 <_malloc_r+0x22>
 800ce86:	6862      	ldr	r2, [r4, #4]
 800ce88:	42a3      	cmp	r3, r4
 800ce8a:	bf0c      	ite	eq
 800ce8c:	f8c8 2000 	streq.w	r2, [r8]
 800ce90:	605a      	strne	r2, [r3, #4]
 800ce92:	e7eb      	b.n	800ce6c <_malloc_r+0xa8>
 800ce94:	4623      	mov	r3, r4
 800ce96:	6864      	ldr	r4, [r4, #4]
 800ce98:	e7ae      	b.n	800cdf8 <_malloc_r+0x34>
 800ce9a:	463c      	mov	r4, r7
 800ce9c:	687f      	ldr	r7, [r7, #4]
 800ce9e:	e7b6      	b.n	800ce0e <_malloc_r+0x4a>
 800cea0:	461a      	mov	r2, r3
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	42a3      	cmp	r3, r4
 800cea6:	d1fb      	bne.n	800cea0 <_malloc_r+0xdc>
 800cea8:	2300      	movs	r3, #0
 800ceaa:	6053      	str	r3, [r2, #4]
 800ceac:	e7de      	b.n	800ce6c <_malloc_r+0xa8>
 800ceae:	230c      	movs	r3, #12
 800ceb0:	6033      	str	r3, [r6, #0]
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	f000 f81e 	bl	800cef4 <__malloc_unlock>
 800ceb8:	e794      	b.n	800cde4 <_malloc_r+0x20>
 800ceba:	6005      	str	r5, [r0, #0]
 800cebc:	e7d6      	b.n	800ce6c <_malloc_r+0xa8>
 800cebe:	bf00      	nop
 800cec0:	200049c8 	.word	0x200049c8

0800cec4 <__ascii_mbtowc>:
 800cec4:	b082      	sub	sp, #8
 800cec6:	b901      	cbnz	r1, 800ceca <__ascii_mbtowc+0x6>
 800cec8:	a901      	add	r1, sp, #4
 800ceca:	b142      	cbz	r2, 800cede <__ascii_mbtowc+0x1a>
 800cecc:	b14b      	cbz	r3, 800cee2 <__ascii_mbtowc+0x1e>
 800cece:	7813      	ldrb	r3, [r2, #0]
 800ced0:	600b      	str	r3, [r1, #0]
 800ced2:	7812      	ldrb	r2, [r2, #0]
 800ced4:	1e10      	subs	r0, r2, #0
 800ced6:	bf18      	it	ne
 800ced8:	2001      	movne	r0, #1
 800ceda:	b002      	add	sp, #8
 800cedc:	4770      	bx	lr
 800cede:	4610      	mov	r0, r2
 800cee0:	e7fb      	b.n	800ceda <__ascii_mbtowc+0x16>
 800cee2:	f06f 0001 	mvn.w	r0, #1
 800cee6:	e7f8      	b.n	800ceda <__ascii_mbtowc+0x16>

0800cee8 <__malloc_lock>:
 800cee8:	4801      	ldr	r0, [pc, #4]	@ (800cef0 <__malloc_lock+0x8>)
 800ceea:	f7fe bd2c 	b.w	800b946 <__retarget_lock_acquire_recursive>
 800ceee:	bf00      	nop
 800cef0:	200049c0 	.word	0x200049c0

0800cef4 <__malloc_unlock>:
 800cef4:	4801      	ldr	r0, [pc, #4]	@ (800cefc <__malloc_unlock+0x8>)
 800cef6:	f7fe bd27 	b.w	800b948 <__retarget_lock_release_recursive>
 800cefa:	bf00      	nop
 800cefc:	200049c0 	.word	0x200049c0

0800cf00 <_Balloc>:
 800cf00:	b570      	push	{r4, r5, r6, lr}
 800cf02:	69c6      	ldr	r6, [r0, #28]
 800cf04:	4604      	mov	r4, r0
 800cf06:	460d      	mov	r5, r1
 800cf08:	b976      	cbnz	r6, 800cf28 <_Balloc+0x28>
 800cf0a:	2010      	movs	r0, #16
 800cf0c:	f7ff ff30 	bl	800cd70 <malloc>
 800cf10:	4602      	mov	r2, r0
 800cf12:	61e0      	str	r0, [r4, #28]
 800cf14:	b920      	cbnz	r0, 800cf20 <_Balloc+0x20>
 800cf16:	4b18      	ldr	r3, [pc, #96]	@ (800cf78 <_Balloc+0x78>)
 800cf18:	4818      	ldr	r0, [pc, #96]	@ (800cf7c <_Balloc+0x7c>)
 800cf1a:	216b      	movs	r1, #107	@ 0x6b
 800cf1c:	f7fe fd3a 	bl	800b994 <__assert_func>
 800cf20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf24:	6006      	str	r6, [r0, #0]
 800cf26:	60c6      	str	r6, [r0, #12]
 800cf28:	69e6      	ldr	r6, [r4, #28]
 800cf2a:	68f3      	ldr	r3, [r6, #12]
 800cf2c:	b183      	cbz	r3, 800cf50 <_Balloc+0x50>
 800cf2e:	69e3      	ldr	r3, [r4, #28]
 800cf30:	68db      	ldr	r3, [r3, #12]
 800cf32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf36:	b9b8      	cbnz	r0, 800cf68 <_Balloc+0x68>
 800cf38:	2101      	movs	r1, #1
 800cf3a:	fa01 f605 	lsl.w	r6, r1, r5
 800cf3e:	1d72      	adds	r2, r6, #5
 800cf40:	0092      	lsls	r2, r2, #2
 800cf42:	4620      	mov	r0, r4
 800cf44:	f000 fee1 	bl	800dd0a <_calloc_r>
 800cf48:	b160      	cbz	r0, 800cf64 <_Balloc+0x64>
 800cf4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf4e:	e00e      	b.n	800cf6e <_Balloc+0x6e>
 800cf50:	2221      	movs	r2, #33	@ 0x21
 800cf52:	2104      	movs	r1, #4
 800cf54:	4620      	mov	r0, r4
 800cf56:	f000 fed8 	bl	800dd0a <_calloc_r>
 800cf5a:	69e3      	ldr	r3, [r4, #28]
 800cf5c:	60f0      	str	r0, [r6, #12]
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d1e4      	bne.n	800cf2e <_Balloc+0x2e>
 800cf64:	2000      	movs	r0, #0
 800cf66:	bd70      	pop	{r4, r5, r6, pc}
 800cf68:	6802      	ldr	r2, [r0, #0]
 800cf6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf6e:	2300      	movs	r3, #0
 800cf70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf74:	e7f7      	b.n	800cf66 <_Balloc+0x66>
 800cf76:	bf00      	nop
 800cf78:	0800e727 	.word	0x0800e727
 800cf7c:	0800e8b2 	.word	0x0800e8b2

0800cf80 <_Bfree>:
 800cf80:	b570      	push	{r4, r5, r6, lr}
 800cf82:	69c6      	ldr	r6, [r0, #28]
 800cf84:	4605      	mov	r5, r0
 800cf86:	460c      	mov	r4, r1
 800cf88:	b976      	cbnz	r6, 800cfa8 <_Bfree+0x28>
 800cf8a:	2010      	movs	r0, #16
 800cf8c:	f7ff fef0 	bl	800cd70 <malloc>
 800cf90:	4602      	mov	r2, r0
 800cf92:	61e8      	str	r0, [r5, #28]
 800cf94:	b920      	cbnz	r0, 800cfa0 <_Bfree+0x20>
 800cf96:	4b09      	ldr	r3, [pc, #36]	@ (800cfbc <_Bfree+0x3c>)
 800cf98:	4809      	ldr	r0, [pc, #36]	@ (800cfc0 <_Bfree+0x40>)
 800cf9a:	218f      	movs	r1, #143	@ 0x8f
 800cf9c:	f7fe fcfa 	bl	800b994 <__assert_func>
 800cfa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfa4:	6006      	str	r6, [r0, #0]
 800cfa6:	60c6      	str	r6, [r0, #12]
 800cfa8:	b13c      	cbz	r4, 800cfba <_Bfree+0x3a>
 800cfaa:	69eb      	ldr	r3, [r5, #28]
 800cfac:	6862      	ldr	r2, [r4, #4]
 800cfae:	68db      	ldr	r3, [r3, #12]
 800cfb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cfb4:	6021      	str	r1, [r4, #0]
 800cfb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cfba:	bd70      	pop	{r4, r5, r6, pc}
 800cfbc:	0800e727 	.word	0x0800e727
 800cfc0:	0800e8b2 	.word	0x0800e8b2

0800cfc4 <__multadd>:
 800cfc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfc8:	690d      	ldr	r5, [r1, #16]
 800cfca:	4607      	mov	r7, r0
 800cfcc:	460c      	mov	r4, r1
 800cfce:	461e      	mov	r6, r3
 800cfd0:	f101 0c14 	add.w	ip, r1, #20
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	f8dc 3000 	ldr.w	r3, [ip]
 800cfda:	b299      	uxth	r1, r3
 800cfdc:	fb02 6101 	mla	r1, r2, r1, r6
 800cfe0:	0c1e      	lsrs	r6, r3, #16
 800cfe2:	0c0b      	lsrs	r3, r1, #16
 800cfe4:	fb02 3306 	mla	r3, r2, r6, r3
 800cfe8:	b289      	uxth	r1, r1
 800cfea:	3001      	adds	r0, #1
 800cfec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cff0:	4285      	cmp	r5, r0
 800cff2:	f84c 1b04 	str.w	r1, [ip], #4
 800cff6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cffa:	dcec      	bgt.n	800cfd6 <__multadd+0x12>
 800cffc:	b30e      	cbz	r6, 800d042 <__multadd+0x7e>
 800cffe:	68a3      	ldr	r3, [r4, #8]
 800d000:	42ab      	cmp	r3, r5
 800d002:	dc19      	bgt.n	800d038 <__multadd+0x74>
 800d004:	6861      	ldr	r1, [r4, #4]
 800d006:	4638      	mov	r0, r7
 800d008:	3101      	adds	r1, #1
 800d00a:	f7ff ff79 	bl	800cf00 <_Balloc>
 800d00e:	4680      	mov	r8, r0
 800d010:	b928      	cbnz	r0, 800d01e <__multadd+0x5a>
 800d012:	4602      	mov	r2, r0
 800d014:	4b0c      	ldr	r3, [pc, #48]	@ (800d048 <__multadd+0x84>)
 800d016:	480d      	ldr	r0, [pc, #52]	@ (800d04c <__multadd+0x88>)
 800d018:	21ba      	movs	r1, #186	@ 0xba
 800d01a:	f7fe fcbb 	bl	800b994 <__assert_func>
 800d01e:	6922      	ldr	r2, [r4, #16]
 800d020:	3202      	adds	r2, #2
 800d022:	f104 010c 	add.w	r1, r4, #12
 800d026:	0092      	lsls	r2, r2, #2
 800d028:	300c      	adds	r0, #12
 800d02a:	f7fe fc96 	bl	800b95a <memcpy>
 800d02e:	4621      	mov	r1, r4
 800d030:	4638      	mov	r0, r7
 800d032:	f7ff ffa5 	bl	800cf80 <_Bfree>
 800d036:	4644      	mov	r4, r8
 800d038:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d03c:	3501      	adds	r5, #1
 800d03e:	615e      	str	r6, [r3, #20]
 800d040:	6125      	str	r5, [r4, #16]
 800d042:	4620      	mov	r0, r4
 800d044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d048:	0800e841 	.word	0x0800e841
 800d04c:	0800e8b2 	.word	0x0800e8b2

0800d050 <__s2b>:
 800d050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d054:	460c      	mov	r4, r1
 800d056:	4615      	mov	r5, r2
 800d058:	461f      	mov	r7, r3
 800d05a:	2209      	movs	r2, #9
 800d05c:	3308      	adds	r3, #8
 800d05e:	4606      	mov	r6, r0
 800d060:	fb93 f3f2 	sdiv	r3, r3, r2
 800d064:	2100      	movs	r1, #0
 800d066:	2201      	movs	r2, #1
 800d068:	429a      	cmp	r2, r3
 800d06a:	db09      	blt.n	800d080 <__s2b+0x30>
 800d06c:	4630      	mov	r0, r6
 800d06e:	f7ff ff47 	bl	800cf00 <_Balloc>
 800d072:	b940      	cbnz	r0, 800d086 <__s2b+0x36>
 800d074:	4602      	mov	r2, r0
 800d076:	4b19      	ldr	r3, [pc, #100]	@ (800d0dc <__s2b+0x8c>)
 800d078:	4819      	ldr	r0, [pc, #100]	@ (800d0e0 <__s2b+0x90>)
 800d07a:	21d3      	movs	r1, #211	@ 0xd3
 800d07c:	f7fe fc8a 	bl	800b994 <__assert_func>
 800d080:	0052      	lsls	r2, r2, #1
 800d082:	3101      	adds	r1, #1
 800d084:	e7f0      	b.n	800d068 <__s2b+0x18>
 800d086:	9b08      	ldr	r3, [sp, #32]
 800d088:	6143      	str	r3, [r0, #20]
 800d08a:	2d09      	cmp	r5, #9
 800d08c:	f04f 0301 	mov.w	r3, #1
 800d090:	6103      	str	r3, [r0, #16]
 800d092:	dd16      	ble.n	800d0c2 <__s2b+0x72>
 800d094:	f104 0909 	add.w	r9, r4, #9
 800d098:	46c8      	mov	r8, r9
 800d09a:	442c      	add	r4, r5
 800d09c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d0a0:	4601      	mov	r1, r0
 800d0a2:	3b30      	subs	r3, #48	@ 0x30
 800d0a4:	220a      	movs	r2, #10
 800d0a6:	4630      	mov	r0, r6
 800d0a8:	f7ff ff8c 	bl	800cfc4 <__multadd>
 800d0ac:	45a0      	cmp	r8, r4
 800d0ae:	d1f5      	bne.n	800d09c <__s2b+0x4c>
 800d0b0:	f1a5 0408 	sub.w	r4, r5, #8
 800d0b4:	444c      	add	r4, r9
 800d0b6:	1b2d      	subs	r5, r5, r4
 800d0b8:	1963      	adds	r3, r4, r5
 800d0ba:	42bb      	cmp	r3, r7
 800d0bc:	db04      	blt.n	800d0c8 <__s2b+0x78>
 800d0be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0c2:	340a      	adds	r4, #10
 800d0c4:	2509      	movs	r5, #9
 800d0c6:	e7f6      	b.n	800d0b6 <__s2b+0x66>
 800d0c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d0cc:	4601      	mov	r1, r0
 800d0ce:	3b30      	subs	r3, #48	@ 0x30
 800d0d0:	220a      	movs	r2, #10
 800d0d2:	4630      	mov	r0, r6
 800d0d4:	f7ff ff76 	bl	800cfc4 <__multadd>
 800d0d8:	e7ee      	b.n	800d0b8 <__s2b+0x68>
 800d0da:	bf00      	nop
 800d0dc:	0800e841 	.word	0x0800e841
 800d0e0:	0800e8b2 	.word	0x0800e8b2

0800d0e4 <__hi0bits>:
 800d0e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	bf36      	itet	cc
 800d0ec:	0403      	lslcc	r3, r0, #16
 800d0ee:	2000      	movcs	r0, #0
 800d0f0:	2010      	movcc	r0, #16
 800d0f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d0f6:	bf3c      	itt	cc
 800d0f8:	021b      	lslcc	r3, r3, #8
 800d0fa:	3008      	addcc	r0, #8
 800d0fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d100:	bf3c      	itt	cc
 800d102:	011b      	lslcc	r3, r3, #4
 800d104:	3004      	addcc	r0, #4
 800d106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d10a:	bf3c      	itt	cc
 800d10c:	009b      	lslcc	r3, r3, #2
 800d10e:	3002      	addcc	r0, #2
 800d110:	2b00      	cmp	r3, #0
 800d112:	db05      	blt.n	800d120 <__hi0bits+0x3c>
 800d114:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d118:	f100 0001 	add.w	r0, r0, #1
 800d11c:	bf08      	it	eq
 800d11e:	2020      	moveq	r0, #32
 800d120:	4770      	bx	lr

0800d122 <__lo0bits>:
 800d122:	6803      	ldr	r3, [r0, #0]
 800d124:	4602      	mov	r2, r0
 800d126:	f013 0007 	ands.w	r0, r3, #7
 800d12a:	d00b      	beq.n	800d144 <__lo0bits+0x22>
 800d12c:	07d9      	lsls	r1, r3, #31
 800d12e:	d421      	bmi.n	800d174 <__lo0bits+0x52>
 800d130:	0798      	lsls	r0, r3, #30
 800d132:	bf49      	itett	mi
 800d134:	085b      	lsrmi	r3, r3, #1
 800d136:	089b      	lsrpl	r3, r3, #2
 800d138:	2001      	movmi	r0, #1
 800d13a:	6013      	strmi	r3, [r2, #0]
 800d13c:	bf5c      	itt	pl
 800d13e:	6013      	strpl	r3, [r2, #0]
 800d140:	2002      	movpl	r0, #2
 800d142:	4770      	bx	lr
 800d144:	b299      	uxth	r1, r3
 800d146:	b909      	cbnz	r1, 800d14c <__lo0bits+0x2a>
 800d148:	0c1b      	lsrs	r3, r3, #16
 800d14a:	2010      	movs	r0, #16
 800d14c:	b2d9      	uxtb	r1, r3
 800d14e:	b909      	cbnz	r1, 800d154 <__lo0bits+0x32>
 800d150:	3008      	adds	r0, #8
 800d152:	0a1b      	lsrs	r3, r3, #8
 800d154:	0719      	lsls	r1, r3, #28
 800d156:	bf04      	itt	eq
 800d158:	091b      	lsreq	r3, r3, #4
 800d15a:	3004      	addeq	r0, #4
 800d15c:	0799      	lsls	r1, r3, #30
 800d15e:	bf04      	itt	eq
 800d160:	089b      	lsreq	r3, r3, #2
 800d162:	3002      	addeq	r0, #2
 800d164:	07d9      	lsls	r1, r3, #31
 800d166:	d403      	bmi.n	800d170 <__lo0bits+0x4e>
 800d168:	085b      	lsrs	r3, r3, #1
 800d16a:	f100 0001 	add.w	r0, r0, #1
 800d16e:	d003      	beq.n	800d178 <__lo0bits+0x56>
 800d170:	6013      	str	r3, [r2, #0]
 800d172:	4770      	bx	lr
 800d174:	2000      	movs	r0, #0
 800d176:	4770      	bx	lr
 800d178:	2020      	movs	r0, #32
 800d17a:	4770      	bx	lr

0800d17c <__i2b>:
 800d17c:	b510      	push	{r4, lr}
 800d17e:	460c      	mov	r4, r1
 800d180:	2101      	movs	r1, #1
 800d182:	f7ff febd 	bl	800cf00 <_Balloc>
 800d186:	4602      	mov	r2, r0
 800d188:	b928      	cbnz	r0, 800d196 <__i2b+0x1a>
 800d18a:	4b05      	ldr	r3, [pc, #20]	@ (800d1a0 <__i2b+0x24>)
 800d18c:	4805      	ldr	r0, [pc, #20]	@ (800d1a4 <__i2b+0x28>)
 800d18e:	f240 1145 	movw	r1, #325	@ 0x145
 800d192:	f7fe fbff 	bl	800b994 <__assert_func>
 800d196:	2301      	movs	r3, #1
 800d198:	6144      	str	r4, [r0, #20]
 800d19a:	6103      	str	r3, [r0, #16]
 800d19c:	bd10      	pop	{r4, pc}
 800d19e:	bf00      	nop
 800d1a0:	0800e841 	.word	0x0800e841
 800d1a4:	0800e8b2 	.word	0x0800e8b2

0800d1a8 <__multiply>:
 800d1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ac:	4614      	mov	r4, r2
 800d1ae:	690a      	ldr	r2, [r1, #16]
 800d1b0:	6923      	ldr	r3, [r4, #16]
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	bfa8      	it	ge
 800d1b6:	4623      	movge	r3, r4
 800d1b8:	460f      	mov	r7, r1
 800d1ba:	bfa4      	itt	ge
 800d1bc:	460c      	movge	r4, r1
 800d1be:	461f      	movge	r7, r3
 800d1c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d1c4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d1c8:	68a3      	ldr	r3, [r4, #8]
 800d1ca:	6861      	ldr	r1, [r4, #4]
 800d1cc:	eb0a 0609 	add.w	r6, sl, r9
 800d1d0:	42b3      	cmp	r3, r6
 800d1d2:	b085      	sub	sp, #20
 800d1d4:	bfb8      	it	lt
 800d1d6:	3101      	addlt	r1, #1
 800d1d8:	f7ff fe92 	bl	800cf00 <_Balloc>
 800d1dc:	b930      	cbnz	r0, 800d1ec <__multiply+0x44>
 800d1de:	4602      	mov	r2, r0
 800d1e0:	4b44      	ldr	r3, [pc, #272]	@ (800d2f4 <__multiply+0x14c>)
 800d1e2:	4845      	ldr	r0, [pc, #276]	@ (800d2f8 <__multiply+0x150>)
 800d1e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d1e8:	f7fe fbd4 	bl	800b994 <__assert_func>
 800d1ec:	f100 0514 	add.w	r5, r0, #20
 800d1f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d1f4:	462b      	mov	r3, r5
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	4543      	cmp	r3, r8
 800d1fa:	d321      	bcc.n	800d240 <__multiply+0x98>
 800d1fc:	f107 0114 	add.w	r1, r7, #20
 800d200:	f104 0214 	add.w	r2, r4, #20
 800d204:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d208:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d20c:	9302      	str	r3, [sp, #8]
 800d20e:	1b13      	subs	r3, r2, r4
 800d210:	3b15      	subs	r3, #21
 800d212:	f023 0303 	bic.w	r3, r3, #3
 800d216:	3304      	adds	r3, #4
 800d218:	f104 0715 	add.w	r7, r4, #21
 800d21c:	42ba      	cmp	r2, r7
 800d21e:	bf38      	it	cc
 800d220:	2304      	movcc	r3, #4
 800d222:	9301      	str	r3, [sp, #4]
 800d224:	9b02      	ldr	r3, [sp, #8]
 800d226:	9103      	str	r1, [sp, #12]
 800d228:	428b      	cmp	r3, r1
 800d22a:	d80c      	bhi.n	800d246 <__multiply+0x9e>
 800d22c:	2e00      	cmp	r6, #0
 800d22e:	dd03      	ble.n	800d238 <__multiply+0x90>
 800d230:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d234:	2b00      	cmp	r3, #0
 800d236:	d05b      	beq.n	800d2f0 <__multiply+0x148>
 800d238:	6106      	str	r6, [r0, #16]
 800d23a:	b005      	add	sp, #20
 800d23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d240:	f843 2b04 	str.w	r2, [r3], #4
 800d244:	e7d8      	b.n	800d1f8 <__multiply+0x50>
 800d246:	f8b1 a000 	ldrh.w	sl, [r1]
 800d24a:	f1ba 0f00 	cmp.w	sl, #0
 800d24e:	d024      	beq.n	800d29a <__multiply+0xf2>
 800d250:	f104 0e14 	add.w	lr, r4, #20
 800d254:	46a9      	mov	r9, r5
 800d256:	f04f 0c00 	mov.w	ip, #0
 800d25a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d25e:	f8d9 3000 	ldr.w	r3, [r9]
 800d262:	fa1f fb87 	uxth.w	fp, r7
 800d266:	b29b      	uxth	r3, r3
 800d268:	fb0a 330b 	mla	r3, sl, fp, r3
 800d26c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d270:	f8d9 7000 	ldr.w	r7, [r9]
 800d274:	4463      	add	r3, ip
 800d276:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d27a:	fb0a c70b 	mla	r7, sl, fp, ip
 800d27e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d282:	b29b      	uxth	r3, r3
 800d284:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d288:	4572      	cmp	r2, lr
 800d28a:	f849 3b04 	str.w	r3, [r9], #4
 800d28e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d292:	d8e2      	bhi.n	800d25a <__multiply+0xb2>
 800d294:	9b01      	ldr	r3, [sp, #4]
 800d296:	f845 c003 	str.w	ip, [r5, r3]
 800d29a:	9b03      	ldr	r3, [sp, #12]
 800d29c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d2a0:	3104      	adds	r1, #4
 800d2a2:	f1b9 0f00 	cmp.w	r9, #0
 800d2a6:	d021      	beq.n	800d2ec <__multiply+0x144>
 800d2a8:	682b      	ldr	r3, [r5, #0]
 800d2aa:	f104 0c14 	add.w	ip, r4, #20
 800d2ae:	46ae      	mov	lr, r5
 800d2b0:	f04f 0a00 	mov.w	sl, #0
 800d2b4:	f8bc b000 	ldrh.w	fp, [ip]
 800d2b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d2bc:	fb09 770b 	mla	r7, r9, fp, r7
 800d2c0:	4457      	add	r7, sl
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d2c8:	f84e 3b04 	str.w	r3, [lr], #4
 800d2cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d2d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d2d4:	f8be 3000 	ldrh.w	r3, [lr]
 800d2d8:	fb09 330a 	mla	r3, r9, sl, r3
 800d2dc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d2e0:	4562      	cmp	r2, ip
 800d2e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d2e6:	d8e5      	bhi.n	800d2b4 <__multiply+0x10c>
 800d2e8:	9f01      	ldr	r7, [sp, #4]
 800d2ea:	51eb      	str	r3, [r5, r7]
 800d2ec:	3504      	adds	r5, #4
 800d2ee:	e799      	b.n	800d224 <__multiply+0x7c>
 800d2f0:	3e01      	subs	r6, #1
 800d2f2:	e79b      	b.n	800d22c <__multiply+0x84>
 800d2f4:	0800e841 	.word	0x0800e841
 800d2f8:	0800e8b2 	.word	0x0800e8b2

0800d2fc <__pow5mult>:
 800d2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d300:	4615      	mov	r5, r2
 800d302:	f012 0203 	ands.w	r2, r2, #3
 800d306:	4607      	mov	r7, r0
 800d308:	460e      	mov	r6, r1
 800d30a:	d007      	beq.n	800d31c <__pow5mult+0x20>
 800d30c:	4c25      	ldr	r4, [pc, #148]	@ (800d3a4 <__pow5mult+0xa8>)
 800d30e:	3a01      	subs	r2, #1
 800d310:	2300      	movs	r3, #0
 800d312:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d316:	f7ff fe55 	bl	800cfc4 <__multadd>
 800d31a:	4606      	mov	r6, r0
 800d31c:	10ad      	asrs	r5, r5, #2
 800d31e:	d03d      	beq.n	800d39c <__pow5mult+0xa0>
 800d320:	69fc      	ldr	r4, [r7, #28]
 800d322:	b97c      	cbnz	r4, 800d344 <__pow5mult+0x48>
 800d324:	2010      	movs	r0, #16
 800d326:	f7ff fd23 	bl	800cd70 <malloc>
 800d32a:	4602      	mov	r2, r0
 800d32c:	61f8      	str	r0, [r7, #28]
 800d32e:	b928      	cbnz	r0, 800d33c <__pow5mult+0x40>
 800d330:	4b1d      	ldr	r3, [pc, #116]	@ (800d3a8 <__pow5mult+0xac>)
 800d332:	481e      	ldr	r0, [pc, #120]	@ (800d3ac <__pow5mult+0xb0>)
 800d334:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d338:	f7fe fb2c 	bl	800b994 <__assert_func>
 800d33c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d340:	6004      	str	r4, [r0, #0]
 800d342:	60c4      	str	r4, [r0, #12]
 800d344:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d348:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d34c:	b94c      	cbnz	r4, 800d362 <__pow5mult+0x66>
 800d34e:	f240 2171 	movw	r1, #625	@ 0x271
 800d352:	4638      	mov	r0, r7
 800d354:	f7ff ff12 	bl	800d17c <__i2b>
 800d358:	2300      	movs	r3, #0
 800d35a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d35e:	4604      	mov	r4, r0
 800d360:	6003      	str	r3, [r0, #0]
 800d362:	f04f 0900 	mov.w	r9, #0
 800d366:	07eb      	lsls	r3, r5, #31
 800d368:	d50a      	bpl.n	800d380 <__pow5mult+0x84>
 800d36a:	4631      	mov	r1, r6
 800d36c:	4622      	mov	r2, r4
 800d36e:	4638      	mov	r0, r7
 800d370:	f7ff ff1a 	bl	800d1a8 <__multiply>
 800d374:	4631      	mov	r1, r6
 800d376:	4680      	mov	r8, r0
 800d378:	4638      	mov	r0, r7
 800d37a:	f7ff fe01 	bl	800cf80 <_Bfree>
 800d37e:	4646      	mov	r6, r8
 800d380:	106d      	asrs	r5, r5, #1
 800d382:	d00b      	beq.n	800d39c <__pow5mult+0xa0>
 800d384:	6820      	ldr	r0, [r4, #0]
 800d386:	b938      	cbnz	r0, 800d398 <__pow5mult+0x9c>
 800d388:	4622      	mov	r2, r4
 800d38a:	4621      	mov	r1, r4
 800d38c:	4638      	mov	r0, r7
 800d38e:	f7ff ff0b 	bl	800d1a8 <__multiply>
 800d392:	6020      	str	r0, [r4, #0]
 800d394:	f8c0 9000 	str.w	r9, [r0]
 800d398:	4604      	mov	r4, r0
 800d39a:	e7e4      	b.n	800d366 <__pow5mult+0x6a>
 800d39c:	4630      	mov	r0, r6
 800d39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3a2:	bf00      	nop
 800d3a4:	0800e90c 	.word	0x0800e90c
 800d3a8:	0800e727 	.word	0x0800e727
 800d3ac:	0800e8b2 	.word	0x0800e8b2

0800d3b0 <__lshift>:
 800d3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3b4:	460c      	mov	r4, r1
 800d3b6:	6849      	ldr	r1, [r1, #4]
 800d3b8:	6923      	ldr	r3, [r4, #16]
 800d3ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d3be:	68a3      	ldr	r3, [r4, #8]
 800d3c0:	4607      	mov	r7, r0
 800d3c2:	4691      	mov	r9, r2
 800d3c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d3c8:	f108 0601 	add.w	r6, r8, #1
 800d3cc:	42b3      	cmp	r3, r6
 800d3ce:	db0b      	blt.n	800d3e8 <__lshift+0x38>
 800d3d0:	4638      	mov	r0, r7
 800d3d2:	f7ff fd95 	bl	800cf00 <_Balloc>
 800d3d6:	4605      	mov	r5, r0
 800d3d8:	b948      	cbnz	r0, 800d3ee <__lshift+0x3e>
 800d3da:	4602      	mov	r2, r0
 800d3dc:	4b28      	ldr	r3, [pc, #160]	@ (800d480 <__lshift+0xd0>)
 800d3de:	4829      	ldr	r0, [pc, #164]	@ (800d484 <__lshift+0xd4>)
 800d3e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d3e4:	f7fe fad6 	bl	800b994 <__assert_func>
 800d3e8:	3101      	adds	r1, #1
 800d3ea:	005b      	lsls	r3, r3, #1
 800d3ec:	e7ee      	b.n	800d3cc <__lshift+0x1c>
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	f100 0114 	add.w	r1, r0, #20
 800d3f4:	f100 0210 	add.w	r2, r0, #16
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	4553      	cmp	r3, sl
 800d3fc:	db33      	blt.n	800d466 <__lshift+0xb6>
 800d3fe:	6920      	ldr	r0, [r4, #16]
 800d400:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d404:	f104 0314 	add.w	r3, r4, #20
 800d408:	f019 091f 	ands.w	r9, r9, #31
 800d40c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d410:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d414:	d02b      	beq.n	800d46e <__lshift+0xbe>
 800d416:	f1c9 0e20 	rsb	lr, r9, #32
 800d41a:	468a      	mov	sl, r1
 800d41c:	2200      	movs	r2, #0
 800d41e:	6818      	ldr	r0, [r3, #0]
 800d420:	fa00 f009 	lsl.w	r0, r0, r9
 800d424:	4310      	orrs	r0, r2
 800d426:	f84a 0b04 	str.w	r0, [sl], #4
 800d42a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d42e:	459c      	cmp	ip, r3
 800d430:	fa22 f20e 	lsr.w	r2, r2, lr
 800d434:	d8f3      	bhi.n	800d41e <__lshift+0x6e>
 800d436:	ebac 0304 	sub.w	r3, ip, r4
 800d43a:	3b15      	subs	r3, #21
 800d43c:	f023 0303 	bic.w	r3, r3, #3
 800d440:	3304      	adds	r3, #4
 800d442:	f104 0015 	add.w	r0, r4, #21
 800d446:	4584      	cmp	ip, r0
 800d448:	bf38      	it	cc
 800d44a:	2304      	movcc	r3, #4
 800d44c:	50ca      	str	r2, [r1, r3]
 800d44e:	b10a      	cbz	r2, 800d454 <__lshift+0xa4>
 800d450:	f108 0602 	add.w	r6, r8, #2
 800d454:	3e01      	subs	r6, #1
 800d456:	4638      	mov	r0, r7
 800d458:	612e      	str	r6, [r5, #16]
 800d45a:	4621      	mov	r1, r4
 800d45c:	f7ff fd90 	bl	800cf80 <_Bfree>
 800d460:	4628      	mov	r0, r5
 800d462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d466:	f842 0f04 	str.w	r0, [r2, #4]!
 800d46a:	3301      	adds	r3, #1
 800d46c:	e7c5      	b.n	800d3fa <__lshift+0x4a>
 800d46e:	3904      	subs	r1, #4
 800d470:	f853 2b04 	ldr.w	r2, [r3], #4
 800d474:	f841 2f04 	str.w	r2, [r1, #4]!
 800d478:	459c      	cmp	ip, r3
 800d47a:	d8f9      	bhi.n	800d470 <__lshift+0xc0>
 800d47c:	e7ea      	b.n	800d454 <__lshift+0xa4>
 800d47e:	bf00      	nop
 800d480:	0800e841 	.word	0x0800e841
 800d484:	0800e8b2 	.word	0x0800e8b2

0800d488 <__mcmp>:
 800d488:	690a      	ldr	r2, [r1, #16]
 800d48a:	4603      	mov	r3, r0
 800d48c:	6900      	ldr	r0, [r0, #16]
 800d48e:	1a80      	subs	r0, r0, r2
 800d490:	b530      	push	{r4, r5, lr}
 800d492:	d10e      	bne.n	800d4b2 <__mcmp+0x2a>
 800d494:	3314      	adds	r3, #20
 800d496:	3114      	adds	r1, #20
 800d498:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d49c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d4a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d4a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d4a8:	4295      	cmp	r5, r2
 800d4aa:	d003      	beq.n	800d4b4 <__mcmp+0x2c>
 800d4ac:	d205      	bcs.n	800d4ba <__mcmp+0x32>
 800d4ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b2:	bd30      	pop	{r4, r5, pc}
 800d4b4:	42a3      	cmp	r3, r4
 800d4b6:	d3f3      	bcc.n	800d4a0 <__mcmp+0x18>
 800d4b8:	e7fb      	b.n	800d4b2 <__mcmp+0x2a>
 800d4ba:	2001      	movs	r0, #1
 800d4bc:	e7f9      	b.n	800d4b2 <__mcmp+0x2a>
	...

0800d4c0 <__mdiff>:
 800d4c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c4:	4689      	mov	r9, r1
 800d4c6:	4606      	mov	r6, r0
 800d4c8:	4611      	mov	r1, r2
 800d4ca:	4648      	mov	r0, r9
 800d4cc:	4614      	mov	r4, r2
 800d4ce:	f7ff ffdb 	bl	800d488 <__mcmp>
 800d4d2:	1e05      	subs	r5, r0, #0
 800d4d4:	d112      	bne.n	800d4fc <__mdiff+0x3c>
 800d4d6:	4629      	mov	r1, r5
 800d4d8:	4630      	mov	r0, r6
 800d4da:	f7ff fd11 	bl	800cf00 <_Balloc>
 800d4de:	4602      	mov	r2, r0
 800d4e0:	b928      	cbnz	r0, 800d4ee <__mdiff+0x2e>
 800d4e2:	4b3f      	ldr	r3, [pc, #252]	@ (800d5e0 <__mdiff+0x120>)
 800d4e4:	f240 2137 	movw	r1, #567	@ 0x237
 800d4e8:	483e      	ldr	r0, [pc, #248]	@ (800d5e4 <__mdiff+0x124>)
 800d4ea:	f7fe fa53 	bl	800b994 <__assert_func>
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d4f4:	4610      	mov	r0, r2
 800d4f6:	b003      	add	sp, #12
 800d4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4fc:	bfbc      	itt	lt
 800d4fe:	464b      	movlt	r3, r9
 800d500:	46a1      	movlt	r9, r4
 800d502:	4630      	mov	r0, r6
 800d504:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d508:	bfba      	itte	lt
 800d50a:	461c      	movlt	r4, r3
 800d50c:	2501      	movlt	r5, #1
 800d50e:	2500      	movge	r5, #0
 800d510:	f7ff fcf6 	bl	800cf00 <_Balloc>
 800d514:	4602      	mov	r2, r0
 800d516:	b918      	cbnz	r0, 800d520 <__mdiff+0x60>
 800d518:	4b31      	ldr	r3, [pc, #196]	@ (800d5e0 <__mdiff+0x120>)
 800d51a:	f240 2145 	movw	r1, #581	@ 0x245
 800d51e:	e7e3      	b.n	800d4e8 <__mdiff+0x28>
 800d520:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d524:	6926      	ldr	r6, [r4, #16]
 800d526:	60c5      	str	r5, [r0, #12]
 800d528:	f109 0310 	add.w	r3, r9, #16
 800d52c:	f109 0514 	add.w	r5, r9, #20
 800d530:	f104 0e14 	add.w	lr, r4, #20
 800d534:	f100 0b14 	add.w	fp, r0, #20
 800d538:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d53c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d540:	9301      	str	r3, [sp, #4]
 800d542:	46d9      	mov	r9, fp
 800d544:	f04f 0c00 	mov.w	ip, #0
 800d548:	9b01      	ldr	r3, [sp, #4]
 800d54a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d54e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d552:	9301      	str	r3, [sp, #4]
 800d554:	fa1f f38a 	uxth.w	r3, sl
 800d558:	4619      	mov	r1, r3
 800d55a:	b283      	uxth	r3, r0
 800d55c:	1acb      	subs	r3, r1, r3
 800d55e:	0c00      	lsrs	r0, r0, #16
 800d560:	4463      	add	r3, ip
 800d562:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d566:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d570:	4576      	cmp	r6, lr
 800d572:	f849 3b04 	str.w	r3, [r9], #4
 800d576:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d57a:	d8e5      	bhi.n	800d548 <__mdiff+0x88>
 800d57c:	1b33      	subs	r3, r6, r4
 800d57e:	3b15      	subs	r3, #21
 800d580:	f023 0303 	bic.w	r3, r3, #3
 800d584:	3415      	adds	r4, #21
 800d586:	3304      	adds	r3, #4
 800d588:	42a6      	cmp	r6, r4
 800d58a:	bf38      	it	cc
 800d58c:	2304      	movcc	r3, #4
 800d58e:	441d      	add	r5, r3
 800d590:	445b      	add	r3, fp
 800d592:	461e      	mov	r6, r3
 800d594:	462c      	mov	r4, r5
 800d596:	4544      	cmp	r4, r8
 800d598:	d30e      	bcc.n	800d5b8 <__mdiff+0xf8>
 800d59a:	f108 0103 	add.w	r1, r8, #3
 800d59e:	1b49      	subs	r1, r1, r5
 800d5a0:	f021 0103 	bic.w	r1, r1, #3
 800d5a4:	3d03      	subs	r5, #3
 800d5a6:	45a8      	cmp	r8, r5
 800d5a8:	bf38      	it	cc
 800d5aa:	2100      	movcc	r1, #0
 800d5ac:	440b      	add	r3, r1
 800d5ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d5b2:	b191      	cbz	r1, 800d5da <__mdiff+0x11a>
 800d5b4:	6117      	str	r7, [r2, #16]
 800d5b6:	e79d      	b.n	800d4f4 <__mdiff+0x34>
 800d5b8:	f854 1b04 	ldr.w	r1, [r4], #4
 800d5bc:	46e6      	mov	lr, ip
 800d5be:	0c08      	lsrs	r0, r1, #16
 800d5c0:	fa1c fc81 	uxtah	ip, ip, r1
 800d5c4:	4471      	add	r1, lr
 800d5c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d5ca:	b289      	uxth	r1, r1
 800d5cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d5d0:	f846 1b04 	str.w	r1, [r6], #4
 800d5d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d5d8:	e7dd      	b.n	800d596 <__mdiff+0xd6>
 800d5da:	3f01      	subs	r7, #1
 800d5dc:	e7e7      	b.n	800d5ae <__mdiff+0xee>
 800d5de:	bf00      	nop
 800d5e0:	0800e841 	.word	0x0800e841
 800d5e4:	0800e8b2 	.word	0x0800e8b2

0800d5e8 <__ulp>:
 800d5e8:	b082      	sub	sp, #8
 800d5ea:	ed8d 0b00 	vstr	d0, [sp]
 800d5ee:	9a01      	ldr	r2, [sp, #4]
 800d5f0:	4b0f      	ldr	r3, [pc, #60]	@ (800d630 <__ulp+0x48>)
 800d5f2:	4013      	ands	r3, r2
 800d5f4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	dc08      	bgt.n	800d60e <__ulp+0x26>
 800d5fc:	425b      	negs	r3, r3
 800d5fe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d602:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d606:	da04      	bge.n	800d612 <__ulp+0x2a>
 800d608:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d60c:	4113      	asrs	r3, r2
 800d60e:	2200      	movs	r2, #0
 800d610:	e008      	b.n	800d624 <__ulp+0x3c>
 800d612:	f1a2 0314 	sub.w	r3, r2, #20
 800d616:	2b1e      	cmp	r3, #30
 800d618:	bfda      	itte	le
 800d61a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d61e:	40da      	lsrle	r2, r3
 800d620:	2201      	movgt	r2, #1
 800d622:	2300      	movs	r3, #0
 800d624:	4619      	mov	r1, r3
 800d626:	4610      	mov	r0, r2
 800d628:	ec41 0b10 	vmov	d0, r0, r1
 800d62c:	b002      	add	sp, #8
 800d62e:	4770      	bx	lr
 800d630:	7ff00000 	.word	0x7ff00000

0800d634 <__b2d>:
 800d634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d638:	6906      	ldr	r6, [r0, #16]
 800d63a:	f100 0814 	add.w	r8, r0, #20
 800d63e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d642:	1f37      	subs	r7, r6, #4
 800d644:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d648:	4610      	mov	r0, r2
 800d64a:	f7ff fd4b 	bl	800d0e4 <__hi0bits>
 800d64e:	f1c0 0320 	rsb	r3, r0, #32
 800d652:	280a      	cmp	r0, #10
 800d654:	600b      	str	r3, [r1, #0]
 800d656:	491b      	ldr	r1, [pc, #108]	@ (800d6c4 <__b2d+0x90>)
 800d658:	dc15      	bgt.n	800d686 <__b2d+0x52>
 800d65a:	f1c0 0c0b 	rsb	ip, r0, #11
 800d65e:	fa22 f30c 	lsr.w	r3, r2, ip
 800d662:	45b8      	cmp	r8, r7
 800d664:	ea43 0501 	orr.w	r5, r3, r1
 800d668:	bf34      	ite	cc
 800d66a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d66e:	2300      	movcs	r3, #0
 800d670:	3015      	adds	r0, #21
 800d672:	fa02 f000 	lsl.w	r0, r2, r0
 800d676:	fa23 f30c 	lsr.w	r3, r3, ip
 800d67a:	4303      	orrs	r3, r0
 800d67c:	461c      	mov	r4, r3
 800d67e:	ec45 4b10 	vmov	d0, r4, r5
 800d682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d686:	45b8      	cmp	r8, r7
 800d688:	bf3a      	itte	cc
 800d68a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d68e:	f1a6 0708 	subcc.w	r7, r6, #8
 800d692:	2300      	movcs	r3, #0
 800d694:	380b      	subs	r0, #11
 800d696:	d012      	beq.n	800d6be <__b2d+0x8a>
 800d698:	f1c0 0120 	rsb	r1, r0, #32
 800d69c:	fa23 f401 	lsr.w	r4, r3, r1
 800d6a0:	4082      	lsls	r2, r0
 800d6a2:	4322      	orrs	r2, r4
 800d6a4:	4547      	cmp	r7, r8
 800d6a6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d6aa:	bf8c      	ite	hi
 800d6ac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d6b0:	2200      	movls	r2, #0
 800d6b2:	4083      	lsls	r3, r0
 800d6b4:	40ca      	lsrs	r2, r1
 800d6b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d6ba:	4313      	orrs	r3, r2
 800d6bc:	e7de      	b.n	800d67c <__b2d+0x48>
 800d6be:	ea42 0501 	orr.w	r5, r2, r1
 800d6c2:	e7db      	b.n	800d67c <__b2d+0x48>
 800d6c4:	3ff00000 	.word	0x3ff00000

0800d6c8 <__d2b>:
 800d6c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d6cc:	460f      	mov	r7, r1
 800d6ce:	2101      	movs	r1, #1
 800d6d0:	ec59 8b10 	vmov	r8, r9, d0
 800d6d4:	4616      	mov	r6, r2
 800d6d6:	f7ff fc13 	bl	800cf00 <_Balloc>
 800d6da:	4604      	mov	r4, r0
 800d6dc:	b930      	cbnz	r0, 800d6ec <__d2b+0x24>
 800d6de:	4602      	mov	r2, r0
 800d6e0:	4b23      	ldr	r3, [pc, #140]	@ (800d770 <__d2b+0xa8>)
 800d6e2:	4824      	ldr	r0, [pc, #144]	@ (800d774 <__d2b+0xac>)
 800d6e4:	f240 310f 	movw	r1, #783	@ 0x30f
 800d6e8:	f7fe f954 	bl	800b994 <__assert_func>
 800d6ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d6f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d6f4:	b10d      	cbz	r5, 800d6fa <__d2b+0x32>
 800d6f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d6fa:	9301      	str	r3, [sp, #4]
 800d6fc:	f1b8 0300 	subs.w	r3, r8, #0
 800d700:	d023      	beq.n	800d74a <__d2b+0x82>
 800d702:	4668      	mov	r0, sp
 800d704:	9300      	str	r3, [sp, #0]
 800d706:	f7ff fd0c 	bl	800d122 <__lo0bits>
 800d70a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d70e:	b1d0      	cbz	r0, 800d746 <__d2b+0x7e>
 800d710:	f1c0 0320 	rsb	r3, r0, #32
 800d714:	fa02 f303 	lsl.w	r3, r2, r3
 800d718:	430b      	orrs	r3, r1
 800d71a:	40c2      	lsrs	r2, r0
 800d71c:	6163      	str	r3, [r4, #20]
 800d71e:	9201      	str	r2, [sp, #4]
 800d720:	9b01      	ldr	r3, [sp, #4]
 800d722:	61a3      	str	r3, [r4, #24]
 800d724:	2b00      	cmp	r3, #0
 800d726:	bf0c      	ite	eq
 800d728:	2201      	moveq	r2, #1
 800d72a:	2202      	movne	r2, #2
 800d72c:	6122      	str	r2, [r4, #16]
 800d72e:	b1a5      	cbz	r5, 800d75a <__d2b+0x92>
 800d730:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d734:	4405      	add	r5, r0
 800d736:	603d      	str	r5, [r7, #0]
 800d738:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d73c:	6030      	str	r0, [r6, #0]
 800d73e:	4620      	mov	r0, r4
 800d740:	b003      	add	sp, #12
 800d742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d746:	6161      	str	r1, [r4, #20]
 800d748:	e7ea      	b.n	800d720 <__d2b+0x58>
 800d74a:	a801      	add	r0, sp, #4
 800d74c:	f7ff fce9 	bl	800d122 <__lo0bits>
 800d750:	9b01      	ldr	r3, [sp, #4]
 800d752:	6163      	str	r3, [r4, #20]
 800d754:	3020      	adds	r0, #32
 800d756:	2201      	movs	r2, #1
 800d758:	e7e8      	b.n	800d72c <__d2b+0x64>
 800d75a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d75e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d762:	6038      	str	r0, [r7, #0]
 800d764:	6918      	ldr	r0, [r3, #16]
 800d766:	f7ff fcbd 	bl	800d0e4 <__hi0bits>
 800d76a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d76e:	e7e5      	b.n	800d73c <__d2b+0x74>
 800d770:	0800e841 	.word	0x0800e841
 800d774:	0800e8b2 	.word	0x0800e8b2

0800d778 <__ratio>:
 800d778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d77c:	b085      	sub	sp, #20
 800d77e:	e9cd 1000 	strd	r1, r0, [sp]
 800d782:	a902      	add	r1, sp, #8
 800d784:	f7ff ff56 	bl	800d634 <__b2d>
 800d788:	9800      	ldr	r0, [sp, #0]
 800d78a:	a903      	add	r1, sp, #12
 800d78c:	ec55 4b10 	vmov	r4, r5, d0
 800d790:	f7ff ff50 	bl	800d634 <__b2d>
 800d794:	9b01      	ldr	r3, [sp, #4]
 800d796:	6919      	ldr	r1, [r3, #16]
 800d798:	9b00      	ldr	r3, [sp, #0]
 800d79a:	691b      	ldr	r3, [r3, #16]
 800d79c:	1ac9      	subs	r1, r1, r3
 800d79e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d7a2:	1a9b      	subs	r3, r3, r2
 800d7a4:	ec5b ab10 	vmov	sl, fp, d0
 800d7a8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	bfce      	itee	gt
 800d7b0:	462a      	movgt	r2, r5
 800d7b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d7b6:	465a      	movle	r2, fp
 800d7b8:	462f      	mov	r7, r5
 800d7ba:	46d9      	mov	r9, fp
 800d7bc:	bfcc      	ite	gt
 800d7be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d7c2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d7c6:	464b      	mov	r3, r9
 800d7c8:	4652      	mov	r2, sl
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	4639      	mov	r1, r7
 800d7ce:	f7f3 f845 	bl	800085c <__aeabi_ddiv>
 800d7d2:	ec41 0b10 	vmov	d0, r0, r1
 800d7d6:	b005      	add	sp, #20
 800d7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d7dc <__copybits>:
 800d7dc:	3901      	subs	r1, #1
 800d7de:	b570      	push	{r4, r5, r6, lr}
 800d7e0:	1149      	asrs	r1, r1, #5
 800d7e2:	6914      	ldr	r4, [r2, #16]
 800d7e4:	3101      	adds	r1, #1
 800d7e6:	f102 0314 	add.w	r3, r2, #20
 800d7ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d7ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d7f2:	1f05      	subs	r5, r0, #4
 800d7f4:	42a3      	cmp	r3, r4
 800d7f6:	d30c      	bcc.n	800d812 <__copybits+0x36>
 800d7f8:	1aa3      	subs	r3, r4, r2
 800d7fa:	3b11      	subs	r3, #17
 800d7fc:	f023 0303 	bic.w	r3, r3, #3
 800d800:	3211      	adds	r2, #17
 800d802:	42a2      	cmp	r2, r4
 800d804:	bf88      	it	hi
 800d806:	2300      	movhi	r3, #0
 800d808:	4418      	add	r0, r3
 800d80a:	2300      	movs	r3, #0
 800d80c:	4288      	cmp	r0, r1
 800d80e:	d305      	bcc.n	800d81c <__copybits+0x40>
 800d810:	bd70      	pop	{r4, r5, r6, pc}
 800d812:	f853 6b04 	ldr.w	r6, [r3], #4
 800d816:	f845 6f04 	str.w	r6, [r5, #4]!
 800d81a:	e7eb      	b.n	800d7f4 <__copybits+0x18>
 800d81c:	f840 3b04 	str.w	r3, [r0], #4
 800d820:	e7f4      	b.n	800d80c <__copybits+0x30>

0800d822 <__any_on>:
 800d822:	f100 0214 	add.w	r2, r0, #20
 800d826:	6900      	ldr	r0, [r0, #16]
 800d828:	114b      	asrs	r3, r1, #5
 800d82a:	4298      	cmp	r0, r3
 800d82c:	b510      	push	{r4, lr}
 800d82e:	db11      	blt.n	800d854 <__any_on+0x32>
 800d830:	dd0a      	ble.n	800d848 <__any_on+0x26>
 800d832:	f011 011f 	ands.w	r1, r1, #31
 800d836:	d007      	beq.n	800d848 <__any_on+0x26>
 800d838:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d83c:	fa24 f001 	lsr.w	r0, r4, r1
 800d840:	fa00 f101 	lsl.w	r1, r0, r1
 800d844:	428c      	cmp	r4, r1
 800d846:	d10b      	bne.n	800d860 <__any_on+0x3e>
 800d848:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d84c:	4293      	cmp	r3, r2
 800d84e:	d803      	bhi.n	800d858 <__any_on+0x36>
 800d850:	2000      	movs	r0, #0
 800d852:	bd10      	pop	{r4, pc}
 800d854:	4603      	mov	r3, r0
 800d856:	e7f7      	b.n	800d848 <__any_on+0x26>
 800d858:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d85c:	2900      	cmp	r1, #0
 800d85e:	d0f5      	beq.n	800d84c <__any_on+0x2a>
 800d860:	2001      	movs	r0, #1
 800d862:	e7f6      	b.n	800d852 <__any_on+0x30>

0800d864 <__ascii_wctomb>:
 800d864:	4603      	mov	r3, r0
 800d866:	4608      	mov	r0, r1
 800d868:	b141      	cbz	r1, 800d87c <__ascii_wctomb+0x18>
 800d86a:	2aff      	cmp	r2, #255	@ 0xff
 800d86c:	d904      	bls.n	800d878 <__ascii_wctomb+0x14>
 800d86e:	228a      	movs	r2, #138	@ 0x8a
 800d870:	601a      	str	r2, [r3, #0]
 800d872:	f04f 30ff 	mov.w	r0, #4294967295
 800d876:	4770      	bx	lr
 800d878:	700a      	strb	r2, [r1, #0]
 800d87a:	2001      	movs	r0, #1
 800d87c:	4770      	bx	lr

0800d87e <__ssputs_r>:
 800d87e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d882:	688e      	ldr	r6, [r1, #8]
 800d884:	461f      	mov	r7, r3
 800d886:	42be      	cmp	r6, r7
 800d888:	680b      	ldr	r3, [r1, #0]
 800d88a:	4682      	mov	sl, r0
 800d88c:	460c      	mov	r4, r1
 800d88e:	4690      	mov	r8, r2
 800d890:	d82d      	bhi.n	800d8ee <__ssputs_r+0x70>
 800d892:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d896:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d89a:	d026      	beq.n	800d8ea <__ssputs_r+0x6c>
 800d89c:	6965      	ldr	r5, [r4, #20]
 800d89e:	6909      	ldr	r1, [r1, #16]
 800d8a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d8a4:	eba3 0901 	sub.w	r9, r3, r1
 800d8a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d8ac:	1c7b      	adds	r3, r7, #1
 800d8ae:	444b      	add	r3, r9
 800d8b0:	106d      	asrs	r5, r5, #1
 800d8b2:	429d      	cmp	r5, r3
 800d8b4:	bf38      	it	cc
 800d8b6:	461d      	movcc	r5, r3
 800d8b8:	0553      	lsls	r3, r2, #21
 800d8ba:	d527      	bpl.n	800d90c <__ssputs_r+0x8e>
 800d8bc:	4629      	mov	r1, r5
 800d8be:	f7ff fa81 	bl	800cdc4 <_malloc_r>
 800d8c2:	4606      	mov	r6, r0
 800d8c4:	b360      	cbz	r0, 800d920 <__ssputs_r+0xa2>
 800d8c6:	6921      	ldr	r1, [r4, #16]
 800d8c8:	464a      	mov	r2, r9
 800d8ca:	f7fe f846 	bl	800b95a <memcpy>
 800d8ce:	89a3      	ldrh	r3, [r4, #12]
 800d8d0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d8d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8d8:	81a3      	strh	r3, [r4, #12]
 800d8da:	6126      	str	r6, [r4, #16]
 800d8dc:	6165      	str	r5, [r4, #20]
 800d8de:	444e      	add	r6, r9
 800d8e0:	eba5 0509 	sub.w	r5, r5, r9
 800d8e4:	6026      	str	r6, [r4, #0]
 800d8e6:	60a5      	str	r5, [r4, #8]
 800d8e8:	463e      	mov	r6, r7
 800d8ea:	42be      	cmp	r6, r7
 800d8ec:	d900      	bls.n	800d8f0 <__ssputs_r+0x72>
 800d8ee:	463e      	mov	r6, r7
 800d8f0:	6820      	ldr	r0, [r4, #0]
 800d8f2:	4632      	mov	r2, r6
 800d8f4:	4641      	mov	r1, r8
 800d8f6:	f000 f9d7 	bl	800dca8 <memmove>
 800d8fa:	68a3      	ldr	r3, [r4, #8]
 800d8fc:	1b9b      	subs	r3, r3, r6
 800d8fe:	60a3      	str	r3, [r4, #8]
 800d900:	6823      	ldr	r3, [r4, #0]
 800d902:	4433      	add	r3, r6
 800d904:	6023      	str	r3, [r4, #0]
 800d906:	2000      	movs	r0, #0
 800d908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d90c:	462a      	mov	r2, r5
 800d90e:	f000 fa10 	bl	800dd32 <_realloc_r>
 800d912:	4606      	mov	r6, r0
 800d914:	2800      	cmp	r0, #0
 800d916:	d1e0      	bne.n	800d8da <__ssputs_r+0x5c>
 800d918:	6921      	ldr	r1, [r4, #16]
 800d91a:	4650      	mov	r0, sl
 800d91c:	f7fe fea4 	bl	800c668 <_free_r>
 800d920:	230c      	movs	r3, #12
 800d922:	f8ca 3000 	str.w	r3, [sl]
 800d926:	89a3      	ldrh	r3, [r4, #12]
 800d928:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d92c:	81a3      	strh	r3, [r4, #12]
 800d92e:	f04f 30ff 	mov.w	r0, #4294967295
 800d932:	e7e9      	b.n	800d908 <__ssputs_r+0x8a>

0800d934 <_svfiprintf_r>:
 800d934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d938:	4698      	mov	r8, r3
 800d93a:	898b      	ldrh	r3, [r1, #12]
 800d93c:	061b      	lsls	r3, r3, #24
 800d93e:	b09d      	sub	sp, #116	@ 0x74
 800d940:	4607      	mov	r7, r0
 800d942:	460d      	mov	r5, r1
 800d944:	4614      	mov	r4, r2
 800d946:	d510      	bpl.n	800d96a <_svfiprintf_r+0x36>
 800d948:	690b      	ldr	r3, [r1, #16]
 800d94a:	b973      	cbnz	r3, 800d96a <_svfiprintf_r+0x36>
 800d94c:	2140      	movs	r1, #64	@ 0x40
 800d94e:	f7ff fa39 	bl	800cdc4 <_malloc_r>
 800d952:	6028      	str	r0, [r5, #0]
 800d954:	6128      	str	r0, [r5, #16]
 800d956:	b930      	cbnz	r0, 800d966 <_svfiprintf_r+0x32>
 800d958:	230c      	movs	r3, #12
 800d95a:	603b      	str	r3, [r7, #0]
 800d95c:	f04f 30ff 	mov.w	r0, #4294967295
 800d960:	b01d      	add	sp, #116	@ 0x74
 800d962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d966:	2340      	movs	r3, #64	@ 0x40
 800d968:	616b      	str	r3, [r5, #20]
 800d96a:	2300      	movs	r3, #0
 800d96c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d96e:	2320      	movs	r3, #32
 800d970:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d974:	f8cd 800c 	str.w	r8, [sp, #12]
 800d978:	2330      	movs	r3, #48	@ 0x30
 800d97a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800db18 <_svfiprintf_r+0x1e4>
 800d97e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d982:	f04f 0901 	mov.w	r9, #1
 800d986:	4623      	mov	r3, r4
 800d988:	469a      	mov	sl, r3
 800d98a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d98e:	b10a      	cbz	r2, 800d994 <_svfiprintf_r+0x60>
 800d990:	2a25      	cmp	r2, #37	@ 0x25
 800d992:	d1f9      	bne.n	800d988 <_svfiprintf_r+0x54>
 800d994:	ebba 0b04 	subs.w	fp, sl, r4
 800d998:	d00b      	beq.n	800d9b2 <_svfiprintf_r+0x7e>
 800d99a:	465b      	mov	r3, fp
 800d99c:	4622      	mov	r2, r4
 800d99e:	4629      	mov	r1, r5
 800d9a0:	4638      	mov	r0, r7
 800d9a2:	f7ff ff6c 	bl	800d87e <__ssputs_r>
 800d9a6:	3001      	adds	r0, #1
 800d9a8:	f000 80a7 	beq.w	800dafa <_svfiprintf_r+0x1c6>
 800d9ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9ae:	445a      	add	r2, fp
 800d9b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d9b2:	f89a 3000 	ldrb.w	r3, [sl]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	f000 809f 	beq.w	800dafa <_svfiprintf_r+0x1c6>
 800d9bc:	2300      	movs	r3, #0
 800d9be:	f04f 32ff 	mov.w	r2, #4294967295
 800d9c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9c6:	f10a 0a01 	add.w	sl, sl, #1
 800d9ca:	9304      	str	r3, [sp, #16]
 800d9cc:	9307      	str	r3, [sp, #28]
 800d9ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d9d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d9d4:	4654      	mov	r4, sl
 800d9d6:	2205      	movs	r2, #5
 800d9d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9dc:	484e      	ldr	r0, [pc, #312]	@ (800db18 <_svfiprintf_r+0x1e4>)
 800d9de:	f7f2 fbff 	bl	80001e0 <memchr>
 800d9e2:	9a04      	ldr	r2, [sp, #16]
 800d9e4:	b9d8      	cbnz	r0, 800da1e <_svfiprintf_r+0xea>
 800d9e6:	06d0      	lsls	r0, r2, #27
 800d9e8:	bf44      	itt	mi
 800d9ea:	2320      	movmi	r3, #32
 800d9ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d9f0:	0711      	lsls	r1, r2, #28
 800d9f2:	bf44      	itt	mi
 800d9f4:	232b      	movmi	r3, #43	@ 0x2b
 800d9f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d9fa:	f89a 3000 	ldrb.w	r3, [sl]
 800d9fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800da00:	d015      	beq.n	800da2e <_svfiprintf_r+0xfa>
 800da02:	9a07      	ldr	r2, [sp, #28]
 800da04:	4654      	mov	r4, sl
 800da06:	2000      	movs	r0, #0
 800da08:	f04f 0c0a 	mov.w	ip, #10
 800da0c:	4621      	mov	r1, r4
 800da0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da12:	3b30      	subs	r3, #48	@ 0x30
 800da14:	2b09      	cmp	r3, #9
 800da16:	d94b      	bls.n	800dab0 <_svfiprintf_r+0x17c>
 800da18:	b1b0      	cbz	r0, 800da48 <_svfiprintf_r+0x114>
 800da1a:	9207      	str	r2, [sp, #28]
 800da1c:	e014      	b.n	800da48 <_svfiprintf_r+0x114>
 800da1e:	eba0 0308 	sub.w	r3, r0, r8
 800da22:	fa09 f303 	lsl.w	r3, r9, r3
 800da26:	4313      	orrs	r3, r2
 800da28:	9304      	str	r3, [sp, #16]
 800da2a:	46a2      	mov	sl, r4
 800da2c:	e7d2      	b.n	800d9d4 <_svfiprintf_r+0xa0>
 800da2e:	9b03      	ldr	r3, [sp, #12]
 800da30:	1d19      	adds	r1, r3, #4
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	9103      	str	r1, [sp, #12]
 800da36:	2b00      	cmp	r3, #0
 800da38:	bfbb      	ittet	lt
 800da3a:	425b      	neglt	r3, r3
 800da3c:	f042 0202 	orrlt.w	r2, r2, #2
 800da40:	9307      	strge	r3, [sp, #28]
 800da42:	9307      	strlt	r3, [sp, #28]
 800da44:	bfb8      	it	lt
 800da46:	9204      	strlt	r2, [sp, #16]
 800da48:	7823      	ldrb	r3, [r4, #0]
 800da4a:	2b2e      	cmp	r3, #46	@ 0x2e
 800da4c:	d10a      	bne.n	800da64 <_svfiprintf_r+0x130>
 800da4e:	7863      	ldrb	r3, [r4, #1]
 800da50:	2b2a      	cmp	r3, #42	@ 0x2a
 800da52:	d132      	bne.n	800daba <_svfiprintf_r+0x186>
 800da54:	9b03      	ldr	r3, [sp, #12]
 800da56:	1d1a      	adds	r2, r3, #4
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	9203      	str	r2, [sp, #12]
 800da5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800da60:	3402      	adds	r4, #2
 800da62:	9305      	str	r3, [sp, #20]
 800da64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800db28 <_svfiprintf_r+0x1f4>
 800da68:	7821      	ldrb	r1, [r4, #0]
 800da6a:	2203      	movs	r2, #3
 800da6c:	4650      	mov	r0, sl
 800da6e:	f7f2 fbb7 	bl	80001e0 <memchr>
 800da72:	b138      	cbz	r0, 800da84 <_svfiprintf_r+0x150>
 800da74:	9b04      	ldr	r3, [sp, #16]
 800da76:	eba0 000a 	sub.w	r0, r0, sl
 800da7a:	2240      	movs	r2, #64	@ 0x40
 800da7c:	4082      	lsls	r2, r0
 800da7e:	4313      	orrs	r3, r2
 800da80:	3401      	adds	r4, #1
 800da82:	9304      	str	r3, [sp, #16]
 800da84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da88:	4824      	ldr	r0, [pc, #144]	@ (800db1c <_svfiprintf_r+0x1e8>)
 800da8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800da8e:	2206      	movs	r2, #6
 800da90:	f7f2 fba6 	bl	80001e0 <memchr>
 800da94:	2800      	cmp	r0, #0
 800da96:	d036      	beq.n	800db06 <_svfiprintf_r+0x1d2>
 800da98:	4b21      	ldr	r3, [pc, #132]	@ (800db20 <_svfiprintf_r+0x1ec>)
 800da9a:	bb1b      	cbnz	r3, 800dae4 <_svfiprintf_r+0x1b0>
 800da9c:	9b03      	ldr	r3, [sp, #12]
 800da9e:	3307      	adds	r3, #7
 800daa0:	f023 0307 	bic.w	r3, r3, #7
 800daa4:	3308      	adds	r3, #8
 800daa6:	9303      	str	r3, [sp, #12]
 800daa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daaa:	4433      	add	r3, r6
 800daac:	9309      	str	r3, [sp, #36]	@ 0x24
 800daae:	e76a      	b.n	800d986 <_svfiprintf_r+0x52>
 800dab0:	fb0c 3202 	mla	r2, ip, r2, r3
 800dab4:	460c      	mov	r4, r1
 800dab6:	2001      	movs	r0, #1
 800dab8:	e7a8      	b.n	800da0c <_svfiprintf_r+0xd8>
 800daba:	2300      	movs	r3, #0
 800dabc:	3401      	adds	r4, #1
 800dabe:	9305      	str	r3, [sp, #20]
 800dac0:	4619      	mov	r1, r3
 800dac2:	f04f 0c0a 	mov.w	ip, #10
 800dac6:	4620      	mov	r0, r4
 800dac8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dacc:	3a30      	subs	r2, #48	@ 0x30
 800dace:	2a09      	cmp	r2, #9
 800dad0:	d903      	bls.n	800dada <_svfiprintf_r+0x1a6>
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d0c6      	beq.n	800da64 <_svfiprintf_r+0x130>
 800dad6:	9105      	str	r1, [sp, #20]
 800dad8:	e7c4      	b.n	800da64 <_svfiprintf_r+0x130>
 800dada:	fb0c 2101 	mla	r1, ip, r1, r2
 800dade:	4604      	mov	r4, r0
 800dae0:	2301      	movs	r3, #1
 800dae2:	e7f0      	b.n	800dac6 <_svfiprintf_r+0x192>
 800dae4:	ab03      	add	r3, sp, #12
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	462a      	mov	r2, r5
 800daea:	4b0e      	ldr	r3, [pc, #56]	@ (800db24 <_svfiprintf_r+0x1f0>)
 800daec:	a904      	add	r1, sp, #16
 800daee:	4638      	mov	r0, r7
 800daf0:	f7fc ff04 	bl	800a8fc <_printf_float>
 800daf4:	1c42      	adds	r2, r0, #1
 800daf6:	4606      	mov	r6, r0
 800daf8:	d1d6      	bne.n	800daa8 <_svfiprintf_r+0x174>
 800dafa:	89ab      	ldrh	r3, [r5, #12]
 800dafc:	065b      	lsls	r3, r3, #25
 800dafe:	f53f af2d 	bmi.w	800d95c <_svfiprintf_r+0x28>
 800db02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800db04:	e72c      	b.n	800d960 <_svfiprintf_r+0x2c>
 800db06:	ab03      	add	r3, sp, #12
 800db08:	9300      	str	r3, [sp, #0]
 800db0a:	462a      	mov	r2, r5
 800db0c:	4b05      	ldr	r3, [pc, #20]	@ (800db24 <_svfiprintf_r+0x1f0>)
 800db0e:	a904      	add	r1, sp, #16
 800db10:	4638      	mov	r0, r7
 800db12:	f7fd f98b 	bl	800ae2c <_printf_i>
 800db16:	e7ed      	b.n	800daf4 <_svfiprintf_r+0x1c0>
 800db18:	0800ea08 	.word	0x0800ea08
 800db1c:	0800ea12 	.word	0x0800ea12
 800db20:	0800a8fd 	.word	0x0800a8fd
 800db24:	0800d87f 	.word	0x0800d87f
 800db28:	0800ea0e 	.word	0x0800ea0e

0800db2c <__sflush_r>:
 800db2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800db30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db34:	0716      	lsls	r6, r2, #28
 800db36:	4605      	mov	r5, r0
 800db38:	460c      	mov	r4, r1
 800db3a:	d454      	bmi.n	800dbe6 <__sflush_r+0xba>
 800db3c:	684b      	ldr	r3, [r1, #4]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	dc02      	bgt.n	800db48 <__sflush_r+0x1c>
 800db42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800db44:	2b00      	cmp	r3, #0
 800db46:	dd48      	ble.n	800dbda <__sflush_r+0xae>
 800db48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800db4a:	2e00      	cmp	r6, #0
 800db4c:	d045      	beq.n	800dbda <__sflush_r+0xae>
 800db4e:	2300      	movs	r3, #0
 800db50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800db54:	682f      	ldr	r7, [r5, #0]
 800db56:	6a21      	ldr	r1, [r4, #32]
 800db58:	602b      	str	r3, [r5, #0]
 800db5a:	d030      	beq.n	800dbbe <__sflush_r+0x92>
 800db5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800db5e:	89a3      	ldrh	r3, [r4, #12]
 800db60:	0759      	lsls	r1, r3, #29
 800db62:	d505      	bpl.n	800db70 <__sflush_r+0x44>
 800db64:	6863      	ldr	r3, [r4, #4]
 800db66:	1ad2      	subs	r2, r2, r3
 800db68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800db6a:	b10b      	cbz	r3, 800db70 <__sflush_r+0x44>
 800db6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800db6e:	1ad2      	subs	r2, r2, r3
 800db70:	2300      	movs	r3, #0
 800db72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800db74:	6a21      	ldr	r1, [r4, #32]
 800db76:	4628      	mov	r0, r5
 800db78:	47b0      	blx	r6
 800db7a:	1c43      	adds	r3, r0, #1
 800db7c:	89a3      	ldrh	r3, [r4, #12]
 800db7e:	d106      	bne.n	800db8e <__sflush_r+0x62>
 800db80:	6829      	ldr	r1, [r5, #0]
 800db82:	291d      	cmp	r1, #29
 800db84:	d82b      	bhi.n	800dbde <__sflush_r+0xb2>
 800db86:	4a2a      	ldr	r2, [pc, #168]	@ (800dc30 <__sflush_r+0x104>)
 800db88:	410a      	asrs	r2, r1
 800db8a:	07d6      	lsls	r6, r2, #31
 800db8c:	d427      	bmi.n	800dbde <__sflush_r+0xb2>
 800db8e:	2200      	movs	r2, #0
 800db90:	6062      	str	r2, [r4, #4]
 800db92:	04d9      	lsls	r1, r3, #19
 800db94:	6922      	ldr	r2, [r4, #16]
 800db96:	6022      	str	r2, [r4, #0]
 800db98:	d504      	bpl.n	800dba4 <__sflush_r+0x78>
 800db9a:	1c42      	adds	r2, r0, #1
 800db9c:	d101      	bne.n	800dba2 <__sflush_r+0x76>
 800db9e:	682b      	ldr	r3, [r5, #0]
 800dba0:	b903      	cbnz	r3, 800dba4 <__sflush_r+0x78>
 800dba2:	6560      	str	r0, [r4, #84]	@ 0x54
 800dba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dba6:	602f      	str	r7, [r5, #0]
 800dba8:	b1b9      	cbz	r1, 800dbda <__sflush_r+0xae>
 800dbaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dbae:	4299      	cmp	r1, r3
 800dbb0:	d002      	beq.n	800dbb8 <__sflush_r+0x8c>
 800dbb2:	4628      	mov	r0, r5
 800dbb4:	f7fe fd58 	bl	800c668 <_free_r>
 800dbb8:	2300      	movs	r3, #0
 800dbba:	6363      	str	r3, [r4, #52]	@ 0x34
 800dbbc:	e00d      	b.n	800dbda <__sflush_r+0xae>
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	47b0      	blx	r6
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	1c50      	adds	r0, r2, #1
 800dbc8:	d1c9      	bne.n	800db5e <__sflush_r+0x32>
 800dbca:	682b      	ldr	r3, [r5, #0]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d0c6      	beq.n	800db5e <__sflush_r+0x32>
 800dbd0:	2b1d      	cmp	r3, #29
 800dbd2:	d001      	beq.n	800dbd8 <__sflush_r+0xac>
 800dbd4:	2b16      	cmp	r3, #22
 800dbd6:	d11e      	bne.n	800dc16 <__sflush_r+0xea>
 800dbd8:	602f      	str	r7, [r5, #0]
 800dbda:	2000      	movs	r0, #0
 800dbdc:	e022      	b.n	800dc24 <__sflush_r+0xf8>
 800dbde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbe2:	b21b      	sxth	r3, r3
 800dbe4:	e01b      	b.n	800dc1e <__sflush_r+0xf2>
 800dbe6:	690f      	ldr	r7, [r1, #16]
 800dbe8:	2f00      	cmp	r7, #0
 800dbea:	d0f6      	beq.n	800dbda <__sflush_r+0xae>
 800dbec:	0793      	lsls	r3, r2, #30
 800dbee:	680e      	ldr	r6, [r1, #0]
 800dbf0:	bf08      	it	eq
 800dbf2:	694b      	ldreq	r3, [r1, #20]
 800dbf4:	600f      	str	r7, [r1, #0]
 800dbf6:	bf18      	it	ne
 800dbf8:	2300      	movne	r3, #0
 800dbfa:	eba6 0807 	sub.w	r8, r6, r7
 800dbfe:	608b      	str	r3, [r1, #8]
 800dc00:	f1b8 0f00 	cmp.w	r8, #0
 800dc04:	dde9      	ble.n	800dbda <__sflush_r+0xae>
 800dc06:	6a21      	ldr	r1, [r4, #32]
 800dc08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dc0a:	4643      	mov	r3, r8
 800dc0c:	463a      	mov	r2, r7
 800dc0e:	4628      	mov	r0, r5
 800dc10:	47b0      	blx	r6
 800dc12:	2800      	cmp	r0, #0
 800dc14:	dc08      	bgt.n	800dc28 <__sflush_r+0xfc>
 800dc16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc1e:	81a3      	strh	r3, [r4, #12]
 800dc20:	f04f 30ff 	mov.w	r0, #4294967295
 800dc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc28:	4407      	add	r7, r0
 800dc2a:	eba8 0800 	sub.w	r8, r8, r0
 800dc2e:	e7e7      	b.n	800dc00 <__sflush_r+0xd4>
 800dc30:	dfbffffe 	.word	0xdfbffffe

0800dc34 <_fflush_r>:
 800dc34:	b538      	push	{r3, r4, r5, lr}
 800dc36:	690b      	ldr	r3, [r1, #16]
 800dc38:	4605      	mov	r5, r0
 800dc3a:	460c      	mov	r4, r1
 800dc3c:	b913      	cbnz	r3, 800dc44 <_fflush_r+0x10>
 800dc3e:	2500      	movs	r5, #0
 800dc40:	4628      	mov	r0, r5
 800dc42:	bd38      	pop	{r3, r4, r5, pc}
 800dc44:	b118      	cbz	r0, 800dc4e <_fflush_r+0x1a>
 800dc46:	6a03      	ldr	r3, [r0, #32]
 800dc48:	b90b      	cbnz	r3, 800dc4e <_fflush_r+0x1a>
 800dc4a:	f7fd fcaf 	bl	800b5ac <__sinit>
 800dc4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d0f3      	beq.n	800dc3e <_fflush_r+0xa>
 800dc56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dc58:	07d0      	lsls	r0, r2, #31
 800dc5a:	d404      	bmi.n	800dc66 <_fflush_r+0x32>
 800dc5c:	0599      	lsls	r1, r3, #22
 800dc5e:	d402      	bmi.n	800dc66 <_fflush_r+0x32>
 800dc60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc62:	f7fd fe70 	bl	800b946 <__retarget_lock_acquire_recursive>
 800dc66:	4628      	mov	r0, r5
 800dc68:	4621      	mov	r1, r4
 800dc6a:	f7ff ff5f 	bl	800db2c <__sflush_r>
 800dc6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dc70:	07da      	lsls	r2, r3, #31
 800dc72:	4605      	mov	r5, r0
 800dc74:	d4e4      	bmi.n	800dc40 <_fflush_r+0xc>
 800dc76:	89a3      	ldrh	r3, [r4, #12]
 800dc78:	059b      	lsls	r3, r3, #22
 800dc7a:	d4e1      	bmi.n	800dc40 <_fflush_r+0xc>
 800dc7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc7e:	f7fd fe63 	bl	800b948 <__retarget_lock_release_recursive>
 800dc82:	e7dd      	b.n	800dc40 <_fflush_r+0xc>

0800dc84 <fiprintf>:
 800dc84:	b40e      	push	{r1, r2, r3}
 800dc86:	b503      	push	{r0, r1, lr}
 800dc88:	4601      	mov	r1, r0
 800dc8a:	ab03      	add	r3, sp, #12
 800dc8c:	4805      	ldr	r0, [pc, #20]	@ (800dca4 <fiprintf+0x20>)
 800dc8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc92:	6800      	ldr	r0, [r0, #0]
 800dc94:	9301      	str	r3, [sp, #4]
 800dc96:	f000 f8a3 	bl	800dde0 <_vfiprintf_r>
 800dc9a:	b002      	add	sp, #8
 800dc9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800dca0:	b003      	add	sp, #12
 800dca2:	4770      	bx	lr
 800dca4:	20000198 	.word	0x20000198

0800dca8 <memmove>:
 800dca8:	4288      	cmp	r0, r1
 800dcaa:	b510      	push	{r4, lr}
 800dcac:	eb01 0402 	add.w	r4, r1, r2
 800dcb0:	d902      	bls.n	800dcb8 <memmove+0x10>
 800dcb2:	4284      	cmp	r4, r0
 800dcb4:	4623      	mov	r3, r4
 800dcb6:	d807      	bhi.n	800dcc8 <memmove+0x20>
 800dcb8:	1e43      	subs	r3, r0, #1
 800dcba:	42a1      	cmp	r1, r4
 800dcbc:	d008      	beq.n	800dcd0 <memmove+0x28>
 800dcbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dcc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dcc6:	e7f8      	b.n	800dcba <memmove+0x12>
 800dcc8:	4402      	add	r2, r0
 800dcca:	4601      	mov	r1, r0
 800dccc:	428a      	cmp	r2, r1
 800dcce:	d100      	bne.n	800dcd2 <memmove+0x2a>
 800dcd0:	bd10      	pop	{r4, pc}
 800dcd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dcd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dcda:	e7f7      	b.n	800dccc <memmove+0x24>

0800dcdc <_sbrk_r>:
 800dcdc:	b538      	push	{r3, r4, r5, lr}
 800dcde:	4d06      	ldr	r5, [pc, #24]	@ (800dcf8 <_sbrk_r+0x1c>)
 800dce0:	2300      	movs	r3, #0
 800dce2:	4604      	mov	r4, r0
 800dce4:	4608      	mov	r0, r1
 800dce6:	602b      	str	r3, [r5, #0]
 800dce8:	f7f5 fee2 	bl	8003ab0 <_sbrk>
 800dcec:	1c43      	adds	r3, r0, #1
 800dcee:	d102      	bne.n	800dcf6 <_sbrk_r+0x1a>
 800dcf0:	682b      	ldr	r3, [r5, #0]
 800dcf2:	b103      	cbz	r3, 800dcf6 <_sbrk_r+0x1a>
 800dcf4:	6023      	str	r3, [r4, #0]
 800dcf6:	bd38      	pop	{r3, r4, r5, pc}
 800dcf8:	200049bc 	.word	0x200049bc

0800dcfc <abort>:
 800dcfc:	b508      	push	{r3, lr}
 800dcfe:	2006      	movs	r0, #6
 800dd00:	f000 fa42 	bl	800e188 <raise>
 800dd04:	2001      	movs	r0, #1
 800dd06:	f7f5 fe5b 	bl	80039c0 <_exit>

0800dd0a <_calloc_r>:
 800dd0a:	b570      	push	{r4, r5, r6, lr}
 800dd0c:	fba1 5402 	umull	r5, r4, r1, r2
 800dd10:	b93c      	cbnz	r4, 800dd22 <_calloc_r+0x18>
 800dd12:	4629      	mov	r1, r5
 800dd14:	f7ff f856 	bl	800cdc4 <_malloc_r>
 800dd18:	4606      	mov	r6, r0
 800dd1a:	b928      	cbnz	r0, 800dd28 <_calloc_r+0x1e>
 800dd1c:	2600      	movs	r6, #0
 800dd1e:	4630      	mov	r0, r6
 800dd20:	bd70      	pop	{r4, r5, r6, pc}
 800dd22:	220c      	movs	r2, #12
 800dd24:	6002      	str	r2, [r0, #0]
 800dd26:	e7f9      	b.n	800dd1c <_calloc_r+0x12>
 800dd28:	462a      	mov	r2, r5
 800dd2a:	4621      	mov	r1, r4
 800dd2c:	f7fd fcd7 	bl	800b6de <memset>
 800dd30:	e7f5      	b.n	800dd1e <_calloc_r+0x14>

0800dd32 <_realloc_r>:
 800dd32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd36:	4680      	mov	r8, r0
 800dd38:	4615      	mov	r5, r2
 800dd3a:	460c      	mov	r4, r1
 800dd3c:	b921      	cbnz	r1, 800dd48 <_realloc_r+0x16>
 800dd3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd42:	4611      	mov	r1, r2
 800dd44:	f7ff b83e 	b.w	800cdc4 <_malloc_r>
 800dd48:	b92a      	cbnz	r2, 800dd56 <_realloc_r+0x24>
 800dd4a:	f7fe fc8d 	bl	800c668 <_free_r>
 800dd4e:	2400      	movs	r4, #0
 800dd50:	4620      	mov	r0, r4
 800dd52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd56:	f000 fa33 	bl	800e1c0 <_malloc_usable_size_r>
 800dd5a:	4285      	cmp	r5, r0
 800dd5c:	4606      	mov	r6, r0
 800dd5e:	d802      	bhi.n	800dd66 <_realloc_r+0x34>
 800dd60:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dd64:	d8f4      	bhi.n	800dd50 <_realloc_r+0x1e>
 800dd66:	4629      	mov	r1, r5
 800dd68:	4640      	mov	r0, r8
 800dd6a:	f7ff f82b 	bl	800cdc4 <_malloc_r>
 800dd6e:	4607      	mov	r7, r0
 800dd70:	2800      	cmp	r0, #0
 800dd72:	d0ec      	beq.n	800dd4e <_realloc_r+0x1c>
 800dd74:	42b5      	cmp	r5, r6
 800dd76:	462a      	mov	r2, r5
 800dd78:	4621      	mov	r1, r4
 800dd7a:	bf28      	it	cs
 800dd7c:	4632      	movcs	r2, r6
 800dd7e:	f7fd fdec 	bl	800b95a <memcpy>
 800dd82:	4621      	mov	r1, r4
 800dd84:	4640      	mov	r0, r8
 800dd86:	f7fe fc6f 	bl	800c668 <_free_r>
 800dd8a:	463c      	mov	r4, r7
 800dd8c:	e7e0      	b.n	800dd50 <_realloc_r+0x1e>

0800dd8e <__sfputc_r>:
 800dd8e:	6893      	ldr	r3, [r2, #8]
 800dd90:	3b01      	subs	r3, #1
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	b410      	push	{r4}
 800dd96:	6093      	str	r3, [r2, #8]
 800dd98:	da08      	bge.n	800ddac <__sfputc_r+0x1e>
 800dd9a:	6994      	ldr	r4, [r2, #24]
 800dd9c:	42a3      	cmp	r3, r4
 800dd9e:	db01      	blt.n	800dda4 <__sfputc_r+0x16>
 800dda0:	290a      	cmp	r1, #10
 800dda2:	d103      	bne.n	800ddac <__sfputc_r+0x1e>
 800dda4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dda8:	f000 b932 	b.w	800e010 <__swbuf_r>
 800ddac:	6813      	ldr	r3, [r2, #0]
 800ddae:	1c58      	adds	r0, r3, #1
 800ddb0:	6010      	str	r0, [r2, #0]
 800ddb2:	7019      	strb	r1, [r3, #0]
 800ddb4:	4608      	mov	r0, r1
 800ddb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <__sfputs_r>:
 800ddbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddbe:	4606      	mov	r6, r0
 800ddc0:	460f      	mov	r7, r1
 800ddc2:	4614      	mov	r4, r2
 800ddc4:	18d5      	adds	r5, r2, r3
 800ddc6:	42ac      	cmp	r4, r5
 800ddc8:	d101      	bne.n	800ddce <__sfputs_r+0x12>
 800ddca:	2000      	movs	r0, #0
 800ddcc:	e007      	b.n	800ddde <__sfputs_r+0x22>
 800ddce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddd2:	463a      	mov	r2, r7
 800ddd4:	4630      	mov	r0, r6
 800ddd6:	f7ff ffda 	bl	800dd8e <__sfputc_r>
 800ddda:	1c43      	adds	r3, r0, #1
 800dddc:	d1f3      	bne.n	800ddc6 <__sfputs_r+0xa>
 800ddde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dde0 <_vfiprintf_r>:
 800dde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde4:	460d      	mov	r5, r1
 800dde6:	b09d      	sub	sp, #116	@ 0x74
 800dde8:	4614      	mov	r4, r2
 800ddea:	4698      	mov	r8, r3
 800ddec:	4606      	mov	r6, r0
 800ddee:	b118      	cbz	r0, 800ddf8 <_vfiprintf_r+0x18>
 800ddf0:	6a03      	ldr	r3, [r0, #32]
 800ddf2:	b90b      	cbnz	r3, 800ddf8 <_vfiprintf_r+0x18>
 800ddf4:	f7fd fbda 	bl	800b5ac <__sinit>
 800ddf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ddfa:	07d9      	lsls	r1, r3, #31
 800ddfc:	d405      	bmi.n	800de0a <_vfiprintf_r+0x2a>
 800ddfe:	89ab      	ldrh	r3, [r5, #12]
 800de00:	059a      	lsls	r2, r3, #22
 800de02:	d402      	bmi.n	800de0a <_vfiprintf_r+0x2a>
 800de04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de06:	f7fd fd9e 	bl	800b946 <__retarget_lock_acquire_recursive>
 800de0a:	89ab      	ldrh	r3, [r5, #12]
 800de0c:	071b      	lsls	r3, r3, #28
 800de0e:	d501      	bpl.n	800de14 <_vfiprintf_r+0x34>
 800de10:	692b      	ldr	r3, [r5, #16]
 800de12:	b99b      	cbnz	r3, 800de3c <_vfiprintf_r+0x5c>
 800de14:	4629      	mov	r1, r5
 800de16:	4630      	mov	r0, r6
 800de18:	f000 f938 	bl	800e08c <__swsetup_r>
 800de1c:	b170      	cbz	r0, 800de3c <_vfiprintf_r+0x5c>
 800de1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de20:	07dc      	lsls	r4, r3, #31
 800de22:	d504      	bpl.n	800de2e <_vfiprintf_r+0x4e>
 800de24:	f04f 30ff 	mov.w	r0, #4294967295
 800de28:	b01d      	add	sp, #116	@ 0x74
 800de2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de2e:	89ab      	ldrh	r3, [r5, #12]
 800de30:	0598      	lsls	r0, r3, #22
 800de32:	d4f7      	bmi.n	800de24 <_vfiprintf_r+0x44>
 800de34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de36:	f7fd fd87 	bl	800b948 <__retarget_lock_release_recursive>
 800de3a:	e7f3      	b.n	800de24 <_vfiprintf_r+0x44>
 800de3c:	2300      	movs	r3, #0
 800de3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800de40:	2320      	movs	r3, #32
 800de42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800de46:	f8cd 800c 	str.w	r8, [sp, #12]
 800de4a:	2330      	movs	r3, #48	@ 0x30
 800de4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dffc <_vfiprintf_r+0x21c>
 800de50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800de54:	f04f 0901 	mov.w	r9, #1
 800de58:	4623      	mov	r3, r4
 800de5a:	469a      	mov	sl, r3
 800de5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de60:	b10a      	cbz	r2, 800de66 <_vfiprintf_r+0x86>
 800de62:	2a25      	cmp	r2, #37	@ 0x25
 800de64:	d1f9      	bne.n	800de5a <_vfiprintf_r+0x7a>
 800de66:	ebba 0b04 	subs.w	fp, sl, r4
 800de6a:	d00b      	beq.n	800de84 <_vfiprintf_r+0xa4>
 800de6c:	465b      	mov	r3, fp
 800de6e:	4622      	mov	r2, r4
 800de70:	4629      	mov	r1, r5
 800de72:	4630      	mov	r0, r6
 800de74:	f7ff ffa2 	bl	800ddbc <__sfputs_r>
 800de78:	3001      	adds	r0, #1
 800de7a:	f000 80a7 	beq.w	800dfcc <_vfiprintf_r+0x1ec>
 800de7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de80:	445a      	add	r2, fp
 800de82:	9209      	str	r2, [sp, #36]	@ 0x24
 800de84:	f89a 3000 	ldrb.w	r3, [sl]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	f000 809f 	beq.w	800dfcc <_vfiprintf_r+0x1ec>
 800de8e:	2300      	movs	r3, #0
 800de90:	f04f 32ff 	mov.w	r2, #4294967295
 800de94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de98:	f10a 0a01 	add.w	sl, sl, #1
 800de9c:	9304      	str	r3, [sp, #16]
 800de9e:	9307      	str	r3, [sp, #28]
 800dea0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dea4:	931a      	str	r3, [sp, #104]	@ 0x68
 800dea6:	4654      	mov	r4, sl
 800dea8:	2205      	movs	r2, #5
 800deaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deae:	4853      	ldr	r0, [pc, #332]	@ (800dffc <_vfiprintf_r+0x21c>)
 800deb0:	f7f2 f996 	bl	80001e0 <memchr>
 800deb4:	9a04      	ldr	r2, [sp, #16]
 800deb6:	b9d8      	cbnz	r0, 800def0 <_vfiprintf_r+0x110>
 800deb8:	06d1      	lsls	r1, r2, #27
 800deba:	bf44      	itt	mi
 800debc:	2320      	movmi	r3, #32
 800debe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dec2:	0713      	lsls	r3, r2, #28
 800dec4:	bf44      	itt	mi
 800dec6:	232b      	movmi	r3, #43	@ 0x2b
 800dec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800decc:	f89a 3000 	ldrb.w	r3, [sl]
 800ded0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ded2:	d015      	beq.n	800df00 <_vfiprintf_r+0x120>
 800ded4:	9a07      	ldr	r2, [sp, #28]
 800ded6:	4654      	mov	r4, sl
 800ded8:	2000      	movs	r0, #0
 800deda:	f04f 0c0a 	mov.w	ip, #10
 800dede:	4621      	mov	r1, r4
 800dee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dee4:	3b30      	subs	r3, #48	@ 0x30
 800dee6:	2b09      	cmp	r3, #9
 800dee8:	d94b      	bls.n	800df82 <_vfiprintf_r+0x1a2>
 800deea:	b1b0      	cbz	r0, 800df1a <_vfiprintf_r+0x13a>
 800deec:	9207      	str	r2, [sp, #28]
 800deee:	e014      	b.n	800df1a <_vfiprintf_r+0x13a>
 800def0:	eba0 0308 	sub.w	r3, r0, r8
 800def4:	fa09 f303 	lsl.w	r3, r9, r3
 800def8:	4313      	orrs	r3, r2
 800defa:	9304      	str	r3, [sp, #16]
 800defc:	46a2      	mov	sl, r4
 800defe:	e7d2      	b.n	800dea6 <_vfiprintf_r+0xc6>
 800df00:	9b03      	ldr	r3, [sp, #12]
 800df02:	1d19      	adds	r1, r3, #4
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	9103      	str	r1, [sp, #12]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	bfbb      	ittet	lt
 800df0c:	425b      	neglt	r3, r3
 800df0e:	f042 0202 	orrlt.w	r2, r2, #2
 800df12:	9307      	strge	r3, [sp, #28]
 800df14:	9307      	strlt	r3, [sp, #28]
 800df16:	bfb8      	it	lt
 800df18:	9204      	strlt	r2, [sp, #16]
 800df1a:	7823      	ldrb	r3, [r4, #0]
 800df1c:	2b2e      	cmp	r3, #46	@ 0x2e
 800df1e:	d10a      	bne.n	800df36 <_vfiprintf_r+0x156>
 800df20:	7863      	ldrb	r3, [r4, #1]
 800df22:	2b2a      	cmp	r3, #42	@ 0x2a
 800df24:	d132      	bne.n	800df8c <_vfiprintf_r+0x1ac>
 800df26:	9b03      	ldr	r3, [sp, #12]
 800df28:	1d1a      	adds	r2, r3, #4
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	9203      	str	r2, [sp, #12]
 800df2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800df32:	3402      	adds	r4, #2
 800df34:	9305      	str	r3, [sp, #20]
 800df36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e00c <_vfiprintf_r+0x22c>
 800df3a:	7821      	ldrb	r1, [r4, #0]
 800df3c:	2203      	movs	r2, #3
 800df3e:	4650      	mov	r0, sl
 800df40:	f7f2 f94e 	bl	80001e0 <memchr>
 800df44:	b138      	cbz	r0, 800df56 <_vfiprintf_r+0x176>
 800df46:	9b04      	ldr	r3, [sp, #16]
 800df48:	eba0 000a 	sub.w	r0, r0, sl
 800df4c:	2240      	movs	r2, #64	@ 0x40
 800df4e:	4082      	lsls	r2, r0
 800df50:	4313      	orrs	r3, r2
 800df52:	3401      	adds	r4, #1
 800df54:	9304      	str	r3, [sp, #16]
 800df56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df5a:	4829      	ldr	r0, [pc, #164]	@ (800e000 <_vfiprintf_r+0x220>)
 800df5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800df60:	2206      	movs	r2, #6
 800df62:	f7f2 f93d 	bl	80001e0 <memchr>
 800df66:	2800      	cmp	r0, #0
 800df68:	d03f      	beq.n	800dfea <_vfiprintf_r+0x20a>
 800df6a:	4b26      	ldr	r3, [pc, #152]	@ (800e004 <_vfiprintf_r+0x224>)
 800df6c:	bb1b      	cbnz	r3, 800dfb6 <_vfiprintf_r+0x1d6>
 800df6e:	9b03      	ldr	r3, [sp, #12]
 800df70:	3307      	adds	r3, #7
 800df72:	f023 0307 	bic.w	r3, r3, #7
 800df76:	3308      	adds	r3, #8
 800df78:	9303      	str	r3, [sp, #12]
 800df7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df7c:	443b      	add	r3, r7
 800df7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800df80:	e76a      	b.n	800de58 <_vfiprintf_r+0x78>
 800df82:	fb0c 3202 	mla	r2, ip, r2, r3
 800df86:	460c      	mov	r4, r1
 800df88:	2001      	movs	r0, #1
 800df8a:	e7a8      	b.n	800dede <_vfiprintf_r+0xfe>
 800df8c:	2300      	movs	r3, #0
 800df8e:	3401      	adds	r4, #1
 800df90:	9305      	str	r3, [sp, #20]
 800df92:	4619      	mov	r1, r3
 800df94:	f04f 0c0a 	mov.w	ip, #10
 800df98:	4620      	mov	r0, r4
 800df9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df9e:	3a30      	subs	r2, #48	@ 0x30
 800dfa0:	2a09      	cmp	r2, #9
 800dfa2:	d903      	bls.n	800dfac <_vfiprintf_r+0x1cc>
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d0c6      	beq.n	800df36 <_vfiprintf_r+0x156>
 800dfa8:	9105      	str	r1, [sp, #20]
 800dfaa:	e7c4      	b.n	800df36 <_vfiprintf_r+0x156>
 800dfac:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfb0:	4604      	mov	r4, r0
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	e7f0      	b.n	800df98 <_vfiprintf_r+0x1b8>
 800dfb6:	ab03      	add	r3, sp, #12
 800dfb8:	9300      	str	r3, [sp, #0]
 800dfba:	462a      	mov	r2, r5
 800dfbc:	4b12      	ldr	r3, [pc, #72]	@ (800e008 <_vfiprintf_r+0x228>)
 800dfbe:	a904      	add	r1, sp, #16
 800dfc0:	4630      	mov	r0, r6
 800dfc2:	f7fc fc9b 	bl	800a8fc <_printf_float>
 800dfc6:	4607      	mov	r7, r0
 800dfc8:	1c78      	adds	r0, r7, #1
 800dfca:	d1d6      	bne.n	800df7a <_vfiprintf_r+0x19a>
 800dfcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfce:	07d9      	lsls	r1, r3, #31
 800dfd0:	d405      	bmi.n	800dfde <_vfiprintf_r+0x1fe>
 800dfd2:	89ab      	ldrh	r3, [r5, #12]
 800dfd4:	059a      	lsls	r2, r3, #22
 800dfd6:	d402      	bmi.n	800dfde <_vfiprintf_r+0x1fe>
 800dfd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfda:	f7fd fcb5 	bl	800b948 <__retarget_lock_release_recursive>
 800dfde:	89ab      	ldrh	r3, [r5, #12]
 800dfe0:	065b      	lsls	r3, r3, #25
 800dfe2:	f53f af1f 	bmi.w	800de24 <_vfiprintf_r+0x44>
 800dfe6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dfe8:	e71e      	b.n	800de28 <_vfiprintf_r+0x48>
 800dfea:	ab03      	add	r3, sp, #12
 800dfec:	9300      	str	r3, [sp, #0]
 800dfee:	462a      	mov	r2, r5
 800dff0:	4b05      	ldr	r3, [pc, #20]	@ (800e008 <_vfiprintf_r+0x228>)
 800dff2:	a904      	add	r1, sp, #16
 800dff4:	4630      	mov	r0, r6
 800dff6:	f7fc ff19 	bl	800ae2c <_printf_i>
 800dffa:	e7e4      	b.n	800dfc6 <_vfiprintf_r+0x1e6>
 800dffc:	0800ea08 	.word	0x0800ea08
 800e000:	0800ea12 	.word	0x0800ea12
 800e004:	0800a8fd 	.word	0x0800a8fd
 800e008:	0800ddbd 	.word	0x0800ddbd
 800e00c:	0800ea0e 	.word	0x0800ea0e

0800e010 <__swbuf_r>:
 800e010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e012:	460e      	mov	r6, r1
 800e014:	4614      	mov	r4, r2
 800e016:	4605      	mov	r5, r0
 800e018:	b118      	cbz	r0, 800e022 <__swbuf_r+0x12>
 800e01a:	6a03      	ldr	r3, [r0, #32]
 800e01c:	b90b      	cbnz	r3, 800e022 <__swbuf_r+0x12>
 800e01e:	f7fd fac5 	bl	800b5ac <__sinit>
 800e022:	69a3      	ldr	r3, [r4, #24]
 800e024:	60a3      	str	r3, [r4, #8]
 800e026:	89a3      	ldrh	r3, [r4, #12]
 800e028:	071a      	lsls	r2, r3, #28
 800e02a:	d501      	bpl.n	800e030 <__swbuf_r+0x20>
 800e02c:	6923      	ldr	r3, [r4, #16]
 800e02e:	b943      	cbnz	r3, 800e042 <__swbuf_r+0x32>
 800e030:	4621      	mov	r1, r4
 800e032:	4628      	mov	r0, r5
 800e034:	f000 f82a 	bl	800e08c <__swsetup_r>
 800e038:	b118      	cbz	r0, 800e042 <__swbuf_r+0x32>
 800e03a:	f04f 37ff 	mov.w	r7, #4294967295
 800e03e:	4638      	mov	r0, r7
 800e040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e042:	6823      	ldr	r3, [r4, #0]
 800e044:	6922      	ldr	r2, [r4, #16]
 800e046:	1a98      	subs	r0, r3, r2
 800e048:	6963      	ldr	r3, [r4, #20]
 800e04a:	b2f6      	uxtb	r6, r6
 800e04c:	4283      	cmp	r3, r0
 800e04e:	4637      	mov	r7, r6
 800e050:	dc05      	bgt.n	800e05e <__swbuf_r+0x4e>
 800e052:	4621      	mov	r1, r4
 800e054:	4628      	mov	r0, r5
 800e056:	f7ff fded 	bl	800dc34 <_fflush_r>
 800e05a:	2800      	cmp	r0, #0
 800e05c:	d1ed      	bne.n	800e03a <__swbuf_r+0x2a>
 800e05e:	68a3      	ldr	r3, [r4, #8]
 800e060:	3b01      	subs	r3, #1
 800e062:	60a3      	str	r3, [r4, #8]
 800e064:	6823      	ldr	r3, [r4, #0]
 800e066:	1c5a      	adds	r2, r3, #1
 800e068:	6022      	str	r2, [r4, #0]
 800e06a:	701e      	strb	r6, [r3, #0]
 800e06c:	6962      	ldr	r2, [r4, #20]
 800e06e:	1c43      	adds	r3, r0, #1
 800e070:	429a      	cmp	r2, r3
 800e072:	d004      	beq.n	800e07e <__swbuf_r+0x6e>
 800e074:	89a3      	ldrh	r3, [r4, #12]
 800e076:	07db      	lsls	r3, r3, #31
 800e078:	d5e1      	bpl.n	800e03e <__swbuf_r+0x2e>
 800e07a:	2e0a      	cmp	r6, #10
 800e07c:	d1df      	bne.n	800e03e <__swbuf_r+0x2e>
 800e07e:	4621      	mov	r1, r4
 800e080:	4628      	mov	r0, r5
 800e082:	f7ff fdd7 	bl	800dc34 <_fflush_r>
 800e086:	2800      	cmp	r0, #0
 800e088:	d0d9      	beq.n	800e03e <__swbuf_r+0x2e>
 800e08a:	e7d6      	b.n	800e03a <__swbuf_r+0x2a>

0800e08c <__swsetup_r>:
 800e08c:	b538      	push	{r3, r4, r5, lr}
 800e08e:	4b29      	ldr	r3, [pc, #164]	@ (800e134 <__swsetup_r+0xa8>)
 800e090:	4605      	mov	r5, r0
 800e092:	6818      	ldr	r0, [r3, #0]
 800e094:	460c      	mov	r4, r1
 800e096:	b118      	cbz	r0, 800e0a0 <__swsetup_r+0x14>
 800e098:	6a03      	ldr	r3, [r0, #32]
 800e09a:	b90b      	cbnz	r3, 800e0a0 <__swsetup_r+0x14>
 800e09c:	f7fd fa86 	bl	800b5ac <__sinit>
 800e0a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0a4:	0719      	lsls	r1, r3, #28
 800e0a6:	d422      	bmi.n	800e0ee <__swsetup_r+0x62>
 800e0a8:	06da      	lsls	r2, r3, #27
 800e0aa:	d407      	bmi.n	800e0bc <__swsetup_r+0x30>
 800e0ac:	2209      	movs	r2, #9
 800e0ae:	602a      	str	r2, [r5, #0]
 800e0b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0b4:	81a3      	strh	r3, [r4, #12]
 800e0b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e0ba:	e033      	b.n	800e124 <__swsetup_r+0x98>
 800e0bc:	0758      	lsls	r0, r3, #29
 800e0be:	d512      	bpl.n	800e0e6 <__swsetup_r+0x5a>
 800e0c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e0c2:	b141      	cbz	r1, 800e0d6 <__swsetup_r+0x4a>
 800e0c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e0c8:	4299      	cmp	r1, r3
 800e0ca:	d002      	beq.n	800e0d2 <__swsetup_r+0x46>
 800e0cc:	4628      	mov	r0, r5
 800e0ce:	f7fe facb 	bl	800c668 <_free_r>
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	6363      	str	r3, [r4, #52]	@ 0x34
 800e0d6:	89a3      	ldrh	r3, [r4, #12]
 800e0d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e0dc:	81a3      	strh	r3, [r4, #12]
 800e0de:	2300      	movs	r3, #0
 800e0e0:	6063      	str	r3, [r4, #4]
 800e0e2:	6923      	ldr	r3, [r4, #16]
 800e0e4:	6023      	str	r3, [r4, #0]
 800e0e6:	89a3      	ldrh	r3, [r4, #12]
 800e0e8:	f043 0308 	orr.w	r3, r3, #8
 800e0ec:	81a3      	strh	r3, [r4, #12]
 800e0ee:	6923      	ldr	r3, [r4, #16]
 800e0f0:	b94b      	cbnz	r3, 800e106 <__swsetup_r+0x7a>
 800e0f2:	89a3      	ldrh	r3, [r4, #12]
 800e0f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e0f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e0fc:	d003      	beq.n	800e106 <__swsetup_r+0x7a>
 800e0fe:	4621      	mov	r1, r4
 800e100:	4628      	mov	r0, r5
 800e102:	f000 f88b 	bl	800e21c <__smakebuf_r>
 800e106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e10a:	f013 0201 	ands.w	r2, r3, #1
 800e10e:	d00a      	beq.n	800e126 <__swsetup_r+0x9a>
 800e110:	2200      	movs	r2, #0
 800e112:	60a2      	str	r2, [r4, #8]
 800e114:	6962      	ldr	r2, [r4, #20]
 800e116:	4252      	negs	r2, r2
 800e118:	61a2      	str	r2, [r4, #24]
 800e11a:	6922      	ldr	r2, [r4, #16]
 800e11c:	b942      	cbnz	r2, 800e130 <__swsetup_r+0xa4>
 800e11e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e122:	d1c5      	bne.n	800e0b0 <__swsetup_r+0x24>
 800e124:	bd38      	pop	{r3, r4, r5, pc}
 800e126:	0799      	lsls	r1, r3, #30
 800e128:	bf58      	it	pl
 800e12a:	6962      	ldrpl	r2, [r4, #20]
 800e12c:	60a2      	str	r2, [r4, #8]
 800e12e:	e7f4      	b.n	800e11a <__swsetup_r+0x8e>
 800e130:	2000      	movs	r0, #0
 800e132:	e7f7      	b.n	800e124 <__swsetup_r+0x98>
 800e134:	20000198 	.word	0x20000198

0800e138 <_raise_r>:
 800e138:	291f      	cmp	r1, #31
 800e13a:	b538      	push	{r3, r4, r5, lr}
 800e13c:	4605      	mov	r5, r0
 800e13e:	460c      	mov	r4, r1
 800e140:	d904      	bls.n	800e14c <_raise_r+0x14>
 800e142:	2316      	movs	r3, #22
 800e144:	6003      	str	r3, [r0, #0]
 800e146:	f04f 30ff 	mov.w	r0, #4294967295
 800e14a:	bd38      	pop	{r3, r4, r5, pc}
 800e14c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e14e:	b112      	cbz	r2, 800e156 <_raise_r+0x1e>
 800e150:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e154:	b94b      	cbnz	r3, 800e16a <_raise_r+0x32>
 800e156:	4628      	mov	r0, r5
 800e158:	f000 f830 	bl	800e1bc <_getpid_r>
 800e15c:	4622      	mov	r2, r4
 800e15e:	4601      	mov	r1, r0
 800e160:	4628      	mov	r0, r5
 800e162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e166:	f000 b817 	b.w	800e198 <_kill_r>
 800e16a:	2b01      	cmp	r3, #1
 800e16c:	d00a      	beq.n	800e184 <_raise_r+0x4c>
 800e16e:	1c59      	adds	r1, r3, #1
 800e170:	d103      	bne.n	800e17a <_raise_r+0x42>
 800e172:	2316      	movs	r3, #22
 800e174:	6003      	str	r3, [r0, #0]
 800e176:	2001      	movs	r0, #1
 800e178:	e7e7      	b.n	800e14a <_raise_r+0x12>
 800e17a:	2100      	movs	r1, #0
 800e17c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e180:	4620      	mov	r0, r4
 800e182:	4798      	blx	r3
 800e184:	2000      	movs	r0, #0
 800e186:	e7e0      	b.n	800e14a <_raise_r+0x12>

0800e188 <raise>:
 800e188:	4b02      	ldr	r3, [pc, #8]	@ (800e194 <raise+0xc>)
 800e18a:	4601      	mov	r1, r0
 800e18c:	6818      	ldr	r0, [r3, #0]
 800e18e:	f7ff bfd3 	b.w	800e138 <_raise_r>
 800e192:	bf00      	nop
 800e194:	20000198 	.word	0x20000198

0800e198 <_kill_r>:
 800e198:	b538      	push	{r3, r4, r5, lr}
 800e19a:	4d07      	ldr	r5, [pc, #28]	@ (800e1b8 <_kill_r+0x20>)
 800e19c:	2300      	movs	r3, #0
 800e19e:	4604      	mov	r4, r0
 800e1a0:	4608      	mov	r0, r1
 800e1a2:	4611      	mov	r1, r2
 800e1a4:	602b      	str	r3, [r5, #0]
 800e1a6:	f7f5 fbfb 	bl	80039a0 <_kill>
 800e1aa:	1c43      	adds	r3, r0, #1
 800e1ac:	d102      	bne.n	800e1b4 <_kill_r+0x1c>
 800e1ae:	682b      	ldr	r3, [r5, #0]
 800e1b0:	b103      	cbz	r3, 800e1b4 <_kill_r+0x1c>
 800e1b2:	6023      	str	r3, [r4, #0]
 800e1b4:	bd38      	pop	{r3, r4, r5, pc}
 800e1b6:	bf00      	nop
 800e1b8:	200049bc 	.word	0x200049bc

0800e1bc <_getpid_r>:
 800e1bc:	f7f5 bbe8 	b.w	8003990 <_getpid>

0800e1c0 <_malloc_usable_size_r>:
 800e1c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1c4:	1f18      	subs	r0, r3, #4
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	bfbc      	itt	lt
 800e1ca:	580b      	ldrlt	r3, [r1, r0]
 800e1cc:	18c0      	addlt	r0, r0, r3
 800e1ce:	4770      	bx	lr

0800e1d0 <__swhatbuf_r>:
 800e1d0:	b570      	push	{r4, r5, r6, lr}
 800e1d2:	460c      	mov	r4, r1
 800e1d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1d8:	2900      	cmp	r1, #0
 800e1da:	b096      	sub	sp, #88	@ 0x58
 800e1dc:	4615      	mov	r5, r2
 800e1de:	461e      	mov	r6, r3
 800e1e0:	da0d      	bge.n	800e1fe <__swhatbuf_r+0x2e>
 800e1e2:	89a3      	ldrh	r3, [r4, #12]
 800e1e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e1e8:	f04f 0100 	mov.w	r1, #0
 800e1ec:	bf14      	ite	ne
 800e1ee:	2340      	movne	r3, #64	@ 0x40
 800e1f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e1f4:	2000      	movs	r0, #0
 800e1f6:	6031      	str	r1, [r6, #0]
 800e1f8:	602b      	str	r3, [r5, #0]
 800e1fa:	b016      	add	sp, #88	@ 0x58
 800e1fc:	bd70      	pop	{r4, r5, r6, pc}
 800e1fe:	466a      	mov	r2, sp
 800e200:	f000 f848 	bl	800e294 <_fstat_r>
 800e204:	2800      	cmp	r0, #0
 800e206:	dbec      	blt.n	800e1e2 <__swhatbuf_r+0x12>
 800e208:	9901      	ldr	r1, [sp, #4]
 800e20a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e20e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e212:	4259      	negs	r1, r3
 800e214:	4159      	adcs	r1, r3
 800e216:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e21a:	e7eb      	b.n	800e1f4 <__swhatbuf_r+0x24>

0800e21c <__smakebuf_r>:
 800e21c:	898b      	ldrh	r3, [r1, #12]
 800e21e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e220:	079d      	lsls	r5, r3, #30
 800e222:	4606      	mov	r6, r0
 800e224:	460c      	mov	r4, r1
 800e226:	d507      	bpl.n	800e238 <__smakebuf_r+0x1c>
 800e228:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e22c:	6023      	str	r3, [r4, #0]
 800e22e:	6123      	str	r3, [r4, #16]
 800e230:	2301      	movs	r3, #1
 800e232:	6163      	str	r3, [r4, #20]
 800e234:	b003      	add	sp, #12
 800e236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e238:	ab01      	add	r3, sp, #4
 800e23a:	466a      	mov	r2, sp
 800e23c:	f7ff ffc8 	bl	800e1d0 <__swhatbuf_r>
 800e240:	9f00      	ldr	r7, [sp, #0]
 800e242:	4605      	mov	r5, r0
 800e244:	4639      	mov	r1, r7
 800e246:	4630      	mov	r0, r6
 800e248:	f7fe fdbc 	bl	800cdc4 <_malloc_r>
 800e24c:	b948      	cbnz	r0, 800e262 <__smakebuf_r+0x46>
 800e24e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e252:	059a      	lsls	r2, r3, #22
 800e254:	d4ee      	bmi.n	800e234 <__smakebuf_r+0x18>
 800e256:	f023 0303 	bic.w	r3, r3, #3
 800e25a:	f043 0302 	orr.w	r3, r3, #2
 800e25e:	81a3      	strh	r3, [r4, #12]
 800e260:	e7e2      	b.n	800e228 <__smakebuf_r+0xc>
 800e262:	89a3      	ldrh	r3, [r4, #12]
 800e264:	6020      	str	r0, [r4, #0]
 800e266:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e26a:	81a3      	strh	r3, [r4, #12]
 800e26c:	9b01      	ldr	r3, [sp, #4]
 800e26e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e272:	b15b      	cbz	r3, 800e28c <__smakebuf_r+0x70>
 800e274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e278:	4630      	mov	r0, r6
 800e27a:	f000 f81d 	bl	800e2b8 <_isatty_r>
 800e27e:	b128      	cbz	r0, 800e28c <__smakebuf_r+0x70>
 800e280:	89a3      	ldrh	r3, [r4, #12]
 800e282:	f023 0303 	bic.w	r3, r3, #3
 800e286:	f043 0301 	orr.w	r3, r3, #1
 800e28a:	81a3      	strh	r3, [r4, #12]
 800e28c:	89a3      	ldrh	r3, [r4, #12]
 800e28e:	431d      	orrs	r5, r3
 800e290:	81a5      	strh	r5, [r4, #12]
 800e292:	e7cf      	b.n	800e234 <__smakebuf_r+0x18>

0800e294 <_fstat_r>:
 800e294:	b538      	push	{r3, r4, r5, lr}
 800e296:	4d07      	ldr	r5, [pc, #28]	@ (800e2b4 <_fstat_r+0x20>)
 800e298:	2300      	movs	r3, #0
 800e29a:	4604      	mov	r4, r0
 800e29c:	4608      	mov	r0, r1
 800e29e:	4611      	mov	r1, r2
 800e2a0:	602b      	str	r3, [r5, #0]
 800e2a2:	f7f5 fbdd 	bl	8003a60 <_fstat>
 800e2a6:	1c43      	adds	r3, r0, #1
 800e2a8:	d102      	bne.n	800e2b0 <_fstat_r+0x1c>
 800e2aa:	682b      	ldr	r3, [r5, #0]
 800e2ac:	b103      	cbz	r3, 800e2b0 <_fstat_r+0x1c>
 800e2ae:	6023      	str	r3, [r4, #0]
 800e2b0:	bd38      	pop	{r3, r4, r5, pc}
 800e2b2:	bf00      	nop
 800e2b4:	200049bc 	.word	0x200049bc

0800e2b8 <_isatty_r>:
 800e2b8:	b538      	push	{r3, r4, r5, lr}
 800e2ba:	4d06      	ldr	r5, [pc, #24]	@ (800e2d4 <_isatty_r+0x1c>)
 800e2bc:	2300      	movs	r3, #0
 800e2be:	4604      	mov	r4, r0
 800e2c0:	4608      	mov	r0, r1
 800e2c2:	602b      	str	r3, [r5, #0]
 800e2c4:	f7f5 fbdc 	bl	8003a80 <_isatty>
 800e2c8:	1c43      	adds	r3, r0, #1
 800e2ca:	d102      	bne.n	800e2d2 <_isatty_r+0x1a>
 800e2cc:	682b      	ldr	r3, [r5, #0]
 800e2ce:	b103      	cbz	r3, 800e2d2 <_isatty_r+0x1a>
 800e2d0:	6023      	str	r3, [r4, #0]
 800e2d2:	bd38      	pop	{r3, r4, r5, pc}
 800e2d4:	200049bc 	.word	0x200049bc

0800e2d8 <_init>:
 800e2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2da:	bf00      	nop
 800e2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2de:	bc08      	pop	{r3}
 800e2e0:	469e      	mov	lr, r3
 800e2e2:	4770      	bx	lr

0800e2e4 <_fini>:
 800e2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2e6:	bf00      	nop
 800e2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ea:	bc08      	pop	{r3}
 800e2ec:	469e      	mov	lr, r3
 800e2ee:	4770      	bx	lr
